var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"motor","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"C:\\Users\\tql\\OneDrive\\文档\\中期答辩\\伺服电机\\异步电机\\拆分版\\motor_ert_rtw","tag":"","groupDisplay":"主文件","code":"/*\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'motor'.\r\n *\r\n * Model version                  : 1.0\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Thu Oct 10 15:56:04 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Linux 64)\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"motor.h\"                     /* Model header file */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n  static boolean_T OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n\r\n  /* Check for overrun */\r\n  if (OverrunFlag) {\r\n    rtmSetErrorStatus(rtM, \"Overrun\");\r\n    return;\r\n  }\r\n\r\n  OverrunFlag = true;\r\n\r\n  /* Save FPU context here (if necessary) */\r\n  /* Re-enable timer or interrupt here */\r\n  /* Set model inputs here */\r\n\r\n  /* Step the model */\r\n  motor_step();\r\n\r\n  /* Get model outputs here */\r\n\r\n  /* Indicate task complete */\r\n  OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n  /* Restore FPU context here (if necessary) */\r\n  /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example main function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific. This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint_T main(int_T argc, const char *argv[])\r\n{\r\n  /* Unused arguments */\r\n  (void)(argc);\r\n  (void)(argv);\r\n\r\n  /* Initialize model */\r\n  motor_initialize();\r\n\r\n  /* Attach rt_OneStep to a timer or interrupt service routine with\r\n   * period 1.0E-5 seconds (base rate of the model) here.\r\n   * The call syntax for rt_OneStep is\r\n   *\r\n   *  rt_OneStep();\r\n   */\r\n  printf(\"Warning: The simulation will run forever. \"\r\n         \"Generated ERT main won't simulate model step behavior. \"\r\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\r\n  fflush((NULL));\r\n  while (rtmGetErrorStatus(rtM) == (NULL)) {\r\n    /*  Perform application tasks here */\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"motor.c","type":"source","group":"model","path":"C:\\Users\\tql\\OneDrive\\文档\\中期答辩\\伺服电机\\异步电机\\拆分版\\motor_ert_rtw","tag":"","groupDisplay":"模型文件","code":"/*\r\n * File: motor.c\r\n *\r\n * Code generated for Simulink model 'motor'.\r\n *\r\n * Model version                  : 1.0\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Thu Oct 10 15:56:04 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Linux 64)\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"motor.h\"\r\n#include \"rtwtypes.h\"\r\n#include <string.h>\r\n#include <emmintrin.h>\r\n#include <stddef.h>\r\n#include <math.h>\r\n#include <stdlib.h>\r\n#define NumBitsPerChar                 8U\r\n#ifndef CodeFormat\r\n#define CodeFormat                     S-Function\r\n#else\r\n#undef CodeFormat\r\n#define CodeFormat                     S-Function\r\n#endif\r\n\r\n#ifndef S_FUNCTION_NAME\r\n#define S_FUNCTION_NAME                simulink_only_sfcn\r\n#else\r\n#undef S_FUNCTION_NAME\r\n#define S_FUNCTION_NAME                simulink_only_sfcn\r\n#endif\r\n\r\n#ifndef S_FUNCTION_LEVEL\r\n#define S_FUNCTION_LEVEL               2\r\n#else\r\n#undef S_FUNCTION_LEVEL\r\n#define S_FUNCTION_LEVEL               2\r\n#endif\r\n\r\n#ifndef RTW_GENERATED_S_FUNCTION\r\n#define RTW_GENERATED_S_FUNCTION\r\n#endif\r\n\r\n#ifndef rtmGetDataMapInfo\r\n# define rtmGetDataMapInfo(rtm)        NULL\r\n#endif\r\n\r\n#ifndef rtmSetDataMapInfo\r\n# define rtmSetDataMapInfo(rtm, val)\r\n#endif\r\n\r\n#if !defined(RTW_SFUNCTION_DEFINES)\r\n#define RTW_SFUNCTION_DEFINES\r\n#ifndef _RTW_COMMON_DEFINES_\r\n#define _RTW_COMMON_DEFINES_\r\n#endif\r\n#endif\r\n\r\nconst real_T motor_RGND = 0.0;         /* real_T ground */\r\n\r\n/* Block signals and states (default storage) */\r\nDW rtDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY rtY;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL rtM_;\r\nRT_MODEL *const rtM = &rtM_;\r\nextern void rt_invd4x4_snf(const real_T u[16], real_T y[16]);\r\n\r\n#define NOT_USING_NONFINITE_LITERALS   1\r\n\r\nextern real_T rtInf;\r\nextern real_T rtMinusInf;\r\nextern real_T rtNaN;\r\nextern real32_T rtInfF;\r\nextern real32_T rtMinusInfF;\r\nextern real32_T rtNaNF;\r\nstatic void rt_InitInfAndNaN(size_t realSize);\r\nstatic boolean_T rtIsInf(real_T value);\r\nstatic boolean_T rtIsInfF(real32_T value);\r\nstatic boolean_T rtIsNaN(real_T value);\r\nstatic boolean_T rtIsNaNF(real32_T value);\r\ntypedef struct {\r\n  struct {\r\n    uint32_T wordH;\r\n    uint32_T wordL;\r\n  } words;\r\n} BigEndianIEEEDouble;\r\n\r\ntypedef struct {\r\n  struct {\r\n    uint32_T wordL;\r\n    uint32_T wordH;\r\n  } words;\r\n} LittleEndianIEEEDouble;\r\n\r\ntypedef struct {\r\n  union {\r\n    real32_T wordLreal;\r\n    uint32_T wordLuint;\r\n  } wordL;\r\n} IEEESingle;\r\n\r\nreal_T rtInf;\r\nreal_T rtMinusInf;\r\nreal_T rtNaN;\r\nreal32_T rtInfF;\r\nreal32_T rtMinusInfF;\r\nreal32_T rtNaNF;\r\nstatic real_T rtGetInf(void);\r\nstatic real32_T rtGetInfF(void);\r\nstatic real_T rtGetMinusInf(void);\r\nstatic real32_T rtGetMinusInfF(void);\r\nstatic real_T rtGetNaN(void);\r\nstatic real32_T rtGetNaNF(void);\r\n\r\n/*\r\n * Initialize the rtInf, rtMinusInf, and rtNaN needed by the\r\n * generated code. NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic void rt_InitInfAndNaN(size_t realSize)\r\n{\r\n  (void) (realSize);\r\n  rtNaN = rtGetNaN();\r\n  rtNaNF = rtGetNaNF();\r\n  rtInf = rtGetInf();\r\n  rtInfF = rtGetInfF();\r\n  rtMinusInf = rtGetMinusInf();\r\n  rtMinusInfF = rtGetMinusInfF();\r\n}\r\n\r\n/* Test if value is infinite */\r\nstatic boolean_T rtIsInf(real_T value)\r\n{\r\n  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);\r\n}\r\n\r\n/* Test if single-precision value is infinite */\r\nstatic boolean_T rtIsInfF(real32_T value)\r\n{\r\n  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);\r\n}\r\n\r\n/* Test if value is not a number */\r\nstatic boolean_T rtIsNaN(real_T value)\r\n{\r\n  boolean_T result = (boolean_T) 0;\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  if (bitsPerReal == 32U) {\r\n    result = rtIsNaNF((real32_T)value);\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.fltVal = value;\r\n    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&\r\n                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||\r\n                          (tmpVal.bitVal.words.wordL != 0) ));\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/* Test if single-precision value is not a number */\r\nstatic boolean_T rtIsNaNF(real32_T value)\r\n{\r\n  IEEESingle tmp;\r\n  tmp.wordL.wordLreal = value;\r\n  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&\r\n                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );\r\n}\r\n\r\n/*\r\n * Initialize rtInf needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real_T rtGetInf(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T inf = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    inf = rtGetInfF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0x7FF00000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    inf = tmpVal.fltVal;\r\n  }\r\n\r\n  return inf;\r\n}\r\n\r\n/*\r\n * Initialize rtInfF needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real32_T rtGetInfF(void)\r\n{\r\n  IEEESingle infF;\r\n  infF.wordL.wordLuint = 0x7F800000U;\r\n  return infF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * Initialize rtMinusInf needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real_T rtGetMinusInf(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T minf = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    minf = rtGetMinusInfF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0xFFF00000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    minf = tmpVal.fltVal;\r\n  }\r\n\r\n  return minf;\r\n}\r\n\r\n/*\r\n * Initialize rtMinusInfF needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real32_T rtGetMinusInfF(void)\r\n{\r\n  IEEESingle minfF;\r\n  minfF.wordL.wordLuint = 0xFF800000U;\r\n  return minfF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * Initialize rtNaN needed by the generated code.\r\n * NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real_T rtGetNaN(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T nan = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    nan = rtGetNaNF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0xFFF80000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    nan = tmpVal.fltVal;\r\n  }\r\n\r\n  return nan;\r\n}\r\n\r\n/*\r\n * Initialize rtNaNF needed by the generated code.\r\n * NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real32_T rtGetNaNF(void)\r\n{\r\n  IEEESingle nanF = { { 0.0F } };\r\n\r\n  nanF.wordL.wordLuint = 0xFFC00000U;\r\n  return nanF.wordL.wordLreal;\r\n}\r\n\r\nvoid rt_invd4x4_snf(const real_T u[16], real_T y[16])\r\n{\r\n  real_T x[16];\r\n  real_T smax;\r\n  int32_T ijA;\r\n  int32_T ipiv_tmp;\r\n  int32_T ix;\r\n  int32_T iy;\r\n  int32_T jA;\r\n  int32_T jBcol;\r\n  int32_T jj;\r\n  int32_T jp1j;\r\n  int32_T pipk;\r\n  int8_T ipiv[4];\r\n  int8_T p[4];\r\n  for (ipiv_tmp = 0; ipiv_tmp < 16; ipiv_tmp++) {\r\n    y[ipiv_tmp] = 0.0;\r\n    x[ipiv_tmp] = u[ipiv_tmp];\r\n  }\r\n\r\n  ipiv[0] = 1;\r\n  ipiv[1] = 2;\r\n  ipiv[2] = 3;\r\n  for (pipk = 0; pipk < 3; pipk++) {\r\n    jBcol = pipk * 5 + 2;\r\n    jj = pipk * 5;\r\n    ix = 4 - pipk;\r\n    iy = 1;\r\n    smax = fabs(x[jj]);\r\n    for (jA = 2; jA <= ix; jA++) {\r\n      real_T s;\r\n      s = fabs(x[(jBcol + jA) - 3]);\r\n      if (s > smax) {\r\n        iy = jA;\r\n        smax = s;\r\n      }\r\n    }\r\n\r\n    if (x[(jBcol + iy) - 3] != 0.0) {\r\n      if (iy - 1 != 0) {\r\n        ipiv_tmp = pipk + iy;\r\n        ipiv[pipk] = (int8_T)ipiv_tmp;\r\n        smax = x[pipk];\r\n        x[pipk] = x[ipiv_tmp - 1];\r\n        x[ipiv_tmp - 1] = smax;\r\n        smax = x[pipk + 4];\r\n        x[pipk + 4] = x[ipiv_tmp + 3];\r\n        x[ipiv_tmp + 3] = smax;\r\n        smax = x[pipk + 8];\r\n        x[pipk + 8] = x[ipiv_tmp + 7];\r\n        x[ipiv_tmp + 7] = smax;\r\n        smax = x[pipk + 12];\r\n        x[pipk + 12] = x[ipiv_tmp + 11];\r\n        x[ipiv_tmp + 11] = smax;\r\n      }\r\n\r\n      iy = jBcol - pipk;\r\n      for (ix = jBcol; ix <= iy + 2; ix++) {\r\n        x[ix - 1] /= x[jj];\r\n      }\r\n    }\r\n\r\n    ix = 3 - pipk;\r\n    jA = jj;\r\n    jj += 4;\r\n    for (jp1j = 0; jp1j < ix; jp1j++) {\r\n      smax = x[(jp1j << 2) + jj];\r\n      if (smax != 0.0) {\r\n        iy = jA + 6;\r\n        ipiv_tmp = jA - pipk;\r\n        for (ijA = iy; ijA <= ipiv_tmp + 8; ijA++) {\r\n          x[ijA - 1] += x[((jBcol + ijA) - jA) - 7] * -smax;\r\n        }\r\n      }\r\n\r\n      jA += 4;\r\n    }\r\n  }\r\n\r\n  p[0] = 1;\r\n  p[1] = 2;\r\n  p[2] = 3;\r\n  p[3] = 4;\r\n  if (ipiv[0] > 1) {\r\n    pipk = p[ipiv[0] - 1];\r\n    p[ipiv[0] - 1] = 1;\r\n    p[0] = (int8_T)pipk;\r\n  }\r\n\r\n  if (ipiv[1] > 2) {\r\n    pipk = p[ipiv[1] - 1];\r\n    p[ipiv[1] - 1] = p[1];\r\n    p[1] = (int8_T)pipk;\r\n  }\r\n\r\n  if (ipiv[2] > 3) {\r\n    pipk = p[ipiv[2] - 1];\r\n    p[ipiv[2] - 1] = p[2];\r\n    p[2] = (int8_T)pipk;\r\n  }\r\n\r\n  for (jA = 0; jA < 4; jA++) {\r\n    jj = (p[jA] - 1) << 2;\r\n    y[jA + jj] = 1.0;\r\n    for (pipk = jA + 1; pipk < 5; pipk++) {\r\n      ipiv_tmp = (jj + pipk) - 1;\r\n      if (y[ipiv_tmp] != 0.0) {\r\n        for (ix = pipk + 1; ix < 5; ix++) {\r\n          jBcol = (jj + ix) - 1;\r\n          y[jBcol] -= x[(((pipk - 1) << 2) + ix) - 1] * y[ipiv_tmp];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  for (pipk = 0; pipk < 4; pipk++) {\r\n    jBcol = pipk << 2;\r\n    for (jA = 3; jA >= 0; jA--) {\r\n      jp1j = jA << 2;\r\n      ipiv_tmp = jA + jBcol;\r\n      smax = y[ipiv_tmp];\r\n      if (smax != 0.0) {\r\n        y[ipiv_tmp] = smax / x[jA + jp1j];\r\n        iy = jA - 1;\r\n        for (ix = 0; ix <= iy; ix++) {\r\n          jj = ix + jBcol;\r\n          y[jj] -= x[ix + jp1j] * y[ipiv_tmp];\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/* Model step function */\r\nvoid motor_step(void)\r\n{\r\n  __m128d tmp;\r\n  __m128d tmp_0;\r\n  __m128d tmp_1;\r\n  __m128d tmp_2;\r\n  __m128d tmp_3;\r\n  __m128d tmp_4;\r\n  __m128d tmp_5;\r\n  __m128d tmp_6;\r\n  __m128d tmp_7;\r\n  real_T W43wr[16];\r\n  real_T rtb_Lminrows24col24_0[16];\r\n  real_T rtb_Sum5[16];\r\n  real_T rtb_MultiportSwitch[4];\r\n  real_T rtb_Sum2[4];\r\n  real_T TrigonometricFunction_o1;\r\n  real_T TrigonometricFunction_o2;\r\n  real_T fluxes_DSTATE;\r\n  real_T fluxes_DSTATE_0;\r\n  real_T isb_f;\r\n  real_T rtb_MultiportSwitch1_idx_0;\r\n  real_T rtb_MultiportSwitch1_idx_1;\r\n  real_T rtb_MultiportSwitch1_idx_2;\r\n  real_T rtb_MultiportSwitch1_idx_3;\r\n  real_T rtb_Phisat;\r\n  real_T rtb_phimd;\r\n  real_T rtb_u_Vb_idx_3;\r\n  real_T vdr_p;\r\n  real_T vds_i;\r\n  int32_T i;\r\n  int32_T i_0;\r\n  int32_T rtb_Sum5_tmp;\r\n\r\n  /* Update for UnitDelay: '<S13>/fluxes' incorporates:\r\n   *  UnitDelay: '<S15>/fluxes'\r\n   */\r\n  rtDW.fluxes_DSTATE_l[0] = rtDW.fluxes_DSTATE[0];\r\n  rtDW.fluxes_DSTATE_l[1] = rtDW.fluxes_DSTATE[1];\r\n  rtDW.fluxes_DSTATE_l[2] = rtDW.fluxes_DSTATE[2];\r\n  rtDW.fluxes_DSTATE_l[3] = rtDW.fluxes_DSTATE[3];\r\n\r\n  /* Switch: '<S8>/Switch' incorporates:\r\n   *  Constant: '<S8>/Constant2'\r\n   *  Product: '<S14>/inversion'\r\n   */\r\n  memcpy(&rtb_Lminrows24col24_0[0], &rtConstP.Constant2_Value[0], sizeof(real_T)\r\n         << 4U);\r\n\r\n  /* UnitDelay: '<S15>/fluxes' incorporates:\r\n   *  Product: '<S8>/Product3'\r\n   */\r\n  isb_f = rtDW.fluxes_DSTATE[1];\r\n  TrigonometricFunction_o2 = rtDW.fluxes_DSTATE[0];\r\n  fluxes_DSTATE = rtDW.fluxes_DSTATE[2];\r\n  fluxes_DSTATE_0 = rtDW.fluxes_DSTATE[3];\r\n  for (i = 0; i <= 2; i += 2) {\r\n    /* Product: '<S8>/Product3' incorporates:\r\n     *  UnitDelay: '<S15>/fluxes'\r\n     */\r\n    tmp_4 = _mm_loadu_pd(&rtb_Lminrows24col24_0[i + 4]);\r\n    tmp_5 = _mm_loadu_pd(&rtb_Lminrows24col24_0[i]);\r\n    tmp_6 = _mm_loadu_pd(&rtb_Lminrows24col24_0[i + 8]);\r\n    tmp_7 = _mm_loadu_pd(&rtb_Lminrows24col24_0[i + 12]);\r\n    _mm_storeu_pd(&rtb_Sum2[i], _mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_mul_pd\r\n      (tmp_4, _mm_set1_pd(isb_f)), _mm_mul_pd(tmp_5, _mm_set1_pd\r\n      (TrigonometricFunction_o2))), _mm_mul_pd(tmp_6, _mm_set1_pd(fluxes_DSTATE))),\r\n      _mm_mul_pd(tmp_7, _mm_set1_pd(fluxes_DSTATE_0))));\r\n  }\r\n\r\n  /* UnitDelay: '<S30>/wm_delay' */\r\n  rtb_Phisat = rtDW.wm_delay_DSTATE;\r\n\r\n  /* Sum: '<S30>/Sum1' incorporates:\r\n   *  Gain: '<S30>/F2'\r\n   *  UnitDelay: '<S30>/wm_predict'\r\n   */\r\n  rtb_phimd = 2.0 * rtb_Phisat - rtDW.wm_predict_DSTATE;\r\n\r\n  /* Outputs for Enabled SubSystem: '<S11>/sin(thr),cos(thr)' incorporates:\r\n   *  EnablePort: '<S28>/Enable'\r\n   */\r\n  if (rtDW.sinthrcosthr_MODE) {\r\n    /* Disable for Trigonometry: '<S28>/Trigonometric Function' incorporates:\r\n     *  Outport: '<S28>/sin(thr),cos(thr)'\r\n     */\r\n    rtDW.TrigonometricFunction_o1_d = 0.0;\r\n\r\n    /* Disable for Trigonometry: '<S28>/Trigonometric Function' incorporates:\r\n     *  Outport: '<S28>/sin(thr),cos(thr)'\r\n     */\r\n    rtDW.TrigonometricFunction_o2_j = 0.0;\r\n\r\n    /* Disable for Outport: '<S28>/sin(thr),cos(thr)' incorporates:\r\n     *  Constant: '<S28>/Constant'\r\n     */\r\n    rtDW.Constant_e[0] = 0.0;\r\n    rtDW.Constant_e[1] = 0.0;\r\n\r\n    /* Disable for Assignment: '<S28>/W(2,1)=-wr' incorporates:\r\n     *  Outport: '<S28>/W'\r\n     */\r\n    memset(&rtDW.W21wr[0], 0, sizeof(real_T) << 4U);\r\n    rtDW.sinthrcosthr_MODE = false;\r\n  }\r\n\r\n  /* End of Outputs for SubSystem: '<S11>/sin(thr),cos(thr)' */\r\n\r\n  /* Outputs for Enabled SubSystem: '<S11>/sin(thr),cos(thr)1' incorporates:\r\n   *  EnablePort: '<S29>/Enable'\r\n   */\r\n  /* Assignment: '<S29>/W(4,3)=wr' incorporates:\r\n   *  SignalConversion generated from: '<S29>/W(3,4)=-wr'\r\n   */\r\n  memset(&W43wr[0], 0, sizeof(real_T) << 4U);\r\n\r\n  /* Gain: '<S29>/Gain3' incorporates:\r\n   *  Assignment: '<S29>/W(4,3)=wr'\r\n   */\r\n  W43wr[14] = -rtb_phimd;\r\n\r\n  /* Assignment: '<S29>/W(4,3)=wr' */\r\n  W43wr[11] = rtb_phimd;\r\n\r\n  /* Trigonometry: '<S29>/Trigonometric Function' incorporates:\r\n   *  DiscreteIntegrator: '<S7>/Rotor angle thetam'\r\n   */\r\n  TrigonometricFunction_o1 = sin(rtDW.Rotoranglethetam_DSTATE);\r\n\r\n  /* Trigonometry: '<S29>/Trigonometric Function' incorporates:\r\n   *  DiscreteIntegrator: '<S7>/Rotor angle thetam'\r\n   */\r\n  TrigonometricFunction_o2 = cos(rtDW.Rotoranglethetam_DSTATE);\r\n\r\n  /* End of Outputs for SubSystem: '<S11>/sin(thr),cos(thr)1' */\r\n\r\n  /* Outputs for Enabled SubSystem: '<S10>/Rotor reference frame' incorporates:\r\n   *  EnablePort: '<S24>/Enable'\r\n   */\r\n  if (rtDW.Rotorreferenceframe_MODE) {\r\n    /* Disable for Fcn: '<S24>/ira' incorporates:\r\n     *  Outport: '<S24>/ira,irb'\r\n     */\r\n    rtDW.ira_p = 0.0;\r\n\r\n    /* Disable for Fcn: '<S24>/irb' incorporates:\r\n     *  Outport: '<S24>/ira,irb'\r\n     */\r\n    rtDW.irb_n = 0.0;\r\n\r\n    /* Disable for Fcn: '<S24>/isa' incorporates:\r\n     *  Outport: '<S24>/isa,isb'\r\n     */\r\n    rtDW.isa_m = 0.0;\r\n\r\n    /* Disable for Fcn: '<S24>/isb' incorporates:\r\n     *  Outport: '<S24>/isa,isb'\r\n     */\r\n    rtDW.isb_p = 0.0;\r\n    rtDW.Rotorreferenceframe_MODE = false;\r\n  }\r\n\r\n  /* End of Outputs for SubSystem: '<S10>/Rotor reference frame' */\r\n\r\n  /* Outputs for Enabled SubSystem: '<S10>/Stationary reference frame' incorporates:\r\n   *  EnablePort: '<S25>/Enable'\r\n   */\r\n  /* Fcn: '<S25>/isb' */\r\n  isb_f = -(1.7320508075688772 * rtb_Sum2[1] + rtb_Sum2[0]) / 2.0;\r\n\r\n  /* End of Outputs for SubSystem: '<S10>/Stationary reference frame' */\r\n\r\n  /* Outputs for Enabled SubSystem: '<S10>/Synchronous reference frame' incorporates:\r\n   *  EnablePort: '<S26>/Enable'\r\n   */\r\n  if (rtDW.Synchronousreferenceframe_MODE) {\r\n    /* Disable for Fcn: '<S26>/ira' incorporates:\r\n     *  Outport: '<S26>/ira,irb'\r\n     */\r\n    rtDW.ira = 0.0;\r\n\r\n    /* Disable for Fcn: '<S26>/irb' incorporates:\r\n     *  Outport: '<S26>/ira,irb'\r\n     */\r\n    rtDW.irb = 0.0;\r\n\r\n    /* Disable for Fcn: '<S26>/isa' incorporates:\r\n     *  Outport: '<S26>/isa,isb'\r\n     */\r\n    rtDW.isa = 0.0;\r\n\r\n    /* Disable for Fcn: '<S26>/isb' incorporates:\r\n     *  Outport: '<S26>/isa,isb'\r\n     */\r\n    rtDW.isb = 0.0;\r\n    rtDW.Synchronousreferenceframe_MODE = false;\r\n  }\r\n\r\n  /* End of Outputs for SubSystem: '<S10>/Synchronous reference frame' */\r\n\r\n  /* Outputs for Enabled SubSystem: '<S10>/Stationary reference frame' incorporates:\r\n   *  EnablePort: '<S25>/Enable'\r\n   */\r\n  /* Gain: '<S10>/ib' incorporates:\r\n   *  Fcn: '<S25>/ira'\r\n   *  Fcn: '<S25>/irb'\r\n   *  Fcn: '<S25>/isa'\r\n   *  MultiPortSwitch: '<S10>/Multiport Switch1'\r\n   *  MultiPortSwitch: '<S11>/Multiport Switch'\r\n   */\r\n  rtDW.ib[0] = (TrigonometricFunction_o2 * rtb_Sum2[2] -\r\n                TrigonometricFunction_o1 * rtb_Sum2[3]) * 13.731987951966302;\r\n  rtDW.ib[2] = 13.731987951966302 * rtb_Sum2[0];\r\n  rtDW.ib[1] = ((-TrigonometricFunction_o2 - 1.7320508075688772 *\r\n                 TrigonometricFunction_o1) * rtb_Sum2[2] +\r\n                (TrigonometricFunction_o1 - 1.7320508075688772 *\r\n                 TrigonometricFunction_o2) * rtb_Sum2[3]) / 2.0 *\r\n    13.731987951966302;\r\n\r\n  /* End of Outputs for SubSystem: '<S10>/Stationary reference frame' */\r\n  rtDW.ib[3] = 13.731987951966302 * isb_f;\r\n\r\n  /* S-Function (sfun_spssw_discc): '<S34>/State-Space' incorporates:\r\n   *  Constant: '<S31>/DC'\r\n   *  Inport: '<Root>/gate'\r\n   */\r\n\r\n  /* S-Function block: <S34>/State-Space */\r\n  {\r\n    real_T accum;\r\n\r\n    /* Circuit has switches */\r\n    int_T *switch_status = (int_T*) rtDW.StateSpace_PWORK.SWITCH_STATUS;\r\n    int_T *switch_status_init = (int_T*)\r\n      rtDW.StateSpace_PWORK.SWITCH_STATUS_INIT;\r\n    int_T *SwitchChange = (int_T*) rtDW.StateSpace_PWORK.SW_CHG;\r\n    int_T *gState = (int_T*) rtDW.StateSpace_PWORK.G_STATE;\r\n    real_T *yswitch = (real_T*)rtDW.StateSpace_PWORK.Y_SWITCH;\r\n    int_T *switchTypes = (int_T*) rtDW.StateSpace_PWORK.SWITCH_TYPES;\r\n    int_T *idxOutSw = (int_T*) rtDW.StateSpace_PWORK.IDX_OUT_SW;\r\n    real_T *DxCol = (real_T*)rtDW.StateSpace_PWORK.DX_COL;\r\n    real_T *tmp2 = (real_T*)rtDW.StateSpace_PWORK.TMP2;\r\n    real_T *uswlast = (real_T*)rtDW.StateSpace_PWORK.USWLAST;\r\n    int_T newState;\r\n    int_T swChanged = 0;\r\n    int loopsToDo = 20;\r\n    real_T temp;\r\n\r\n    /* keep an initial copy of switch_status*/\r\n    memcpy(switch_status_init, switch_status, 6 * sizeof(int_T));\r\n    memcpy(uswlast, &rtDW.StateSpace_o1[0], 6*sizeof(real_T));\r\n    do {\r\n      if (loopsToDo == 1) {            /* Need to reset some variables: */\r\n        swChanged = 0;\r\n\r\n        /* return to the original switch status*/\r\n        {\r\n          int_T i1;\r\n          for (i1=0; i1 < 6; i1++) {\r\n            swChanged = ((SwitchChange[i1] = switch_status_init[i1] -\r\n                          switch_status[i1]) != 0) ? 1 : swChanged;\r\n            switch_status[i1] = switch_status_init[i1];\r\n          }\r\n        }\r\n      } else {\r\n        /*\r\n         * Compute outputs:\r\n         * ---------------\r\n         */\r\n        real_T *Ds = (real_T*)rtDW.StateSpace_PWORK.DS;\r\n\r\n        {\r\n          int_T i1;\r\n          real_T *y0 = &rtDW.StateSpace_o1[0];\r\n          for (i1=0; i1 < 8; i1++) {\r\n            accum = 0.0;\r\n\r\n            {\r\n              int_T i2;\r\n              const real_T *u0;\r\n              for (i2=0; i2 < 6; i2++) {\r\n                accum += *(Ds++) * 0.0;\r\n              }\r\n\r\n              accum += *(Ds++) * rtDW.ib[2];\r\n              accum += *(Ds++) * rtDW.ib[3];\r\n              accum += *(Ds++) * 500.0;\r\n            }\r\n\r\n            y0[i1] = accum;\r\n          }\r\n        }\r\n\r\n        swChanged = 0;\r\n\r\n        {\r\n          int_T i1;\r\n          real_T *y0 = &rtDW.StateSpace_o1[0];\r\n          for (i1=0; i1 < 6; i1++) {\r\n            newState = ((y0[i1] > 0.0) && (gState[i1] > 0)) || (y0[i1] < 0.0) ?\r\n              1 : (((y0[i1] > 0.0) && gState[i1] == 0) ? 0 : switch_status[i1]);\r\n            swChanged = ((SwitchChange[i1] = newState - switch_status[i1]) != 0)\r\n              ? 1 : swChanged;\r\n            switch_status[i1] = newState;/* Keep new state */\r\n          }\r\n        }\r\n      }\r\n\r\n      /*\r\n       * Compute new As, Bs, Cs and Ds matrixes:\r\n       * --------------------------------------\r\n       */\r\n      if (swChanged) {\r\n        real_T *Ds = (real_T*)rtDW.StateSpace_PWORK.DS;\r\n        real_T a1;\r\n\r\n        {\r\n          int_T i1;\r\n          for (i1=0; i1 < 6; i1++) {\r\n            if (SwitchChange[i1] != 0) {\r\n              a1 = 1000.0*SwitchChange[i1];\r\n              temp = 1/(1-Ds[i1*10]*a1);\r\n\r\n              {\r\n                int_T i2;\r\n                for (i2=0; i2 < 8; i2++) {\r\n                  DxCol[i2]= Ds[i2 * 9 + i1]*temp*a1;\r\n                }\r\n              }\r\n\r\n              DxCol[i1] = temp;\r\n\r\n              /* Copy row nSw of Ds into tmp2 and zero it out in Ds */\r\n              memcpy(tmp2, &Ds[i1 * 9], 9 * sizeof(real_T));\r\n              memset(&Ds[i1 * 9], '\\0', 9 * sizeof(real_T));\r\n\r\n              /* Cs = Cs + DxCol * tmp1, Ds = Ds + DxCol * tmp2 *******************/\r\n              {\r\n                int_T i2;\r\n                for (i2=0; i2 < 8; i2++) {\r\n                  a1 = DxCol[i2];\r\n\r\n                  {\r\n                    int_T i3;\r\n                    for (i3=0; i3 < 9; i3++) {\r\n                      Ds[i2 * 9 + i3] += a1 * tmp2[i3];\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }                                /* if (swChanged) */\r\n    } while (swChanged > 0 && --loopsToDo > 0);\r\n\r\n    if (loopsToDo == 0) {\r\n      real_T *Ds = (real_T*)rtDW.StateSpace_PWORK.DS;\r\n\r\n      {\r\n        int_T i1;\r\n        real_T *y0 = &rtDW.StateSpace_o1[0];\r\n        for (i1=0; i1 < 8; i1++) {\r\n          accum = 0.0;\r\n\r\n          {\r\n            int_T i2;\r\n            const real_T *u0;\r\n            for (i2=0; i2 < 6; i2++) {\r\n              accum += *(Ds++) * 0.0;\r\n            }\r\n\r\n            accum += *(Ds++) * rtDW.ib[2];\r\n            accum += *(Ds++) * rtDW.ib[3];\r\n            accum += *(Ds++) * 500.0;\r\n          }\r\n\r\n          y0[i1] = accum;\r\n        }\r\n      }\r\n    }\r\n\r\n    /* Output new switches states */\r\n    {\r\n      int_T i1;\r\n      real_T *y1 = &rtDW.StateSpace_o2[0];\r\n      for (i1=0; i1 < 6; i1++) {\r\n        y1[i1] = (real_T)switch_status[i1];\r\n      }\r\n    }\r\n  }\r\n\r\n  /* Gain: '<S9>/1_Vb' */\r\n  rtb_u_Vb_idx_3 = 0.0055670221426890416 * rtDW.StateSpace_o1[7];\r\n\r\n  /* Outputs for Enabled SubSystem: '<S9>/Rotor reference frame' incorporates:\r\n   *  EnablePort: '<S20>/Enable'\r\n   */\r\n  if (rtDW.Rotorreferenceframe_MODE_p) {\r\n    /* Disable for Fcn: '<S20>/vqr' incorporates:\r\n     *  Outport: '<S20>/vqr,vdr'\r\n     */\r\n    rtDW.vqr_j = 0.0;\r\n\r\n    /* Disable for Fcn: '<S20>/vdr' incorporates:\r\n     *  Outport: '<S20>/vqr,vdr'\r\n     */\r\n    rtDW.vdr_l = 0.0;\r\n\r\n    /* Disable for Fcn: '<S20>/vqs' incorporates:\r\n     *  Outport: '<S20>/vqs,vds'\r\n     */\r\n    rtDW.vqs_l = 0.0;\r\n\r\n    /* Disable for Fcn: '<S20>/vds' incorporates:\r\n     *  Outport: '<S20>/vqs,vds'\r\n     */\r\n    rtDW.vds_f = 0.0;\r\n    rtDW.Rotorreferenceframe_MODE_p = false;\r\n  }\r\n\r\n  /* End of Outputs for SubSystem: '<S9>/Rotor reference frame' */\r\n\r\n  /* Outputs for Enabled SubSystem: '<S9>/Stationary reference frame' incorporates:\r\n   *  EnablePort: '<S21>/Enable'\r\n   */\r\n  /* Fcn: '<S21>/vdr' incorporates:\r\n   *  MultiPortSwitch: '<S11>/Multiport Switch'\r\n   */\r\n  vdr_p = ((-TrigonometricFunction_o1 - 1.7320508075688772 *\r\n            TrigonometricFunction_o2) * 0.0 + -2.0 * TrigonometricFunction_o1 *\r\n           0.0) * 0.33333333333333331;\r\n\r\n  /* Fcn: '<S21>/vds' */\r\n  vds_i = -0.57735026918962573 * rtb_u_Vb_idx_3;\r\n\r\n  /* Fcn: '<S21>/vqr' incorporates:\r\n   *  MultiPortSwitch: '<S11>/Multiport Switch'\r\n   */\r\n  TrigonometricFunction_o1 = ((TrigonometricFunction_o2 - 1.7320508075688772 *\r\n    TrigonometricFunction_o1) * 0.0 + 2.0 * TrigonometricFunction_o2 * 0.0) *\r\n    0.33333333333333331;\r\n\r\n  /* Fcn: '<S21>/vqs' incorporates:\r\n   *  Gain: '<S9>/1_Vb'\r\n   */\r\n  rtb_u_Vb_idx_3 = (0.0055670221426890416 * rtDW.StateSpace_o1[6] * 2.0 +\r\n                    rtb_u_Vb_idx_3) * 0.33333333333333331;\r\n\r\n  /* End of Outputs for SubSystem: '<S9>/Stationary reference frame' */\r\n\r\n  /* Outputs for Enabled SubSystem: '<S9>/Synchronous reference frame' incorporates:\r\n   *  EnablePort: '<S22>/Enable'\r\n   */\r\n  if (rtDW.Synchronousreferenceframe_MOD_e) {\r\n    /* Disable for Fcn: '<S22>/vqr' incorporates:\r\n     *  Outport: '<S22>/vqr,vdr'\r\n     */\r\n    rtDW.vqr = 0.0;\r\n\r\n    /* Disable for Fcn: '<S22>/vdr' incorporates:\r\n     *  Outport: '<S22>/vqr,vdr'\r\n     */\r\n    rtDW.vdr = 0.0;\r\n\r\n    /* Disable for Fcn: '<S22>/vqs' incorporates:\r\n     *  Outport: '<S22>/vqs,vds'\r\n     */\r\n    rtDW.vqs = 0.0;\r\n\r\n    /* Disable for Fcn: '<S22>/vds' incorporates:\r\n     *  Outport: '<S22>/vqs,vds'\r\n     */\r\n    rtDW.vds = 0.0;\r\n    rtDW.Synchronousreferenceframe_MOD_e = false;\r\n  }\r\n\r\n  /* End of Outputs for SubSystem: '<S9>/Synchronous reference frame' */\r\n\r\n  /* Outputs for Enabled SubSystem: '<S10>/Stationary reference frame' incorporates:\r\n   *  EnablePort: '<S25>/Enable'\r\n   */\r\n  /* Outport: '<Root>/ia' incorporates:\r\n   *  Fcn: '<S25>/isa'\r\n   *  Gain: '<S5>/unit conversion'\r\n   */\r\n  rtY.ia = 13.731987951966302 * rtb_Sum2[0];\r\n\r\n  /* End of Outputs for SubSystem: '<S10>/Stationary reference frame' */\r\n\r\n  /* Outport: '<Root>/ib' incorporates:\r\n   *  Gain: '<S5>/unit conversion'\r\n   *  MultiPortSwitch: '<S10>/Multiport Switch1'\r\n   */\r\n  rtY.ib = 13.731987951966302 * isb_f;\r\n\r\n  /* Outputs for Enabled SubSystem: '<S10>/Stationary reference frame' incorporates:\r\n   *  EnablePort: '<S25>/Enable'\r\n   */\r\n  /* Outport: '<Root>/ic' incorporates:\r\n   *  Fcn: '<S25>/isa'\r\n   *  Gain: '<S5>/unit conversion'\r\n   *  MultiPortSwitch: '<S10>/Multiport Switch1'\r\n   *  Sum: '<S10>/Sum3'\r\n   */\r\n  rtY.ic = ((0.0 - rtb_Sum2[0]) - isb_f) * 13.731987951966302;\r\n\r\n  /* End of Outputs for SubSystem: '<S10>/Stationary reference frame' */\r\n\r\n  /* Outport: '<Root>/vd' incorporates:\r\n   *  Gain: '<S5>/unit conversion'\r\n   *  UnitDelay: '<S15>/fluxes'\r\n   */\r\n  rtY.vd = 0.57177765423802906 * rtDW.fluxes_DSTATE[3];\r\n\r\n  /* Outport: '<Root>/vq' incorporates:\r\n   *  Gain: '<S5>/unit conversion'\r\n   *  UnitDelay: '<S15>/fluxes'\r\n   */\r\n  rtY.vq = 0.57177765423802906 * rtDW.fluxes_DSTATE[2];\r\n\r\n  /* Switch: '<S15>/IC' incorporates:\r\n   *  DigitalClock: '<S15>/Digital Clock'\r\n   *  Gain: '<S19>/wbase*Ts//2 '\r\n   *  Product: '<S15>/Product1'\r\n   *  Product: '<S15>/Product2'\r\n   *  Sum: '<S15>/Ad*x(k-1) + Bd*( u(k-1) + u(k))'\r\n   *  UnitDelay: '<S15>/fluxes'\r\n   */\r\n  if ((((rtM->Timing.clockTick0+rtM->Timing.clockTickH0* 4294967296.0)) * 1.0E-5)\r\n      >= 1.0E-5) {\r\n    for (i = 0; i <= 14; i += 2) {\r\n      tmp_4 = _mm_loadu_pd(&W43wr[i]);\r\n      tmp_4 = _mm_mul_pd(_mm_sub_pd(_mm_sub_pd(_mm_set1_pd(0.0), tmp_4),\r\n        _mm_loadu_pd(&rtConstP.Constant4_Value[i])), _mm_set1_pd\r\n                         (0.0015707963267948967));\r\n      tmp_5 = _mm_loadu_pd(&rtConstP.u5_Value_l[i]);\r\n      _mm_storeu_pd(&rtb_Sum5[i], _mm_add_pd(tmp_5, tmp_4));\r\n      _mm_storeu_pd(&rtb_Lminrows24col24_0[i], _mm_sub_pd(tmp_5, tmp_4));\r\n    }\r\n\r\n    /* Product: '<S19>/inversion' incorporates:\r\n     *  Assignment: '<S29>/W(4,3)=wr'\r\n     *  Constant: '<S19>/u5'\r\n     *  Constant: '<S8>/Constant4'\r\n     *  Gain: '<S19>/wbase*Ts//2'\r\n     *  Gain: '<S19>/wbase*Ts//2 '\r\n     *  MultiPortSwitch: '<S11>/Multiport Switch1'\r\n     *  Sum: '<S19>/Sum1'\r\n     *  Sum: '<S19>/Sum5'\r\n     *  Sum: '<S8>/Sum1'\r\n     *  Switch: '<S8>/Switch1'\r\n     */\r\n    rt_invd4x4_snf(rtb_Lminrows24col24_0, W43wr);\r\n\r\n    /* Product: '<S19>/Product4' incorporates:\r\n     *  Gain: '<S19>/wbase*Ts//2 '\r\n     *  Sum: '<S19>/Sum5'\r\n     */\r\n    for (i = 0; i < 4; i++) {\r\n      rtb_Sum5_tmp = i << 2;\r\n      isb_f = rtb_Sum5[rtb_Sum5_tmp + 1];\r\n      TrigonometricFunction_o2 = rtb_Sum5[rtb_Sum5_tmp];\r\n      fluxes_DSTATE = rtb_Sum5[rtb_Sum5_tmp + 2];\r\n      fluxes_DSTATE_0 = rtb_Sum5[rtb_Sum5_tmp + 3];\r\n      for (i_0 = 0; i_0 <= 2; i_0 += 2) {\r\n        tmp_4 = _mm_loadu_pd(&W43wr[i_0 + 4]);\r\n        tmp_5 = _mm_loadu_pd(&W43wr[i_0]);\r\n        tmp_6 = _mm_loadu_pd(&W43wr[i_0 + 8]);\r\n        tmp_7 = _mm_loadu_pd(&W43wr[i_0 + 12]);\r\n        _mm_storeu_pd(&rtb_Lminrows24col24_0[i_0 + rtb_Sum5_tmp], _mm_add_pd\r\n                      (_mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_set1_pd(isb_f),\r\n          tmp_4), _mm_mul_pd(_mm_set1_pd(TrigonometricFunction_o2), tmp_5)),\r\n          _mm_mul_pd(_mm_set1_pd(fluxes_DSTATE), tmp_6)), _mm_mul_pd(_mm_set1_pd\r\n          (fluxes_DSTATE_0), tmp_7)));\r\n      }\r\n    }\r\n\r\n    /* End of Product: '<S19>/Product4' */\r\n\r\n    /* Sum: '<S15>/sum' incorporates:\r\n     *  MultiPortSwitch: '<S9>/Multiport Switch'\r\n     *  MultiPortSwitch: '<S9>/Multiport Switch1'\r\n     *  UnitDelay: '<S15>/voltages'\r\n     */\r\n    rtb_MultiportSwitch1_idx_0 = rtb_u_Vb_idx_3 + rtDW.voltages_DSTATE[0];\r\n    rtb_MultiportSwitch1_idx_2 = TrigonometricFunction_o1 +\r\n      rtDW.voltages_DSTATE[2];\r\n    rtb_MultiportSwitch1_idx_1 = vds_i + rtDW.voltages_DSTATE[1];\r\n    rtb_MultiportSwitch1_idx_3 = vdr_p + rtDW.voltages_DSTATE[3];\r\n\r\n    /* UnitDelay: '<S15>/fluxes' incorporates:\r\n     *  Product: '<S15>/Product2'\r\n     */\r\n    isb_f = rtDW.fluxes_DSTATE[1];\r\n    TrigonometricFunction_o2 = rtDW.fluxes_DSTATE[0];\r\n    fluxes_DSTATE = rtDW.fluxes_DSTATE[2];\r\n    fluxes_DSTATE_0 = rtDW.fluxes_DSTATE[3];\r\n    for (i = 0; i <= 2; i += 2) {\r\n      tmp_4 = _mm_loadu_pd(&W43wr[i + 4]);\r\n      tmp_5 = _mm_set1_pd(0.0015707963267948967);\r\n      tmp_6 = _mm_loadu_pd(&W43wr[i]);\r\n      tmp_7 = _mm_loadu_pd(&W43wr[i + 8]);\r\n      tmp = _mm_loadu_pd(&W43wr[i + 12]);\r\n      tmp_0 = _mm_loadu_pd(&rtb_Lminrows24col24_0[i + 4]);\r\n      tmp_1 = _mm_loadu_pd(&rtb_Lminrows24col24_0[i]);\r\n      tmp_2 = _mm_loadu_pd(&rtb_Lminrows24col24_0[i + 8]);\r\n      tmp_3 = _mm_loadu_pd(&rtb_Lminrows24col24_0[i + 12]);\r\n      _mm_storeu_pd(&rtb_MultiportSwitch[i], _mm_add_pd(_mm_add_pd(_mm_add_pd\r\n        (_mm_add_pd(_mm_mul_pd(_mm_mul_pd(tmp_4, tmp_5), _mm_set1_pd\r\n        (rtb_MultiportSwitch1_idx_1)), _mm_mul_pd(_mm_mul_pd(tmp_5, tmp_6),\r\n        _mm_set1_pd(rtb_MultiportSwitch1_idx_0))), _mm_mul_pd(_mm_mul_pd(tmp_7,\r\n        tmp_5), _mm_set1_pd(rtb_MultiportSwitch1_idx_2))), _mm_mul_pd(_mm_mul_pd\r\n        (tmp, tmp_5), _mm_set1_pd(rtb_MultiportSwitch1_idx_3))), _mm_add_pd\r\n        (_mm_add_pd(_mm_add_pd(_mm_mul_pd(tmp_0, _mm_set1_pd(isb_f)), _mm_mul_pd\r\n        (tmp_1, _mm_set1_pd(TrigonometricFunction_o2))), _mm_mul_pd(tmp_2,\r\n        _mm_set1_pd(fluxes_DSTATE))), _mm_mul_pd(tmp_3, _mm_set1_pd\r\n        (fluxes_DSTATE_0)))));\r\n    }\r\n  } else {\r\n    rtb_MultiportSwitch[0] = rtDW.fluxes_DSTATE[0];\r\n    rtb_MultiportSwitch[1] = rtDW.fluxes_DSTATE[1];\r\n    rtb_MultiportSwitch[2] = rtDW.fluxes_DSTATE[2];\r\n    rtb_MultiportSwitch[3] = rtDW.fluxes_DSTATE[3];\r\n  }\r\n\r\n  /* End of Switch: '<S15>/IC' */\r\n\r\n  /* Outport: '<Root>/wm' incorporates:\r\n   *  Gain: '<S7>/1\\p1'\r\n   */\r\n  rtY.wm = 157.07963267948966 * rtb_phimd;\r\n\r\n  /* Gain: '<S7>/1_2H' incorporates:\r\n   *  Gain: '<S12>/1-1'\r\n   *  Gain: '<S7>/F'\r\n   *  Gain: '<S7>/Unit conversion'\r\n   *  Inport: '<Root>/Tm'\r\n   *  Product: '<S12>/Mult1'\r\n   *  Sum: '<S12>/Sum2'\r\n   *  Sum: '<S7>/Sum'\r\n   *  UnitDelay: '<S15>/fluxes'\r\n   */\r\n  isb_f = (((rtb_Sum2[0] * rtDW.fluxes_DSTATE[1] + rtDW.fluxes_DSTATE[0] *\r\n             -rtb_Sum2[1]) - 0.042453954778240446 * rtU.Tm) - 0.0 * rtb_phimd) *\r\n    5.9506091980420592;\r\n\r\n  /* DiscreteIntegrator: '<S7>/Rotor speed(wm)' */\r\n  if (rtDW.Rotorspeedwm_SYSTEM_ENABLE != 0) {\r\n    /* DiscreteIntegrator: '<S7>/Rotor speed(wm)' */\r\n    TrigonometricFunction_o2 = rtDW.Rotorspeedwm_DSTATE;\r\n  } else {\r\n    /* DiscreteIntegrator: '<S7>/Rotor speed(wm)' */\r\n    TrigonometricFunction_o2 = 5.0E-6 * isb_f + rtDW.Rotorspeedwm_DSTATE;\r\n  }\r\n\r\n  /* End of DiscreteIntegrator: '<S7>/Rotor speed(wm)' */\r\n\r\n  /* Update for UnitDelay: '<S15>/fluxes' */\r\n  rtDW.fluxes_DSTATE[0] = rtb_MultiportSwitch[0];\r\n  rtDW.fluxes_DSTATE[1] = rtb_MultiportSwitch[1];\r\n  rtDW.fluxes_DSTATE[2] = rtb_MultiportSwitch[2];\r\n  rtDW.fluxes_DSTATE[3] = rtb_MultiportSwitch[3];\r\n\r\n  /* Update for DiscreteIntegrator: '<S7>/Rotor angle thetam' incorporates:\r\n   *  Gain: '<S7>/web_psb'\r\n   */\r\n  rtDW.Rotoranglethetam_DSTATE += 314.15926535897933 * rtb_phimd * 1.0E-5;\r\n\r\n  /* Update for UnitDelay: '<S30>/wm_delay' */\r\n  rtDW.wm_delay_DSTATE = TrigonometricFunction_o2;\r\n\r\n  /* Update for UnitDelay: '<S30>/wm_predict' */\r\n  rtDW.wm_predict_DSTATE = rtb_Phisat;\r\n\r\n  /* Update for S-Function (sfun_spssw_discc): '<S34>/State-Space' incorporates:\r\n   *  Constant: '<S31>/DC'\r\n   *  Inport: '<Root>/gate'\r\n   */\r\n  {\r\n    int_T *gState = (int_T*)rtDW.StateSpace_PWORK.G_STATE;\r\n\r\n    /* Store switch gates values for next step */\r\n    {\r\n      int_T i1;\r\n      const real_T *u1 = &rtU.gate[0];\r\n      for (i1=0; i1 < 6; i1++) {\r\n        *(gState++) = (int_T) u1[i1];\r\n      }\r\n    }\r\n  }\r\n\r\n  /* Update for UnitDelay: '<S15>/voltages' incorporates:\r\n   *  MultiPortSwitch: '<S9>/Multiport Switch'\r\n   *  MultiPortSwitch: '<S9>/Multiport Switch1'\r\n   */\r\n  rtDW.voltages_DSTATE[0] = rtb_u_Vb_idx_3;\r\n  rtDW.voltages_DSTATE[2] = TrigonometricFunction_o1;\r\n  rtDW.voltages_DSTATE[1] = vds_i;\r\n  rtDW.voltages_DSTATE[3] = vdr_p;\r\n\r\n  /* Update for DiscreteIntegrator: '<S7>/Rotor speed(wm)' */\r\n  rtDW.Rotorspeedwm_SYSTEM_ENABLE = 0U;\r\n  rtDW.Rotorspeedwm_DSTATE = 5.0E-6 * isb_f + TrigonometricFunction_o2;\r\n\r\n  /* Update absolute time for base rate */\r\n  /* The \"clockTick0\" counts the number of times the code of this task has\r\n   * been executed. The resolution of this integer timer is 1.0E-5, which is the step size\r\n   * of the task. Size of \"clockTick0\" ensures timer will not overflow during the\r\n   * application lifespan selected.\r\n   * Timer of this task consists of two 32 bit unsigned integers.\r\n   * The two integers represent the low bits Timing.clockTick0 and the high bits\r\n   * Timing.clockTickH0. When the low bit overflows to 0, the high bits increment.\r\n   */\r\n  rtM->Timing.clockTick0++;\r\n  if (!rtM->Timing.clockTick0) {\r\n    rtM->Timing.clockTickH0++;\r\n  }\r\n}\r\n\r\n/* Model initialize function */\r\nvoid motor_initialize(void)\r\n{\r\n  /* Registration code */\r\n\r\n  /* initialize non-finites */\r\n  rt_InitInfAndNaN(sizeof(real_T));\r\n\r\n  /* Start for S-Function (sfun_spssw_discc): '<S34>/State-Space' incorporates:\r\n   *  Constant: '<S31>/DC'\r\n   *  Inport: '<Root>/gate'\r\n   */\r\n\r\n  /* S-Function block: <S34>/State-Space */\r\n  {\r\n    rtDW.StateSpace_PWORK.DS = (real_T*)calloc(8 * 9, sizeof(real_T));\r\n    rtDW.StateSpace_PWORK.DX_COL = (real_T*)calloc(8, sizeof(real_T));\r\n    rtDW.StateSpace_PWORK.TMP2 = (real_T*)calloc(9, sizeof(real_T));\r\n    rtDW.StateSpace_PWORK.SWITCH_STATUS = (int_T*)calloc(6, sizeof(int_T));\r\n    rtDW.StateSpace_PWORK.SW_CHG = (int_T*)calloc(6, sizeof(int_T));\r\n    rtDW.StateSpace_PWORK.G_STATE = (int_T*)calloc(6, sizeof(int_T));\r\n    rtDW.StateSpace_PWORK.Y_SWITCH = (real_T*)calloc(6, sizeof(real_T));\r\n    rtDW.StateSpace_PWORK.SWITCH_TYPES = (int_T*)calloc(6, sizeof(int_T));\r\n    rtDW.StateSpace_PWORK.IDX_OUT_SW = (int_T*)calloc(6, sizeof(int_T));\r\n    rtDW.StateSpace_PWORK.SWITCH_STATUS_INIT = (int_T*)calloc(6, sizeof(int_T));\r\n    rtDW.StateSpace_PWORK.USWLAST = (real_T*)calloc(6, sizeof(real_T));\r\n  }\r\n\r\n  /* InitializeConditions for S-Function (sfun_spssw_discc): '<S34>/State-Space' incorporates:\r\n   *  Constant: '<S31>/DC'\r\n   *  Inport: '<Root>/gate'\r\n   */\r\n  {\r\n    int32_T i, j;\r\n    real_T *Ds = (real_T*)rtDW.StateSpace_PWORK.DS;\r\n\r\n    /* Copy and transpose D */\r\n    for (i=0; i<8; i++) {\r\n      for (j=0; j<9; j++)\r\n        Ds[i*9 + j] = (rtConstP.StateSpace_DS_param[i + j*8]);\r\n    }\r\n\r\n    {\r\n      /* Switches work vectors */\r\n      int_T *switch_status = (int_T*) rtDW.StateSpace_PWORK.SWITCH_STATUS;\r\n      int_T *gState = (int_T*)rtDW.StateSpace_PWORK.G_STATE;\r\n      real_T *yswitch = (real_T*)rtDW.StateSpace_PWORK.Y_SWITCH;\r\n      int_T *switchTypes = (int_T*)rtDW.StateSpace_PWORK.SWITCH_TYPES;\r\n      int_T *idxOutSw = (int_T*)rtDW.StateSpace_PWORK.IDX_OUT_SW;\r\n      int_T *switch_status_init = (int_T*)\r\n        rtDW.StateSpace_PWORK.SWITCH_STATUS_INIT;\r\n\r\n      /* Initialize work vectors */\r\n      switch_status[0] = 0;\r\n      switch_status_init[0] = 0;\r\n      gState[0] = (int_T) 0.0;\r\n      yswitch[0] = 1/0.001;\r\n      switchTypes[0] = (int_T)7.0;\r\n      idxOutSw[0] = ((int_T)0.0) - 1;\r\n      switch_status[1] = 0;\r\n      switch_status_init[1] = 0;\r\n      gState[1] = (int_T) 0.0;\r\n      yswitch[1] = 1/0.001;\r\n      switchTypes[1] = (int_T)7.0;\r\n      idxOutSw[1] = ((int_T)0.0) - 1;\r\n      switch_status[2] = 0;\r\n      switch_status_init[2] = 0;\r\n      gState[2] = (int_T) 0.0;\r\n      yswitch[2] = 1/0.001;\r\n      switchTypes[2] = (int_T)7.0;\r\n      idxOutSw[2] = ((int_T)0.0) - 1;\r\n      switch_status[3] = 0;\r\n      switch_status_init[3] = 0;\r\n      gState[3] = (int_T) 0.0;\r\n      yswitch[3] = 1/0.001;\r\n      switchTypes[3] = (int_T)7.0;\r\n      idxOutSw[3] = ((int_T)0.0) - 1;\r\n      switch_status[4] = 0;\r\n      switch_status_init[4] = 0;\r\n      gState[4] = (int_T) 0.0;\r\n      yswitch[4] = 1/0.001;\r\n      switchTypes[4] = (int_T)7.0;\r\n      idxOutSw[4] = ((int_T)0.0) - 1;\r\n      switch_status[5] = 0;\r\n      switch_status_init[5] = 0;\r\n      gState[5] = (int_T) 0.0;\r\n      yswitch[5] = 1/0.001;\r\n      switchTypes[5] = (int_T)7.0;\r\n      idxOutSw[5] = ((int_T)0.0) - 1;\r\n    }\r\n  }\r\n\r\n  /* Enable for DiscreteIntegrator: '<S7>/Rotor speed(wm)' */\r\n  rtDW.Rotorspeedwm_SYSTEM_ENABLE = 1U;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"motor.h","type":"header","group":"model","path":"C:\\Users\\tql\\OneDrive\\文档\\中期答辩\\伺服电机\\异步电机\\拆分版\\motor_ert_rtw","tag":"","groupDisplay":"模型文件","code":"/*\r\n * File: motor.h\r\n *\r\n * Code generated for Simulink model 'motor'.\r\n *\r\n * Model version                  : 1.0\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Thu Oct 10 15:56:04 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Linux 64)\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_motor_h_\r\n#define RTW_HEADER_motor_h_\r\n#ifndef motor_COMMON_INCLUDES_\r\n#define motor_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* motor_COMMON_INCLUDES_ */\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM RT_MODEL;\r\n\r\n/* Block signals and states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  real_T ib[4];                        /* '<S10>/ib' */\r\n  real_T StateSpace_o1[8];             /* '<S34>/State-Space' */\r\n  real_T StateSpace_o2[6];             /* '<S34>/State-Space' */\r\n  real_T W21wr[16];                    /* '<S28>/W(2,1)=-wr' */\r\n  real_T Constant_e[2];                /* '<S28>/Constant' */\r\n  real_T fluxes_DSTATE[4];             /* '<S15>/fluxes' */\r\n  real_T fluxes_DSTATE_l[4];           /* '<S13>/fluxes' */\r\n  real_T voltages_DSTATE[4];           /* '<S15>/voltages' */\r\n  real_T inversion_DWORK4[16];         /* '<S19>/inversion' */\r\n  real_T inversion_DWORK4_k[16];       /* '<S14>/inversion' */\r\n  real_T TrigonometricFunction_o1_d;   /* '<S28>/Trigonometric Function' */\r\n  real_T TrigonometricFunction_o2_j;   /* '<S28>/Trigonometric Function' */\r\n  real_T ira;                          /* '<S26>/ira' */\r\n  real_T irb;                          /* '<S26>/irb' */\r\n  real_T isa;                          /* '<S26>/isa' */\r\n  real_T isb;                          /* '<S26>/isb' */\r\n  real_T ira_p;                        /* '<S24>/ira' */\r\n  real_T irb_n;                        /* '<S24>/irb' */\r\n  real_T isa_m;                        /* '<S24>/isa' */\r\n  real_T isb_p;                        /* '<S24>/isb' */\r\n  real_T vdr;                          /* '<S22>/vdr' */\r\n  real_T vds;                          /* '<S22>/vds' */\r\n  real_T vqr;                          /* '<S22>/vqr' */\r\n  real_T vqs;                          /* '<S22>/vqs' */\r\n  real_T vdr_l;                        /* '<S20>/vdr' */\r\n  real_T vds_f;                        /* '<S20>/vds' */\r\n  real_T vqr_j;                        /* '<S20>/vqr' */\r\n  real_T vqs_l;                        /* '<S20>/vqs' */\r\n  real_T Rotoranglethetam_DSTATE;      /* '<S7>/Rotor angle thetam' */\r\n  real_T wm_delay_DSTATE;              /* '<S30>/wm_delay' */\r\n  real_T wm_predict_DSTATE;            /* '<S30>/wm_predict' */\r\n  real_T Rotorspeedwm_DSTATE;          /* '<S7>/Rotor speed(wm)' */\r\n  struct {\r\n    void *AS;\r\n    void *BS;\r\n    void *CS;\r\n    void *DS;\r\n    void *DX_COL;\r\n    void *BD_COL;\r\n    void *TMP1;\r\n    void *TMP2;\r\n    void *XTMP;\r\n    void *SWITCH_STATUS;\r\n    void *SWITCH_STATUS_INIT;\r\n    void *SW_CHG;\r\n    void *G_STATE;\r\n    void *USWLAST;\r\n    void *XKM12;\r\n    void *XKP12;\r\n    void *XLAST;\r\n    void *ULAST;\r\n    void *IDX_SW_CHG;\r\n    void *Y_SWITCH;\r\n    void *SWITCH_TYPES;\r\n    void *IDX_OUT_SW;\r\n    void *SWITCH_TOPO_SAVED_IDX;\r\n    void *SWITCH_MAP;\r\n  } StateSpace_PWORK;                  /* '<S34>/State-Space' */\r\n\r\n  int_T StateSpace_IWORK[11];          /* '<S34>/State-Space' */\r\n  uint8_T Rotorspeedwm_SYSTEM_ENABLE;  /* '<S7>/Rotor speed(wm)' */\r\n  boolean_T sinthrcosthr_MODE;         /* '<S11>/sin(thr),cos(thr)' */\r\n  boolean_T Synchronousreferenceframe_MODE;/* '<S10>/Synchronous reference frame' */\r\n  boolean_T Rotorreferenceframe_MODE;  /* '<S10>/Rotor reference frame' */\r\n  boolean_T Synchronousreferenceframe_MOD_e;/* '<S9>/Synchronous reference frame' */\r\n  boolean_T Rotorreferenceframe_MODE_p;/* '<S9>/Rotor reference frame' */\r\n} DW;\r\n\r\n/* Constant parameters (default storage) */\r\ntypedef struct {\r\n  /* Expression: SM.Linv\r\n   * Referenced by: '<S8>/Constant2'\r\n   */\r\n  real_T Constant2_Value[16];\r\n\r\n  /* Expression: SM.RLinv\r\n   * Referenced by: '<S8>/Constant4'\r\n   */\r\n  real_T Constant4_Value[16];\r\n\r\n  /* Expression: eye(4,4)\r\n   * Referenced by: '<S19>/u5'\r\n   */\r\n  real_T u5_Value_l[16];\r\n\r\n  /* Expression: S.D\r\n   * Referenced by: '<S34>/State-Space'\r\n   */\r\n  real_T StateSpace_DS_param[72];\r\n} ConstP;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\ntypedef struct {\r\n  real_T Tm;                           /* '<Root>/Tm' */\r\n  real_T gate[6];                      /* '<Root>/gate' */\r\n} ExtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  real_T ia;                           /* '<Root>/ia' */\r\n  real_T ib;                           /* '<Root>/ib' */\r\n  real_T ic;                           /* '<Root>/ic' */\r\n  real_T vd;                           /* '<Root>/vd' */\r\n  real_T vq;                           /* '<Root>/vq' */\r\n  real_T wm;                           /* '<Root>/wm' */\r\n} ExtY;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM {\r\n  const char_T * volatile errorStatus;\r\n\r\n  /*\r\n   * Timing:\r\n   * The following substructure contains information regarding\r\n   * the timing information for the model.\r\n   */\r\n  struct {\r\n    uint32_T clockTick0;\r\n    uint32_T clockTickH0;\r\n  } Timing;\r\n};\r\n\r\n/* Block signals and states (default storage) */\r\nextern DW rtDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nextern ExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY rtY;\r\n\r\n/* External data declarations for dependent source files */\r\nextern const real_T motor_RGND;        /* real_T ground */\r\n\r\n/* Constant parameters (default storage) */\r\nextern const ConstP rtConstP;\r\n\r\n/* Model entry point functions */\r\nextern void motor_initialize(void);\r\nextern void motor_step(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL *const rtM;\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<S32>/0 4' : Unused code path elimination\r\n * Block '<S32>/1//Ron' : Unused code path elimination\r\n * Block '<S32>/Saturation' : Unused code path elimination\r\n * Block '<S32>/Switch' : Unused code path elimination\r\n * Block '<S32>/Unit Delay' : Unused code path elimination\r\n * Block '<S33>/Switch' : Unused code path elimination\r\n * Block '<S33>/Vf Devices & Clamping Diodes' : Unused code path elimination\r\n * Block '<S33>/Vf Diodes' : Unused code path elimination\r\n * Block '<S5>/Gain Vr_Vs' : Eliminated nontunable gain of 1\r\n * Block '<S5>/Gain Vr_Vs1' : Eliminated nontunable gain of 1\r\n * Block '<S32>/Data Type Conversion' : Eliminate redundant data type conversion\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'motor'\r\n * '<S1>'   : 'motor/Asynchronous Machine SI Units'\r\n * '<S2>'   : 'motor/DC Voltage Source2'\r\n * '<S3>'   : 'motor/Universal Bridge1'\r\n * '<S4>'   : 'motor/powergui'\r\n * '<S5>'   : 'motor/Asynchronous Machine SI Units/Electrical model'\r\n * '<S6>'   : 'motor/Asynchronous Machine SI Units/Measurements'\r\n * '<S7>'   : 'motor/Asynchronous Machine SI Units/Mechanical model'\r\n * '<S8>'   : 'motor/Asynchronous Machine SI Units/Electrical model/Asynchronous Machine State-space model'\r\n * '<S9>'   : 'motor/Asynchronous Machine SI Units/Electrical model/abc to dq  transformation'\r\n * '<S10>'  : 'motor/Asynchronous Machine SI Units/Electrical model/dq to abc transformation'\r\n * '<S11>'  : 'motor/Asynchronous Machine SI Units/Electrical model/sin,cos'\r\n * '<S12>'  : 'motor/Asynchronous Machine SI Units/Electrical model/Asynchronous Machine State-space model/Electromagnetic Torque'\r\n * '<S13>'  : 'motor/Asynchronous Machine SI Units/Electrical model/Asynchronous Machine State-space model/Flux Prediction'\r\n * '<S14>'  : 'motor/Asynchronous Machine SI Units/Electrical model/Asynchronous Machine State-space model/Saturation'\r\n * '<S15>'  : 'motor/Asynchronous Machine SI Units/Electrical model/Asynchronous Machine State-space model/phiqd_SR'\r\n * '<S16>'  : 'motor/Asynchronous Machine SI Units/Electrical model/Asynchronous Machine State-space model/Saturation/Laq=Lad'\r\n * '<S17>'  : 'motor/Asynchronous Machine SI Units/Electrical model/Asynchronous Machine State-space model/Saturation/Matrix L'\r\n * '<S18>'  : 'motor/Asynchronous Machine SI Units/Electrical model/Asynchronous Machine State-space model/Saturation/phimqd'\r\n * '<S19>'  : 'motor/Asynchronous Machine SI Units/Electrical model/Asynchronous Machine State-space model/phiqd_SR/Subsystem'\r\n * '<S20>'  : 'motor/Asynchronous Machine SI Units/Electrical model/abc to dq  transformation/Rotor reference frame'\r\n * '<S21>'  : 'motor/Asynchronous Machine SI Units/Electrical model/abc to dq  transformation/Stationary reference frame'\r\n * '<S22>'  : 'motor/Asynchronous Machine SI Units/Electrical model/abc to dq  transformation/Synchronous reference frame'\r\n * '<S23>'  : 'motor/Asynchronous Machine SI Units/Electrical model/abc to dq  transformation/transit'\r\n * '<S24>'  : 'motor/Asynchronous Machine SI Units/Electrical model/dq to abc transformation/Rotor reference frame'\r\n * '<S25>'  : 'motor/Asynchronous Machine SI Units/Electrical model/dq to abc transformation/Stationary reference frame'\r\n * '<S26>'  : 'motor/Asynchronous Machine SI Units/Electrical model/dq to abc transformation/Synchronous reference frame'\r\n * '<S27>'  : 'motor/Asynchronous Machine SI Units/Electrical model/sin,cos/sin(beta),cos(beta),sin(th),cos(th)'\r\n * '<S28>'  : 'motor/Asynchronous Machine SI Units/Electrical model/sin,cos/sin(thr),cos(thr)'\r\n * '<S29>'  : 'motor/Asynchronous Machine SI Units/Electrical model/sin,cos/sin(thr),cos(thr)1'\r\n * '<S30>'  : 'motor/Asynchronous Machine SI Units/Mechanical model/Delay Prediction'\r\n * '<S31>'  : 'motor/DC Voltage Source2/Model'\r\n * '<S32>'  : 'motor/Universal Bridge1/Model'\r\n * '<S33>'  : 'motor/Universal Bridge1/Model/Vf 1'\r\n * '<S34>'  : 'motor/powergui/EquivalentModel1'\r\n * '<S35>'  : 'motor/powergui/EquivalentModel1/Gates'\r\n * '<S36>'  : 'motor/powergui/EquivalentModel1/Sources'\r\n * '<S37>'  : 'motor/powergui/EquivalentModel1/Status'\r\n * '<S38>'  : 'motor/powergui/EquivalentModel1/Yout'\r\n */\r\n#endif                                 /* RTW_HEADER_motor_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"motor_data.c","type":"source","group":"data","path":"C:\\Users\\tql\\OneDrive\\文档\\中期答辩\\伺服电机\\异步电机\\拆分版\\motor_ert_rtw","tag":"","groupDisplay":"数据文件","code":"/*\r\n * File: motor_data.c\r\n *\r\n * Code generated for Simulink model 'motor'.\r\n *\r\n * Model version                  : 1.0\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Thu Oct 10 15:56:04 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Linux 64)\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"motor.h\"\r\n\r\n/* Constant parameters (default storage) */\r\nconst ConstP rtConstP = {\r\n  /* Expression: SM.Linv\r\n   * Referenced by: '<S8>/Constant2'\r\n   */\r\n  { 11.778689645591433, 0.0, -11.431106508699781, -0.0, 0.0, 11.778689645591433,\r\n    0.0, -11.431106508699781, -11.431106508699781, 0.0, 11.778689645591433, -0.0,\r\n    -0.0, -11.431106508699781, -0.0, 11.778689645591433 },\r\n\r\n  /* Expression: SM.RLinv\r\n   * Referenced by: '<S8>/Constant4'\r\n   */\r\n  { 0.26562892041659192, 0.0, -0.33119505489978723, 0.0, 0.0,\r\n    0.26562892041659192, 0.0, -0.33119505489978723, -0.25779034616210356, 0.0,\r\n    0.34126562995894349, 0.0, 0.0, -0.25779034616210356, 0.0,\r\n    0.34126562995894349 },\r\n\r\n  /* Expression: eye(4,4)\r\n   * Referenced by: '<S19>/u5'\r\n   */\r\n  { 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,\r\n    1.0 },\r\n\r\n  /* Expression: S.D\r\n   * Referenced by: '<S34>/State-Space'\r\n   */\r\n  { -50000.0, 50000.0, 0.0, 0.0, 0.0, 0.0, 50000.0, 0.0, 50000.0, -50000.0, 0.0,\r\n    0.0, 0.0, 0.0, -50000.0, 0.0, 0.0, 0.0, -50000.0, 50000.0, 0.0, 0.0,\r\n    -50000.0, 50000.0, 0.0, 0.0, 50000.0, -50000.0, 0.0, 0.0, 50000.0, -50000.0,\r\n    0.0, 0.0, 0.0, 0.0, -50000.0, 50000.0, 0.0, -50000.0, 0.0, 0.0, 0.0, 0.0,\r\n    50000.0, -50000.0, 0.0, 50000.0, 50000.0, -50000.0, 0.0, 0.0, -50000.0,\r\n    50000.0, -50000.0, -50000.0, 0.0, 0.0, 50000.0, -50000.0, -50000.0, 50000.0,\r\n    50000.0, -100000.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.0, 0.0 }\r\n};\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"C:\\Users\\tql\\OneDrive\\文档\\中期答辩\\伺服电机\\异步电机\\拆分版\\motor_ert_rtw","tag":"","groupDisplay":"实用工具文件","code":"/*\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'motor'.\r\n *\r\n * Model version                  : 1.0\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Thu Oct 10 15:56:04 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Linux 64)\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: Intel->x86-64 (Linux 64)\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  64    long long:  64\r\n *                       native word size:  64\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef long int64_T;\r\ntypedef unsigned long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807L))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807L-1L))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFUL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true}};