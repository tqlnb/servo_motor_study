var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"sumAll","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"C:\\Users\\tql\\OneDrive\\文档\\中期答辩\\伺服电机\\异步电机\\拆分版\\sumAll_ert_rtw","tag":"","groupDisplay":"主文件","code":"/*\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'sumAll'.\r\n *\r\n * Model version                  : 1.6\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Thu Oct 10 21:22:43 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Linux 64)\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"sumAll.h\"                    /* Model header file */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n  static boolean_T OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n\r\n  /* Check for overrun */\r\n  if (OverrunFlag) {\r\n    rtmSetErrorStatus(rtM, \"Overrun\");\r\n    return;\r\n  }\r\n\r\n  OverrunFlag = true;\r\n\r\n  /* Save FPU context here (if necessary) */\r\n  /* Re-enable timer or interrupt here */\r\n  /* Set model inputs here */\r\n\r\n  /* Step the model */\r\n  sumAll_step();\r\n\r\n  /* Get model outputs here */\r\n\r\n  /* Indicate task complete */\r\n  OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n  /* Restore FPU context here (if necessary) */\r\n  /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example main function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific. This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint_T main(int_T argc, const char *argv[])\r\n{\r\n  /* Unused arguments */\r\n  (void)(argc);\r\n  (void)(argv);\r\n\r\n  /* Initialize model */\r\n  sumAll_initialize();\r\n\r\n  /* Attach rt_OneStep to a timer or interrupt service routine with\r\n   * period 1.0E-5 seconds (base rate of the model) here.\r\n   * The call syntax for rt_OneStep is\r\n   *\r\n   *  rt_OneStep();\r\n   */\r\n  printf(\"Warning: The simulation will run forever. \"\r\n         \"Generated ERT main won't simulate model step behavior. \"\r\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\r\n  fflush((NULL));\r\n  while (rtmGetErrorStatus(rtM) == (NULL)) {\r\n    /*  Perform application tasks here */\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"sumAll.c","type":"source","group":"model","path":"C:\\Users\\tql\\OneDrive\\文档\\中期答辩\\伺服电机\\异步电机\\拆分版\\sumAll_ert_rtw","tag":"","groupDisplay":"模型文件","code":"/*\r\n * File: sumAll.c\r\n *\r\n * Code generated for Simulink model 'sumAll'.\r\n *\r\n * Model version                  : 1.6\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Thu Oct 10 21:22:43 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Linux 64)\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"sumAll.h\"\r\n#include \"rtwtypes.h\"\r\n#include <string.h>\r\n#include <emmintrin.h>\r\n#include <float.h>\r\n#include \"rt_look.h\"\r\n#include <stddef.h>\r\n#include <math.h>\r\n#include <stdlib.h>\r\n#define NumBitsPerChar                 8U\r\n#ifndef CodeFormat\r\n#define CodeFormat                     S-Function\r\n#else\r\n#undef CodeFormat\r\n#define CodeFormat                     S-Function\r\n#endif\r\n\r\n#ifndef S_FUNCTION_NAME\r\n#define S_FUNCTION_NAME                simulink_only_sfcn\r\n#else\r\n#undef S_FUNCTION_NAME\r\n#define S_FUNCTION_NAME                simulink_only_sfcn\r\n#endif\r\n\r\n#ifndef S_FUNCTION_LEVEL\r\n#define S_FUNCTION_LEVEL               2\r\n#else\r\n#undef S_FUNCTION_LEVEL\r\n#define S_FUNCTION_LEVEL               2\r\n#endif\r\n\r\n#ifndef RTW_GENERATED_S_FUNCTION\r\n#define RTW_GENERATED_S_FUNCTION\r\n#endif\r\n\r\n#ifndef rtmGetDataMapInfo\r\n# define rtmGetDataMapInfo(rtm)        NULL\r\n#endif\r\n\r\n#ifndef rtmSetDataMapInfo\r\n# define rtmSetDataMapInfo(rtm, val)\r\n#endif\r\n\r\n#if !defined(RTW_SFUNCTION_DEFINES)\r\n#define RTW_SFUNCTION_DEFINES\r\n#ifndef _RTW_COMMON_DEFINES_\r\n#define _RTW_COMMON_DEFINES_\r\n#endif\r\n#endif\r\n\r\nconst real_T sumAll_RGND = 0.0;        /* real_T ground */\r\n\r\n/* Block signals and states (default storage) */\r\nDW rtDW;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL rtM_;\r\nRT_MODEL *const rtM = &rtM_;\r\nextern void rt_invd4x4_snf(const real_T u[16], real_T y[16]);\r\nextern real_T rt_atan2d_snf(real_T u0, real_T u1);\r\nextern real_T rt_remd_snf(real_T u0, real_T u1);\r\nstatic void rate_scheduler(void);\r\nstatic real_T rtGetNaN(void);\r\nstatic real32_T rtGetNaNF(void);\r\n\r\n/*===========*\r\n * Constants *\r\n *===========*/\r\n#define RT_PI                          3.14159265358979323846\r\n#define RT_PIF                         3.1415927F\r\n#define RT_LN_10                       2.30258509299404568402\r\n#define RT_LN_10F                      2.3025851F\r\n#define RT_LOG10E                      0.43429448190325182765\r\n#define RT_LOG10EF                     0.43429449F\r\n#define RT_E                           2.7182818284590452354\r\n#define RT_EF                          2.7182817F\r\n\r\n/*\r\n * UNUSED_PARAMETER(x)\r\n *   Used to specify that a function parameter (argument) is required but not\r\n *   accessed by the function body.\r\n */\r\n#ifndef UNUSED_PARAMETER\r\n#if defined(__LCC__)\r\n#define UNUSED_PARAMETER(x)                                      /* do nothing */\r\n#else\r\n\r\n/*\r\n * This is the semi-ANSI standard way of indicating that an\r\n * unused function parameter is required.\r\n */\r\n#define UNUSED_PARAMETER(x)            (void) (x)\r\n#endif\r\n#endif\r\n\r\n#ifndef INTERP\r\n#define INTERP(x,x1,x2,y1,y2)          ( (y1)+(((y2) - (y1))/((x2) - (x1)))*((x)-(x1)) )\r\n#endif\r\n\r\n#ifndef ZEROTECHNIQUE\r\n#define ZEROTECHNIQUE\r\n\r\ntypedef enum {\r\n  NORMAL_INTERP,\r\n  AVERAGE_VALUE,\r\n  MIDDLE_VALUE\r\n} ZeroTechnique;\r\n\r\n#endif\r\n\r\nstatic int_T rt_GetLookupIndex(const real_T *x, int_T xlen, real_T u) ;\r\nstatic real_T rt_Lookup(const real_T *x, int_T xlen, real_T u, const real_T *y);\r\n\r\n#define NOT_USING_NONFINITE_LITERALS   1\r\n\r\nextern real_T rtInf;\r\nextern real_T rtMinusInf;\r\nextern real_T rtNaN;\r\nextern real32_T rtInfF;\r\nextern real32_T rtMinusInfF;\r\nextern real32_T rtNaNF;\r\nstatic void rt_InitInfAndNaN(size_t realSize);\r\nstatic boolean_T rtIsInf(real_T value);\r\nstatic boolean_T rtIsInfF(real32_T value);\r\nstatic boolean_T rtIsNaN(real_T value);\r\nstatic boolean_T rtIsNaNF(real32_T value);\r\ntypedef struct {\r\n  struct {\r\n    uint32_T wordH;\r\n    uint32_T wordL;\r\n  } words;\r\n} BigEndianIEEEDouble;\r\n\r\ntypedef struct {\r\n  struct {\r\n    uint32_T wordL;\r\n    uint32_T wordH;\r\n  } words;\r\n} LittleEndianIEEEDouble;\r\n\r\ntypedef struct {\r\n  union {\r\n    real32_T wordLreal;\r\n    uint32_T wordLuint;\r\n  } wordL;\r\n} IEEESingle;\r\n\r\nreal_T rtInf;\r\nreal_T rtMinusInf;\r\nreal_T rtNaN;\r\nreal32_T rtInfF;\r\nreal32_T rtMinusInfF;\r\nreal32_T rtNaNF;\r\nstatic real_T rtGetInf(void);\r\nstatic real32_T rtGetInfF(void);\r\nstatic real_T rtGetMinusInf(void);\r\nstatic real32_T rtGetMinusInfF(void);\r\n\r\n/*\r\n * Initialize rtNaN needed by the generated code.\r\n * NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real_T rtGetNaN(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T nan = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    nan = rtGetNaNF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0xFFF80000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    nan = tmpVal.fltVal;\r\n  }\r\n\r\n  return nan;\r\n}\r\n\r\n/*\r\n * Initialize rtNaNF needed by the generated code.\r\n * NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real32_T rtGetNaNF(void)\r\n{\r\n  IEEESingle nanF = { { 0.0F } };\r\n\r\n  nanF.wordL.wordLuint = 0xFFC00000U;\r\n  return nanF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * Routine to get the index of the input from a table using binary or\r\n * interpolation search.\r\n *\r\n * Inputs:\r\n * *x   : Pointer to table, x[0] ....x[xlen-1]\r\n * xlen : Number of values in xtable\r\n * u    : input value to look up\r\n *\r\n * Output:\r\n * idx  : the index into the table such that:\r\n * if u is negative\r\n * x[idx] <= u < x[idx+1]\r\n * else\r\n * x[idx] < u <= x[idx+1]\r\n *\r\n * Interpolation Search: If the table contains a large number of nearly\r\n * uniformly spaced entries, i.e., x[n] vs n is linear then the index\r\n * corresponding to the input can be found in one shot using the linear\r\n * interpolation formula. Therefore if you have a look-up table block with\r\n * many data points, using interpolation search might speed up the code.\r\n * Compile the generated code with the following flag:\r\n *\r\n * make_rtw OPTS=-DDOINTERPSEARCH\r\n *\r\n * to enable interpolation search.\r\n */\r\nstatic int_T rt_GetLookupIndex(const real_T *x, int_T xlen, real_T u)\r\n{\r\n  int_T idx = 0;\r\n  int_T bottom = 0;\r\n  int_T top = xlen-1;\r\n  int_T retValue = 0;\r\n  boolean_T returnStatus = 0U;\r\n\r\n#ifdef DOINTERPSEARCH\r\n\r\n  real_T offset = 0;\r\n\r\n#endif\r\n\r\n  /*\r\n   * Deal with the extreme cases first:\r\n   *   if u <= x[bottom] then return idx = bottom\r\n   *   if u >= x[top]    then return idx = top-1\r\n   */\r\n  if (u <= x[bottom]) {\r\n    retValue = bottom;\r\n    returnStatus = 1U;\r\n  } else if (u >= x[top]) {\r\n    retValue = top-1;\r\n    returnStatus = 1U;\r\n  } else {\r\n    /* else required to ensure safe programming, even *\r\n     * if it's expected that it will never be reached */\r\n  }\r\n\r\n  if (returnStatus == 0U) {\r\n    if (u < 0) {\r\n      /* For negative input find index such that: x[idx] <= u < x[idx+1] */\r\n      for (;;) {\r\n\r\n#ifdef DOINTERPSEARCH\r\n\r\n        offset = (u-x[bottom])/(x[top]-x[bottom]);\r\n        idx = bottom + (int_T)((top-bottom)*(offset-DBL_EPSILON));\r\n\r\n#else\r\n\r\n        idx = (bottom + top)/2;\r\n\r\n#endif\r\n\r\n        if (u < x[idx]) {\r\n          top = idx - 1;\r\n        } else if (u >= x[idx+1]) {\r\n          bottom = idx + 1;\r\n        } else {\r\n          /* we have x[idx] <= u < x[idx+1], return idx */\r\n          retValue = idx;\r\n          break;\r\n        }\r\n      }\r\n    } else {\r\n      /* For non-negative input find index such that: x[idx] < u <= x[idx+1] */\r\n      for (;;) {\r\n\r\n#ifdef DOINTERPSEARCH\r\n\r\n        offset = (u-x[bottom])/(x[top]-x[bottom]);\r\n        idx = bottom + (int_T)((top-bottom)*(offset-DBL_EPSILON));\r\n\r\n#else\r\n\r\n        idx = (bottom + top)/2;\r\n\r\n#endif\r\n\r\n        if (u <= x[idx]) {\r\n          top = idx - 1;\r\n        } else if (u > x[idx+1]) {\r\n          bottom = idx + 1;\r\n        } else {\r\n          /* we have x[idx] < u <= x[idx+1], return idx */\r\n          retValue = idx;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return retValue;\r\n}\r\n\r\n/* 1D lookup routine for data type of real_T. */\r\nstatic real_T rt_Lookup(const real_T *x, int_T xlen, real_T u, const real_T *y)\r\n{\r\n  int_T idx = rt_GetLookupIndex(x, xlen, u);\r\n  real_T num = y[idx+1] - y[idx];\r\n  real_T den = x[idx+1] - x[idx];\r\n\r\n  /* Due to the way the binary search is implemented\r\n     in rt_look.c (rt_GetLookupIndex), den cannot be\r\n     0.  Equivalently, m cannot be inf or nan. */\r\n  real_T m = num/den;\r\n  return (y[idx] + (m * (u - x[idx])));\r\n}\r\n\r\n/*\r\n * Initialize the rtInf, rtMinusInf, and rtNaN needed by the\r\n * generated code. NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic void rt_InitInfAndNaN(size_t realSize)\r\n{\r\n  (void) (realSize);\r\n  rtNaN = rtGetNaN();\r\n  rtNaNF = rtGetNaNF();\r\n  rtInf = rtGetInf();\r\n  rtInfF = rtGetInfF();\r\n  rtMinusInf = rtGetMinusInf();\r\n  rtMinusInfF = rtGetMinusInfF();\r\n}\r\n\r\n/* Test if value is infinite */\r\nstatic boolean_T rtIsInf(real_T value)\r\n{\r\n  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);\r\n}\r\n\r\n/* Test if single-precision value is infinite */\r\nstatic boolean_T rtIsInfF(real32_T value)\r\n{\r\n  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);\r\n}\r\n\r\n/* Test if value is not a number */\r\nstatic boolean_T rtIsNaN(real_T value)\r\n{\r\n  boolean_T result = (boolean_T) 0;\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  if (bitsPerReal == 32U) {\r\n    result = rtIsNaNF((real32_T)value);\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.fltVal = value;\r\n    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&\r\n                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||\r\n                          (tmpVal.bitVal.words.wordL != 0) ));\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/* Test if single-precision value is not a number */\r\nstatic boolean_T rtIsNaNF(real32_T value)\r\n{\r\n  IEEESingle tmp;\r\n  tmp.wordL.wordLreal = value;\r\n  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&\r\n                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );\r\n}\r\n\r\n/*\r\n * Initialize rtInf needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real_T rtGetInf(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T inf = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    inf = rtGetInfF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0x7FF00000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    inf = tmpVal.fltVal;\r\n  }\r\n\r\n  return inf;\r\n}\r\n\r\n/*\r\n * Initialize rtInfF needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real32_T rtGetInfF(void)\r\n{\r\n  IEEESingle infF;\r\n  infF.wordL.wordLuint = 0x7F800000U;\r\n  return infF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * Initialize rtMinusInf needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real_T rtGetMinusInf(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T minf = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    minf = rtGetMinusInfF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0xFFF00000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    minf = tmpVal.fltVal;\r\n  }\r\n\r\n  return minf;\r\n}\r\n\r\n/*\r\n * Initialize rtMinusInfF needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real32_T rtGetMinusInfF(void)\r\n{\r\n  IEEESingle minfF;\r\n  minfF.wordL.wordLuint = 0xFF800000U;\r\n  return minfF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n *         This function updates active task flag for each subrate.\r\n *         The function is called at model base rate, hence the\r\n *         generated code self-manages all its subrates.\r\n */\r\nstatic void rate_scheduler(void)\r\n{\r\n  /* Compute which subrates run during the next base time step.  Subrates\r\n   * are an integer multiple of the base rate counter.  Therefore, the subtask\r\n   * counter is reset when it reaches its limit (zero means run).\r\n   */\r\n  (rtM->Timing.TaskCounters.TID[1])++;\r\n  if ((rtM->Timing.TaskCounters.TID[1]) > 99999) {/* Sample time: [1.0s, 0.0s] */\r\n    rtM->Timing.TaskCounters.TID[1] = 0;\r\n  }\r\n}\r\n\r\nvoid rt_invd4x4_snf(const real_T u[16], real_T y[16])\r\n{\r\n  real_T x[16];\r\n  real_T smax;\r\n  int32_T ijA;\r\n  int32_T ipiv_tmp;\r\n  int32_T ix;\r\n  int32_T iy;\r\n  int32_T jA;\r\n  int32_T jBcol;\r\n  int32_T jj;\r\n  int32_T jp1j;\r\n  int32_T pipk;\r\n  int8_T ipiv[4];\r\n  int8_T p[4];\r\n  for (ipiv_tmp = 0; ipiv_tmp < 16; ipiv_tmp++) {\r\n    y[ipiv_tmp] = 0.0;\r\n    x[ipiv_tmp] = u[ipiv_tmp];\r\n  }\r\n\r\n  ipiv[0] = 1;\r\n  ipiv[1] = 2;\r\n  ipiv[2] = 3;\r\n  for (pipk = 0; pipk < 3; pipk++) {\r\n    jBcol = pipk * 5 + 2;\r\n    jj = pipk * 5;\r\n    ix = 4 - pipk;\r\n    iy = 1;\r\n    smax = fabs(x[jj]);\r\n    for (jA = 2; jA <= ix; jA++) {\r\n      real_T s;\r\n      s = fabs(x[(jBcol + jA) - 3]);\r\n      if (s > smax) {\r\n        iy = jA;\r\n        smax = s;\r\n      }\r\n    }\r\n\r\n    if (x[(jBcol + iy) - 3] != 0.0) {\r\n      if (iy - 1 != 0) {\r\n        ipiv_tmp = pipk + iy;\r\n        ipiv[pipk] = (int8_T)ipiv_tmp;\r\n        smax = x[pipk];\r\n        x[pipk] = x[ipiv_tmp - 1];\r\n        x[ipiv_tmp - 1] = smax;\r\n        smax = x[pipk + 4];\r\n        x[pipk + 4] = x[ipiv_tmp + 3];\r\n        x[ipiv_tmp + 3] = smax;\r\n        smax = x[pipk + 8];\r\n        x[pipk + 8] = x[ipiv_tmp + 7];\r\n        x[ipiv_tmp + 7] = smax;\r\n        smax = x[pipk + 12];\r\n        x[pipk + 12] = x[ipiv_tmp + 11];\r\n        x[ipiv_tmp + 11] = smax;\r\n      }\r\n\r\n      iy = jBcol - pipk;\r\n      for (ix = jBcol; ix <= iy + 2; ix++) {\r\n        x[ix - 1] /= x[jj];\r\n      }\r\n    }\r\n\r\n    ix = 3 - pipk;\r\n    jA = jj;\r\n    jj += 4;\r\n    for (jp1j = 0; jp1j < ix; jp1j++) {\r\n      smax = x[(jp1j << 2) + jj];\r\n      if (smax != 0.0) {\r\n        iy = jA + 6;\r\n        ipiv_tmp = jA - pipk;\r\n        for (ijA = iy; ijA <= ipiv_tmp + 8; ijA++) {\r\n          x[ijA - 1] += x[((jBcol + ijA) - jA) - 7] * -smax;\r\n        }\r\n      }\r\n\r\n      jA += 4;\r\n    }\r\n  }\r\n\r\n  p[0] = 1;\r\n  p[1] = 2;\r\n  p[2] = 3;\r\n  p[3] = 4;\r\n  if (ipiv[0] > 1) {\r\n    pipk = p[ipiv[0] - 1];\r\n    p[ipiv[0] - 1] = 1;\r\n    p[0] = (int8_T)pipk;\r\n  }\r\n\r\n  if (ipiv[1] > 2) {\r\n    pipk = p[ipiv[1] - 1];\r\n    p[ipiv[1] - 1] = p[1];\r\n    p[1] = (int8_T)pipk;\r\n  }\r\n\r\n  if (ipiv[2] > 3) {\r\n    pipk = p[ipiv[2] - 1];\r\n    p[ipiv[2] - 1] = p[2];\r\n    p[2] = (int8_T)pipk;\r\n  }\r\n\r\n  for (jA = 0; jA < 4; jA++) {\r\n    jj = (p[jA] - 1) << 2;\r\n    y[jA + jj] = 1.0;\r\n    for (pipk = jA + 1; pipk < 5; pipk++) {\r\n      ipiv_tmp = (jj + pipk) - 1;\r\n      if (y[ipiv_tmp] != 0.0) {\r\n        for (ix = pipk + 1; ix < 5; ix++) {\r\n          jBcol = (jj + ix) - 1;\r\n          y[jBcol] -= x[(((pipk - 1) << 2) + ix) - 1] * y[ipiv_tmp];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  for (pipk = 0; pipk < 4; pipk++) {\r\n    jBcol = pipk << 2;\r\n    for (jA = 3; jA >= 0; jA--) {\r\n      jp1j = jA << 2;\r\n      ipiv_tmp = jA + jBcol;\r\n      smax = y[ipiv_tmp];\r\n      if (smax != 0.0) {\r\n        y[ipiv_tmp] = smax / x[jA + jp1j];\r\n        iy = jA - 1;\r\n        for (ix = 0; ix <= iy; ix++) {\r\n          jj = ix + jBcol;\r\n          y[jj] -= x[ix + jp1j] * y[ipiv_tmp];\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nreal_T rt_atan2d_snf(real_T u0, real_T u1)\r\n{\r\n  real_T y;\r\n  if (rtIsNaN(u0) || rtIsNaN(u1)) {\r\n    y = (rtNaN);\r\n  } else if (rtIsInf(u0) && rtIsInf(u1)) {\r\n    int32_T tmp;\r\n    int32_T tmp_0;\r\n    if (u0 > 0.0) {\r\n      tmp = 1;\r\n    } else {\r\n      tmp = -1;\r\n    }\r\n\r\n    if (u1 > 0.0) {\r\n      tmp_0 = 1;\r\n    } else {\r\n      tmp_0 = -1;\r\n    }\r\n\r\n    y = atan2(tmp, tmp_0);\r\n  } else if (u1 == 0.0) {\r\n    if (u0 > 0.0) {\r\n      y = RT_PI / 2.0;\r\n    } else if (u0 < 0.0) {\r\n      y = -(RT_PI / 2.0);\r\n    } else {\r\n      y = 0.0;\r\n    }\r\n  } else {\r\n    y = atan2(u0, u1);\r\n  }\r\n\r\n  return y;\r\n}\r\n\r\nreal_T rt_remd_snf(real_T u0, real_T u1)\r\n{\r\n  real_T y;\r\n  if (rtIsNaN(u0) || rtIsNaN(u1) || rtIsInf(u0)) {\r\n    y = (rtNaN);\r\n  } else if (rtIsInf(u1)) {\r\n    y = u0;\r\n  } else if ((u1 != 0.0) && (u1 != trunc(u1))) {\r\n    real_T q;\r\n    q = fabs(u0 / u1);\r\n    if (!(fabs(q - floor(q + 0.5)) > DBL_EPSILON * q)) {\r\n      y = 0.0 * u0;\r\n    } else {\r\n      y = fmod(u0, u1);\r\n    }\r\n  } else {\r\n    y = fmod(u0, u1);\r\n  }\r\n\r\n  return y;\r\n}\r\n\r\n/* Model step function */\r\nvoid sumAll_step(void)\r\n{\r\n  __m128d tmp;\r\n  __m128d tmp_0;\r\n  __m128d tmp_1;\r\n  __m128d tmp_2;\r\n  __m128d tmp_3;\r\n  __m128d tmp_4;\r\n  __m128d tmp_5;\r\n  __m128d tmp_6;\r\n  __m128d tmp_7;\r\n  real_T W43wr[16];\r\n  real_T rtb_Lminrows24col24_0[16];\r\n  real_T rtb_Sum5[16];\r\n  real_T rtb_MultiportSwitch[4];\r\n  real_T rtb_Sum2[4];\r\n  real_T rtb_MathFunction[3];\r\n  real_T TrigonometricFunction_o1;\r\n  real_T TrigonometricFunction_o2;\r\n  real_T isb_g;\r\n  real_T rtb_Gain2_l;\r\n  real_T rtb_Mult1_idx_0;\r\n  real_T rtb_Mult1_idx_1;\r\n  real_T rtb_MultiportSwitch1_f;\r\n  real_T rtb_MultiportSwitch1_idx_2;\r\n  real_T rtb_MultiportSwitch1_idx_3;\r\n  real_T rtb_Phisat;\r\n  real_T rtb_Saturation;\r\n  real_T rtb_Switch_m_idx_0;\r\n  real_T rtb_phimd;\r\n  real_T rtb_u_Vb_idx_3;\r\n  real_T rtb_unitconversion_idx_11;\r\n  real_T rtb_unitconversion_idx_6;\r\n  real_T rtb_unitconversion_idx_9;\r\n  real_T vdr_c;\r\n  real_T vds_m;\r\n  int32_T i;\r\n  int32_T i_0;\r\n  int32_T rtb_Sum5_tmp;\r\n  uint8_T rtb_Subtract2_m;\r\n  boolean_T rtb_LogicalOperator2;\r\n\r\n  /* Update for UnitDelay: '<S43>/fluxes' incorporates:\r\n   *  UnitDelay: '<S45>/fluxes'\r\n   */\r\n  rtDW.fluxes_DSTATE_m[0] = rtDW.fluxes_DSTATE[0];\r\n  rtDW.fluxes_DSTATE_m[1] = rtDW.fluxes_DSTATE[1];\r\n  rtDW.fluxes_DSTATE_m[2] = rtDW.fluxes_DSTATE[2];\r\n  rtDW.fluxes_DSTATE_m[3] = rtDW.fluxes_DSTATE[3];\r\n\r\n  /* Switch: '<S38>/Switch' incorporates:\r\n   *  Constant: '<S38>/Constant2'\r\n   *  Product: '<S44>/inversion'\r\n   */\r\n  memcpy(&rtb_Lminrows24col24_0[0], &rtConstP.Constant2_Value[0], sizeof(real_T)\r\n         << 4U);\r\n\r\n  /* UnitDelay: '<S45>/fluxes' incorporates:\r\n   *  Product: '<S38>/Product3'\r\n   */\r\n  rtb_Mult1_idx_1 = rtDW.fluxes_DSTATE[1];\r\n  rtb_Gain2_l = rtDW.fluxes_DSTATE[0];\r\n  rtb_Mult1_idx_0 = rtDW.fluxes_DSTATE[2];\r\n  rtb_Saturation = rtDW.fluxes_DSTATE[3];\r\n  for (i = 0; i <= 2; i += 2) {\r\n    /* Product: '<S38>/Product3' incorporates:\r\n     *  UnitDelay: '<S45>/fluxes'\r\n     */\r\n    tmp_4 = _mm_loadu_pd(&rtb_Lminrows24col24_0[i + 4]);\r\n    tmp_5 = _mm_loadu_pd(&rtb_Lminrows24col24_0[i]);\r\n    tmp_6 = _mm_loadu_pd(&rtb_Lminrows24col24_0[i + 8]);\r\n    tmp_7 = _mm_loadu_pd(&rtb_Lminrows24col24_0[i + 12]);\r\n    _mm_storeu_pd(&rtb_Sum2[i], _mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_mul_pd\r\n      (tmp_4, _mm_set1_pd(rtb_Mult1_idx_1)), _mm_mul_pd(tmp_5, _mm_set1_pd\r\n      (rtb_Gain2_l))), _mm_mul_pd(tmp_6, _mm_set1_pd(rtb_Mult1_idx_0))),\r\n      _mm_mul_pd(tmp_7, _mm_set1_pd(rtb_Saturation))));\r\n  }\r\n\r\n  /* UnitDelay: '<S60>/wm_delay' */\r\n  rtb_Phisat = rtDW.wm_delay_DSTATE;\r\n\r\n  /* Sum: '<S60>/Sum1' incorporates:\r\n   *  Gain: '<S60>/F2'\r\n   *  UnitDelay: '<S60>/wm_predict'\r\n   */\r\n  rtb_phimd = 2.0 * rtb_Phisat - rtDW.wm_predict_DSTATE;\r\n\r\n  /* Outputs for Enabled SubSystem: '<S41>/sin(thr),cos(thr)' incorporates:\r\n   *  EnablePort: '<S58>/Enable'\r\n   */\r\n  if (rtDW.sinthrcosthr_MODE) {\r\n    /* Disable for Trigonometry: '<S58>/Trigonometric Function' incorporates:\r\n     *  Outport: '<S58>/sin(thr),cos(thr)'\r\n     */\r\n    rtDW.TrigonometricFunction_o1_a = 0.0;\r\n\r\n    /* Disable for Trigonometry: '<S58>/Trigonometric Function' incorporates:\r\n     *  Outport: '<S58>/sin(thr),cos(thr)'\r\n     */\r\n    rtDW.TrigonometricFunction_o2_a = 0.0;\r\n\r\n    /* Disable for Outport: '<S58>/sin(thr),cos(thr)' incorporates:\r\n     *  Constant: '<S58>/Constant'\r\n     */\r\n    rtDW.Constant_n[0] = 0.0;\r\n    rtDW.Constant_n[1] = 0.0;\r\n\r\n    /* Disable for Assignment: '<S58>/W(2,1)=-wr' incorporates:\r\n     *  Outport: '<S58>/W'\r\n     */\r\n    memset(&rtDW.W21wr[0], 0, sizeof(real_T) << 4U);\r\n    rtDW.sinthrcosthr_MODE = false;\r\n  }\r\n\r\n  /* End of Outputs for SubSystem: '<S41>/sin(thr),cos(thr)' */\r\n\r\n  /* Outputs for Enabled SubSystem: '<S41>/sin(thr),cos(thr)1' incorporates:\r\n   *  EnablePort: '<S59>/Enable'\r\n   */\r\n  /* Assignment: '<S59>/W(4,3)=wr' incorporates:\r\n   *  SignalConversion generated from: '<S59>/W(3,4)=-wr'\r\n   */\r\n  memset(&W43wr[0], 0, sizeof(real_T) << 4U);\r\n\r\n  /* Gain: '<S59>/Gain3' incorporates:\r\n   *  Assignment: '<S59>/W(4,3)=wr'\r\n   */\r\n  W43wr[14] = -rtb_phimd;\r\n\r\n  /* Assignment: '<S59>/W(4,3)=wr' */\r\n  W43wr[11] = rtb_phimd;\r\n\r\n  /* Trigonometry: '<S59>/Trigonometric Function' incorporates:\r\n   *  DiscreteIntegrator: '<S37>/Rotor angle thetam'\r\n   */\r\n  TrigonometricFunction_o1 = sin(rtDW.Rotoranglethetam_DSTATE);\r\n\r\n  /* Trigonometry: '<S59>/Trigonometric Function' incorporates:\r\n   *  DiscreteIntegrator: '<S37>/Rotor angle thetam'\r\n   */\r\n  TrigonometricFunction_o2 = cos(rtDW.Rotoranglethetam_DSTATE);\r\n\r\n  /* End of Outputs for SubSystem: '<S41>/sin(thr),cos(thr)1' */\r\n\r\n  /* Outputs for Enabled SubSystem: '<S40>/Rotor reference frame' incorporates:\r\n   *  EnablePort: '<S54>/Enable'\r\n   */\r\n  if (rtDW.Rotorreferenceframe_MODE) {\r\n    /* Disable for Fcn: '<S54>/ira' incorporates:\r\n     *  Outport: '<S54>/ira,irb'\r\n     */\r\n    rtDW.ira_d = 0.0;\r\n\r\n    /* Disable for Fcn: '<S54>/irb' incorporates:\r\n     *  Outport: '<S54>/ira,irb'\r\n     */\r\n    rtDW.irb_f = 0.0;\r\n\r\n    /* Disable for Fcn: '<S54>/isa' incorporates:\r\n     *  Outport: '<S54>/isa,isb'\r\n     */\r\n    rtDW.isa_p = 0.0;\r\n\r\n    /* Disable for Fcn: '<S54>/isb' incorporates:\r\n     *  Outport: '<S54>/isa,isb'\r\n     */\r\n    rtDW.isb_j = 0.0;\r\n    rtDW.Rotorreferenceframe_MODE = false;\r\n  }\r\n\r\n  /* End of Outputs for SubSystem: '<S40>/Rotor reference frame' */\r\n\r\n  /* Outputs for Enabled SubSystem: '<S40>/Stationary reference frame' incorporates:\r\n   *  EnablePort: '<S55>/Enable'\r\n   */\r\n  /* Fcn: '<S55>/isb' */\r\n  isb_g = -(1.7320508075688772 * rtb_Sum2[1] + rtb_Sum2[0]) / 2.0;\r\n\r\n  /* End of Outputs for SubSystem: '<S40>/Stationary reference frame' */\r\n\r\n  /* Outputs for Enabled SubSystem: '<S40>/Synchronous reference frame' incorporates:\r\n   *  EnablePort: '<S56>/Enable'\r\n   */\r\n  if (rtDW.Synchronousreferenceframe_MODE) {\r\n    /* Disable for Fcn: '<S56>/ira' incorporates:\r\n     *  Outport: '<S56>/ira,irb'\r\n     */\r\n    rtDW.ira = 0.0;\r\n\r\n    /* Disable for Fcn: '<S56>/irb' incorporates:\r\n     *  Outport: '<S56>/ira,irb'\r\n     */\r\n    rtDW.irb = 0.0;\r\n\r\n    /* Disable for Fcn: '<S56>/isa' incorporates:\r\n     *  Outport: '<S56>/isa,isb'\r\n     */\r\n    rtDW.isa = 0.0;\r\n\r\n    /* Disable for Fcn: '<S56>/isb' incorporates:\r\n     *  Outport: '<S56>/isa,isb'\r\n     */\r\n    rtDW.isb = 0.0;\r\n    rtDW.Synchronousreferenceframe_MODE = false;\r\n  }\r\n\r\n  /* End of Outputs for SubSystem: '<S40>/Synchronous reference frame' */\r\n\r\n  /* Outputs for Enabled SubSystem: '<S40>/Stationary reference frame' incorporates:\r\n   *  EnablePort: '<S55>/Enable'\r\n   */\r\n  /* Gain: '<S40>/ib' incorporates:\r\n   *  Fcn: '<S55>/ira'\r\n   *  Fcn: '<S55>/irb'\r\n   *  Fcn: '<S55>/isa'\r\n   *  MultiPortSwitch: '<S40>/Multiport Switch1'\r\n   *  MultiPortSwitch: '<S41>/Multiport Switch'\r\n   */\r\n  rtDW.ib[0] = (TrigonometricFunction_o2 * rtb_Sum2[2] -\r\n                TrigonometricFunction_o1 * rtb_Sum2[3]) * 13.731987951966302;\r\n  rtDW.ib[2] = 13.731987951966302 * rtb_Sum2[0];\r\n  rtDW.ib[1] = ((-TrigonometricFunction_o2 - 1.7320508075688772 *\r\n                 TrigonometricFunction_o1) * rtb_Sum2[2] +\r\n                (TrigonometricFunction_o1 - 1.7320508075688772 *\r\n                 TrigonometricFunction_o2) * rtb_Sum2[3]) / 2.0 *\r\n    13.731987951966302;\r\n\r\n  /* End of Outputs for SubSystem: '<S40>/Stationary reference frame' */\r\n  rtDW.ib[3] = 13.731987951966302 * isb_g;\r\n\r\n  /* S-Function (sfun_spssw_discc): '<S64>/State-Space' incorporates:\r\n   *  Constant: '<S61>/DC'\r\n   */\r\n\r\n  /* S-Function block: <S64>/State-Space */\r\n  {\r\n    real_T accum;\r\n\r\n    /* Circuit has switches */\r\n    int_T *switch_status = (int_T*) rtDW.StateSpace_PWORK.SWITCH_STATUS;\r\n    int_T *switch_status_init = (int_T*)\r\n      rtDW.StateSpace_PWORK.SWITCH_STATUS_INIT;\r\n    int_T *SwitchChange = (int_T*) rtDW.StateSpace_PWORK.SW_CHG;\r\n    int_T *gState = (int_T*) rtDW.StateSpace_PWORK.G_STATE;\r\n    real_T *yswitch = (real_T*)rtDW.StateSpace_PWORK.Y_SWITCH;\r\n    int_T *switchTypes = (int_T*) rtDW.StateSpace_PWORK.SWITCH_TYPES;\r\n    int_T *idxOutSw = (int_T*) rtDW.StateSpace_PWORK.IDX_OUT_SW;\r\n    real_T *DxCol = (real_T*)rtDW.StateSpace_PWORK.DX_COL;\r\n    real_T *tmp2 = (real_T*)rtDW.StateSpace_PWORK.TMP2;\r\n    real_T *uswlast = (real_T*)rtDW.StateSpace_PWORK.USWLAST;\r\n    int_T newState;\r\n    int_T swChanged = 0;\r\n    int loopsToDo = 20;\r\n    real_T temp;\r\n\r\n    /* keep an initial copy of switch_status*/\r\n    memcpy(switch_status_init, switch_status, 6 * sizeof(int_T));\r\n    memcpy(uswlast, &rtDW.StateSpace_o1[0], 6*sizeof(real_T));\r\n    do {\r\n      if (loopsToDo == 1) {            /* Need to reset some variables: */\r\n        swChanged = 0;\r\n\r\n        /* return to the original switch status*/\r\n        {\r\n          int_T i1;\r\n          for (i1=0; i1 < 6; i1++) {\r\n            swChanged = ((SwitchChange[i1] = switch_status_init[i1] -\r\n                          switch_status[i1]) != 0) ? 1 : swChanged;\r\n            switch_status[i1] = switch_status_init[i1];\r\n          }\r\n        }\r\n      } else {\r\n        /*\r\n         * Compute outputs:\r\n         * ---------------\r\n         */\r\n        real_T *Ds = (real_T*)rtDW.StateSpace_PWORK.DS;\r\n\r\n        {\r\n          int_T i1;\r\n          real_T *y0 = &rtDW.StateSpace_o1[0];\r\n          for (i1=0; i1 < 8; i1++) {\r\n            accum = 0.0;\r\n\r\n            {\r\n              int_T i2;\r\n              const real_T *u0;\r\n              for (i2=0; i2 < 6; i2++) {\r\n                accum += *(Ds++) * 0.0;\r\n              }\r\n\r\n              accum += *(Ds++) * rtDW.ib[2];\r\n              accum += *(Ds++) * rtDW.ib[3];\r\n              accum += *(Ds++) * 500.0;\r\n            }\r\n\r\n            y0[i1] = accum;\r\n          }\r\n        }\r\n\r\n        swChanged = 0;\r\n\r\n        {\r\n          int_T i1;\r\n          real_T *y0 = &rtDW.StateSpace_o1[0];\r\n          for (i1=0; i1 < 6; i1++) {\r\n            newState = ((y0[i1] > 0.0) && (gState[i1] > 0)) || (y0[i1] < 0.0) ?\r\n              1 : (((y0[i1] > 0.0) && gState[i1] == 0) ? 0 : switch_status[i1]);\r\n            swChanged = ((SwitchChange[i1] = newState - switch_status[i1]) != 0)\r\n              ? 1 : swChanged;\r\n            switch_status[i1] = newState;/* Keep new state */\r\n          }\r\n        }\r\n      }\r\n\r\n      /*\r\n       * Compute new As, Bs, Cs and Ds matrixes:\r\n       * --------------------------------------\r\n       */\r\n      if (swChanged) {\r\n        real_T *Ds = (real_T*)rtDW.StateSpace_PWORK.DS;\r\n        real_T a1;\r\n\r\n        {\r\n          int_T i1;\r\n          for (i1=0; i1 < 6; i1++) {\r\n            if (SwitchChange[i1] != 0) {\r\n              a1 = 1000.0*SwitchChange[i1];\r\n              temp = 1/(1-Ds[i1*10]*a1);\r\n\r\n              {\r\n                int_T i2;\r\n                for (i2=0; i2 < 8; i2++) {\r\n                  DxCol[i2]= Ds[i2 * 9 + i1]*temp*a1;\r\n                }\r\n              }\r\n\r\n              DxCol[i1] = temp;\r\n\r\n              /* Copy row nSw of Ds into tmp2 and zero it out in Ds */\r\n              memcpy(tmp2, &Ds[i1 * 9], 9 * sizeof(real_T));\r\n              memset(&Ds[i1 * 9], '\\0', 9 * sizeof(real_T));\r\n\r\n              /* Cs = Cs + DxCol * tmp1, Ds = Ds + DxCol * tmp2 *******************/\r\n              {\r\n                int_T i2;\r\n                for (i2=0; i2 < 8; i2++) {\r\n                  a1 = DxCol[i2];\r\n\r\n                  {\r\n                    int_T i3;\r\n                    for (i3=0; i3 < 9; i3++) {\r\n                      Ds[i2 * 9 + i3] += a1 * tmp2[i3];\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }                                /* if (swChanged) */\r\n    } while (swChanged > 0 && --loopsToDo > 0);\r\n\r\n    if (loopsToDo == 0) {\r\n      real_T *Ds = (real_T*)rtDW.StateSpace_PWORK.DS;\r\n\r\n      {\r\n        int_T i1;\r\n        real_T *y0 = &rtDW.StateSpace_o1[0];\r\n        for (i1=0; i1 < 8; i1++) {\r\n          accum = 0.0;\r\n\r\n          {\r\n            int_T i2;\r\n            const real_T *u0;\r\n            for (i2=0; i2 < 6; i2++) {\r\n              accum += *(Ds++) * 0.0;\r\n            }\r\n\r\n            accum += *(Ds++) * rtDW.ib[2];\r\n            accum += *(Ds++) * rtDW.ib[3];\r\n            accum += *(Ds++) * 500.0;\r\n          }\r\n\r\n          y0[i1] = accum;\r\n        }\r\n      }\r\n    }\r\n\r\n    /* Output new switches states */\r\n    {\r\n      int_T i1;\r\n      real_T *y1 = &rtDW.StateSpace_o2[0];\r\n      for (i1=0; i1 < 6; i1++) {\r\n        y1[i1] = (real_T)switch_status[i1];\r\n      }\r\n    }\r\n  }\r\n\r\n  /* Gain: '<S39>/1_Vb' */\r\n  rtb_u_Vb_idx_3 = 0.0055670221426890416 * rtDW.StateSpace_o1[7];\r\n\r\n  /* Outputs for Enabled SubSystem: '<S39>/Rotor reference frame' incorporates:\r\n   *  EnablePort: '<S50>/Enable'\r\n   */\r\n  if (rtDW.Rotorreferenceframe_MODE_b) {\r\n    /* Disable for Fcn: '<S50>/vqr' incorporates:\r\n     *  Outport: '<S50>/vqr,vdr'\r\n     */\r\n    rtDW.vqr_o = 0.0;\r\n\r\n    /* Disable for Fcn: '<S50>/vdr' incorporates:\r\n     *  Outport: '<S50>/vqr,vdr'\r\n     */\r\n    rtDW.vdr_g = 0.0;\r\n\r\n    /* Disable for Fcn: '<S50>/vqs' incorporates:\r\n     *  Outport: '<S50>/vqs,vds'\r\n     */\r\n    rtDW.vqs_m = 0.0;\r\n\r\n    /* Disable for Fcn: '<S50>/vds' incorporates:\r\n     *  Outport: '<S50>/vqs,vds'\r\n     */\r\n    rtDW.vds_k = 0.0;\r\n    rtDW.Rotorreferenceframe_MODE_b = false;\r\n  }\r\n\r\n  /* End of Outputs for SubSystem: '<S39>/Rotor reference frame' */\r\n\r\n  /* Outputs for Enabled SubSystem: '<S39>/Stationary reference frame' incorporates:\r\n   *  EnablePort: '<S51>/Enable'\r\n   */\r\n  /* Fcn: '<S51>/vdr' incorporates:\r\n   *  MultiPortSwitch: '<S41>/Multiport Switch'\r\n   */\r\n  vdr_c = ((-TrigonometricFunction_o1 - 1.7320508075688772 *\r\n            TrigonometricFunction_o2) * 0.0 + -2.0 * TrigonometricFunction_o1 *\r\n           0.0) * 0.33333333333333331;\r\n\r\n  /* Fcn: '<S51>/vds' */\r\n  vds_m = -0.57735026918962573 * rtb_u_Vb_idx_3;\r\n\r\n  /* Fcn: '<S51>/vqr' incorporates:\r\n   *  MultiPortSwitch: '<S41>/Multiport Switch'\r\n   */\r\n  TrigonometricFunction_o1 = ((TrigonometricFunction_o2 - 1.7320508075688772 *\r\n    TrigonometricFunction_o1) * 0.0 + 2.0 * TrigonometricFunction_o2 * 0.0) *\r\n    0.33333333333333331;\r\n\r\n  /* Fcn: '<S51>/vqs' incorporates:\r\n   *  Gain: '<S39>/1_Vb'\r\n   */\r\n  rtb_u_Vb_idx_3 = (0.0055670221426890416 * rtDW.StateSpace_o1[6] * 2.0 +\r\n                    rtb_u_Vb_idx_3) * 0.33333333333333331;\r\n\r\n  /* End of Outputs for SubSystem: '<S39>/Stationary reference frame' */\r\n\r\n  /* Outputs for Enabled SubSystem: '<S39>/Synchronous reference frame' incorporates:\r\n   *  EnablePort: '<S52>/Enable'\r\n   */\r\n  if (rtDW.Synchronousreferenceframe_MOD_g) {\r\n    /* Disable for Fcn: '<S52>/vqr' incorporates:\r\n     *  Outport: '<S52>/vqr,vdr'\r\n     */\r\n    rtDW.vqr = 0.0;\r\n\r\n    /* Disable for Fcn: '<S52>/vdr' incorporates:\r\n     *  Outport: '<S52>/vqr,vdr'\r\n     */\r\n    rtDW.vdr = 0.0;\r\n\r\n    /* Disable for Fcn: '<S52>/vqs' incorporates:\r\n     *  Outport: '<S52>/vqs,vds'\r\n     */\r\n    rtDW.vqs = 0.0;\r\n\r\n    /* Disable for Fcn: '<S52>/vds' incorporates:\r\n     *  Outport: '<S52>/vqs,vds'\r\n     */\r\n    rtDW.vds = 0.0;\r\n    rtDW.Synchronousreferenceframe_MOD_g = false;\r\n  }\r\n\r\n  /* End of Outputs for SubSystem: '<S39>/Synchronous reference frame' */\r\n\r\n  /* Outputs for Enabled SubSystem: '<S40>/Stationary reference frame' incorporates:\r\n   *  EnablePort: '<S55>/Enable'\r\n   */\r\n  /* Gain: '<S35>/unit conversion' incorporates:\r\n   *  Fcn: '<S55>/isa'\r\n   *  MultiPortSwitch: '<S40>/Multiport Switch1'\r\n   *  Sum: '<S40>/Sum3'\r\n   *  UnitDelay: '<S45>/fluxes'\r\n   */\r\n  rtb_unitconversion_idx_11 = ((0.0 - rtb_Sum2[0]) - isb_g) * 13.731987951966302;\r\n\r\n  /* End of Outputs for SubSystem: '<S40>/Stationary reference frame' */\r\n  TrigonometricFunction_o2 = 0.57177765423802906 * rtDW.fluxes_DSTATE[2];\r\n\r\n  /* Outputs for Enabled SubSystem: '<S40>/Stationary reference frame' incorporates:\r\n   *  EnablePort: '<S55>/Enable'\r\n   */\r\n  rtb_unitconversion_idx_9 = 13.731987951966302 * rtb_Sum2[0];\r\n\r\n  /* End of Outputs for SubSystem: '<S40>/Stationary reference frame' */\r\n  rtb_unitconversion_idx_6 = 0.57177765423802906 * rtDW.fluxes_DSTATE[3];\r\n  isb_g *= 13.731987951966302;\r\n\r\n  /* Switch: '<S45>/IC' incorporates:\r\n   *  DigitalClock: '<S45>/Digital Clock'\r\n   *  Gain: '<S49>/wbase*Ts//2 '\r\n   *  Product: '<S45>/Product1'\r\n   *  Product: '<S45>/Product2'\r\n   *  Sum: '<S45>/Ad*x(k-1) + Bd*( u(k-1) + u(k))'\r\n   *  UnitDelay: '<S45>/fluxes'\r\n   */\r\n  if ((((rtM->Timing.clockTick0+rtM->Timing.clockTickH0* 4294967296.0)) * 1.0E-5)\r\n      >= 1.0E-5) {\r\n    for (i = 0; i <= 14; i += 2) {\r\n      tmp_4 = _mm_loadu_pd(&W43wr[i]);\r\n      tmp_4 = _mm_mul_pd(_mm_sub_pd(_mm_sub_pd(_mm_set1_pd(0.0), tmp_4),\r\n        _mm_loadu_pd(&rtConstP.Constant4_Value[i])), _mm_set1_pd\r\n                         (0.0015707963267948967));\r\n      tmp_5 = _mm_loadu_pd(&rtConstP.u5_Value_p[i]);\r\n      _mm_storeu_pd(&rtb_Sum5[i], _mm_add_pd(tmp_5, tmp_4));\r\n      _mm_storeu_pd(&rtb_Lminrows24col24_0[i], _mm_sub_pd(tmp_5, tmp_4));\r\n    }\r\n\r\n    /* Product: '<S49>/inversion' incorporates:\r\n     *  Assignment: '<S59>/W(4,3)=wr'\r\n     *  Constant: '<S38>/Constant4'\r\n     *  Constant: '<S49>/u5'\r\n     *  Gain: '<S49>/wbase*Ts//2'\r\n     *  Gain: '<S49>/wbase*Ts//2 '\r\n     *  MultiPortSwitch: '<S41>/Multiport Switch1'\r\n     *  Sum: '<S38>/Sum1'\r\n     *  Sum: '<S49>/Sum1'\r\n     *  Sum: '<S49>/Sum5'\r\n     *  Switch: '<S38>/Switch1'\r\n     */\r\n    rt_invd4x4_snf(rtb_Lminrows24col24_0, W43wr);\r\n\r\n    /* Product: '<S49>/Product4' incorporates:\r\n     *  Gain: '<S49>/wbase*Ts//2 '\r\n     *  Sum: '<S49>/Sum5'\r\n     */\r\n    for (i = 0; i < 4; i++) {\r\n      rtb_Sum5_tmp = i << 2;\r\n      rtb_Mult1_idx_1 = rtb_Sum5[rtb_Sum5_tmp + 1];\r\n      rtb_Gain2_l = rtb_Sum5[rtb_Sum5_tmp];\r\n      rtb_Mult1_idx_0 = rtb_Sum5[rtb_Sum5_tmp + 2];\r\n      rtb_Saturation = rtb_Sum5[rtb_Sum5_tmp + 3];\r\n      for (i_0 = 0; i_0 <= 2; i_0 += 2) {\r\n        tmp_4 = _mm_loadu_pd(&W43wr[i_0 + 4]);\r\n        tmp_5 = _mm_loadu_pd(&W43wr[i_0]);\r\n        tmp_6 = _mm_loadu_pd(&W43wr[i_0 + 8]);\r\n        tmp_7 = _mm_loadu_pd(&W43wr[i_0 + 12]);\r\n        _mm_storeu_pd(&rtb_Lminrows24col24_0[i_0 + rtb_Sum5_tmp], _mm_add_pd\r\n                      (_mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_set1_pd\r\n          (rtb_Mult1_idx_1), tmp_4), _mm_mul_pd(_mm_set1_pd(rtb_Gain2_l), tmp_5)),\r\n          _mm_mul_pd(_mm_set1_pd(rtb_Mult1_idx_0), tmp_6)), _mm_mul_pd\r\n                       (_mm_set1_pd(rtb_Saturation), tmp_7)));\r\n      }\r\n    }\r\n\r\n    /* End of Product: '<S49>/Product4' */\r\n\r\n    /* Sum: '<S45>/sum' incorporates:\r\n     *  MultiPortSwitch: '<S39>/Multiport Switch'\r\n     *  MultiPortSwitch: '<S39>/Multiport Switch1'\r\n     *  UnitDelay: '<S45>/voltages'\r\n     */\r\n    rtb_Switch_m_idx_0 = rtb_u_Vb_idx_3 + rtDW.voltages_DSTATE[0];\r\n    rtb_MultiportSwitch1_idx_2 = TrigonometricFunction_o1 +\r\n      rtDW.voltages_DSTATE[2];\r\n    rtb_MultiportSwitch1_f = vds_m + rtDW.voltages_DSTATE[1];\r\n    rtb_MultiportSwitch1_idx_3 = vdr_c + rtDW.voltages_DSTATE[3];\r\n\r\n    /* UnitDelay: '<S45>/fluxes' incorporates:\r\n     *  Product: '<S45>/Product2'\r\n     */\r\n    rtb_Mult1_idx_1 = rtDW.fluxes_DSTATE[1];\r\n    rtb_Gain2_l = rtDW.fluxes_DSTATE[0];\r\n    rtb_Mult1_idx_0 = rtDW.fluxes_DSTATE[2];\r\n    rtb_Saturation = rtDW.fluxes_DSTATE[3];\r\n    for (i = 0; i <= 2; i += 2) {\r\n      tmp_4 = _mm_loadu_pd(&W43wr[i + 4]);\r\n      tmp_5 = _mm_set1_pd(0.0015707963267948967);\r\n      tmp_6 = _mm_loadu_pd(&W43wr[i]);\r\n      tmp_7 = _mm_loadu_pd(&W43wr[i + 8]);\r\n      tmp = _mm_loadu_pd(&W43wr[i + 12]);\r\n      tmp_0 = _mm_loadu_pd(&rtb_Lminrows24col24_0[i + 4]);\r\n      tmp_1 = _mm_loadu_pd(&rtb_Lminrows24col24_0[i]);\r\n      tmp_2 = _mm_loadu_pd(&rtb_Lminrows24col24_0[i + 8]);\r\n      tmp_3 = _mm_loadu_pd(&rtb_Lminrows24col24_0[i + 12]);\r\n      _mm_storeu_pd(&rtb_MultiportSwitch[i], _mm_add_pd(_mm_add_pd(_mm_add_pd\r\n        (_mm_add_pd(_mm_mul_pd(_mm_mul_pd(tmp_4, tmp_5), _mm_set1_pd\r\n        (rtb_MultiportSwitch1_f)), _mm_mul_pd(_mm_mul_pd(tmp_5, tmp_6),\r\n        _mm_set1_pd(rtb_Switch_m_idx_0))), _mm_mul_pd(_mm_mul_pd(tmp_7, tmp_5),\r\n        _mm_set1_pd(rtb_MultiportSwitch1_idx_2))), _mm_mul_pd(_mm_mul_pd(tmp,\r\n        tmp_5), _mm_set1_pd(rtb_MultiportSwitch1_idx_3))), _mm_add_pd(_mm_add_pd\r\n        (_mm_add_pd(_mm_mul_pd(tmp_0, _mm_set1_pd(rtb_Mult1_idx_1)), _mm_mul_pd\r\n                    (tmp_1, _mm_set1_pd(rtb_Gain2_l))), _mm_mul_pd(tmp_2,\r\n        _mm_set1_pd(rtb_Mult1_idx_0))), _mm_mul_pd(tmp_3, _mm_set1_pd\r\n        (rtb_Saturation)))));\r\n    }\r\n  } else {\r\n    rtb_MultiportSwitch[0] = rtDW.fluxes_DSTATE[0];\r\n    rtb_MultiportSwitch[1] = rtDW.fluxes_DSTATE[1];\r\n    rtb_MultiportSwitch[2] = rtDW.fluxes_DSTATE[2];\r\n    rtb_MultiportSwitch[3] = rtDW.fluxes_DSTATE[3];\r\n  }\r\n\r\n  /* End of Switch: '<S45>/IC' */\r\n  for (i = 0; i <= 0; i += 2) {\r\n    /* Gain: '<S22>/Gain1' incorporates:\r\n     *  Gain: '<S22>/Gain3'\r\n     */\r\n    _mm_storeu_pd(&rtb_MathFunction[i], _mm_mul_pd(_mm_add_pd(_mm_add_pd\r\n      (_mm_mul_pd(_mm_loadu_pd(&rtConstP.Gain3_Gain[i + 3]), _mm_set1_pd(isb_g)),\r\n       _mm_mul_pd(_mm_loadu_pd(&rtConstP.Gain3_Gain[i]), _mm_set1_pd\r\n                  (rtb_unitconversion_idx_9))), _mm_mul_pd(_mm_loadu_pd\r\n      (&rtConstP.Gain3_Gain[i + 6]), _mm_set1_pd(rtb_unitconversion_idx_11))),\r\n      _mm_set1_pd(0.66666666666666663)));\r\n  }\r\n\r\n  for (i = 2; i < 3; i++) {\r\n    /* Gain: '<S22>/Gain1' incorporates:\r\n     *  Gain: '<S22>/Gain3'\r\n     */\r\n    rtb_MathFunction[i] = ((rtConstP.Gain3_Gain[i + 3] * isb_g +\r\n      rtConstP.Gain3_Gain[i] * rtb_unitconversion_idx_9) + rtConstP.Gain3_Gain[i\r\n      + 6] * rtb_unitconversion_idx_11) * 0.66666666666666663;\r\n  }\r\n\r\n  /* Gain: '<S37>/1\\p1' */\r\n  rtb_unitconversion_idx_11 = 157.07963267948966 * rtb_phimd;\r\n\r\n  /* ComplexToMagnitudeAngle: '<S1>/Complex to Magnitude-Angle' incorporates:\r\n   *  RealImagToComplex: '<S1>/Real-Imag to Complex'\r\n   */\r\n  rtb_unitconversion_idx_9 = rt_atan2d_snf(TrigonometricFunction_o2,\r\n    rtb_unitconversion_idx_6);\r\n\r\n  /* Outputs for Enabled SubSystem: '<S27>/Subsystem - pi//2 delay' incorporates:\r\n   *  EnablePort: '<S30>/Enable'\r\n   */\r\n  /* Outputs for Enabled SubSystem: '<S21>/Subsystem - pi//2 delay' incorporates:\r\n   *  EnablePort: '<S25>/Enable'\r\n   */\r\n  /* Fcn: '<S25>/Fcn' incorporates:\r\n   *  Fcn: '<S25>/Fcn1'\r\n   *  Fcn: '<S30>/Fcn'\r\n   */\r\n  isb_g = cos(rtb_unitconversion_idx_9);\r\n  rtb_Gain2_l = sin(rtb_unitconversion_idx_9);\r\n\r\n  /* End of Outputs for SubSystem: '<S27>/Subsystem - pi//2 delay' */\r\n\r\n  /* Switch: '<S21>/Switch' incorporates:\r\n   *  Fcn: '<S25>/Fcn'\r\n   *  Fcn: '<S25>/Fcn1'\r\n   */\r\n  rtb_Mult1_idx_0 = rtb_MathFunction[0] * rtb_Gain2_l - rtb_MathFunction[1] *\r\n    isb_g;\r\n  rtb_Mult1_idx_1 = rtb_MathFunction[0] * isb_g + rtb_MathFunction[1] *\r\n    rtb_Gain2_l;\r\n\r\n  /* End of Outputs for SubSystem: '<S21>/Subsystem - pi//2 delay' */\r\n\r\n  /* Outputs for Enabled SubSystem: '<S27>/Subsystem - pi//2 delay' incorporates:\r\n   *  EnablePort: '<S30>/Enable'\r\n   */\r\n  /* Switch: '<S27>/Switch' incorporates:\r\n   *  Fcn: '<S30>/Fcn'\r\n   */\r\n  rtb_Switch_m_idx_0 = rtb_unitconversion_idx_6 * rtb_Gain2_l -\r\n    TrigonometricFunction_o2 * isb_g;\r\n\r\n  /* End of Outputs for SubSystem: '<S27>/Subsystem - pi//2 delay' */\r\n  if (rtM->Timing.TaskCounters.TID[1] == 0) {\r\n    /* DigitalClock: '<S10>/Clock' */\r\n    rtDW.Clock = ((rtM->Timing.clockTick1) * 1.0);\r\n  }\r\n\r\n  /* Switch: '<S10>/Switch' incorporates:\r\n   *  Product: '<S10>/Divide'\r\n   */\r\n  if (rtDW.Clock > 0.0001) {\r\n    TrigonometricFunction_o2 = rtb_Mult1_idx_1 / rtb_Mult1_idx_0;\r\n  } else {\r\n    TrigonometricFunction_o2 = 0.0;\r\n  }\r\n\r\n  /* End of Switch: '<S10>/Switch' */\r\n\r\n  /* Gain: '<S10>/Gain' */\r\n  rtb_unitconversion_idx_6 = 6.23416784551107 * TrigonometricFunction_o2;\r\n\r\n  /* Gain: '<S10>/Gain1' */\r\n  TrigonometricFunction_o2 = 2.0 * rtb_unitconversion_idx_11;\r\n\r\n  /* Sum: '<S10>/Add' */\r\n  rtb_unitconversion_idx_6 += TrigonometricFunction_o2;\r\n\r\n  /* Sum: '<S4>/Sum1' incorporates:\r\n   *  Constant: '<S1>/Constant'\r\n   *  DiscreteIntegrator: '<S4>/Discrete-Time Integrator'\r\n   *  Gain: '<S10>/Gain2'\r\n   *  Gain: '<S10>/Gain3'\r\n   *  Gain: '<S10>/Gain4'\r\n   *  Gain: '<S10>/Gain5'\r\n   *  Gain: '<S4>/Gain'\r\n   *  Product: '<S10>/Product'\r\n   *  Sum: '<S10>/Add2'\r\n   *  Sum: '<S1>/Sum2'\r\n   *  Sum: '<S4>/Sum'\r\n   */\r\n  isb_g = ((0.0 - rtb_unitconversion_idx_6 * rtb_Mult1_idx_1 *\r\n            0.058148172073290927 * 0.060793999999999994) - 0.022361 *\r\n           rtb_Switch_m_idx_0 * 270.56932718377169) + ((9.4040441629117311 -\r\n    rtb_Mult1_idx_0) * 15.7034858759281 + rtDW.DiscreteTimeIntegrator_DSTATE);\r\n\r\n  /* Saturate: '<S4>/Saturation' */\r\n  if (isb_g > 359.2584956081995) {\r\n    rtb_Gain2_l = 359.2584956081995;\r\n  } else if (isb_g < -359.2584956081995) {\r\n    rtb_Gain2_l = -359.2584956081995;\r\n  } else {\r\n    rtb_Gain2_l = isb_g;\r\n  }\r\n\r\n  /* End of Saturate: '<S4>/Saturation' */\r\n\r\n  /* Sum: '<S4>/Sum3' incorporates:\r\n   *  Constant: '<S1>/Constant'\r\n   *  Gain: '<S4>/Gain2'\r\n   *  Sum: '<S1>/Sum2'\r\n   *  Sum: '<S4>/Sum2'\r\n   */\r\n  isb_g = (9.4040441629117311 - rtb_Mult1_idx_0) - (isb_g - rtb_Gain2_l) *\r\n    0.063680128596982508;\r\n\r\n  /* Product: '<S10>/Product1' */\r\n  rtb_Mult1_idx_0 *= rtb_unitconversion_idx_6;\r\n\r\n  /* Sum: '<S6>/Sum' incorporates:\r\n   *  DiscreteIntegrator: '<S6>/Discrete-Time Integrator'\r\n   *  Gain: '<S6>/Gain'\r\n   *  Sum: '<S1>/Sum'\r\n   */\r\n  rtb_unitconversion_idx_6 = (52.359877559829883 - rtb_unitconversion_idx_11) *\r\n    13.859596918105916 + rtDW.DiscreteTimeIntegrator_DSTATE_b;\r\n\r\n  /* Saturate: '<S6>/Saturation' */\r\n  if (rtb_unitconversion_idx_6 > 48.400544337535294) {\r\n    rtb_Saturation = 48.400544337535294;\r\n  } else if (rtb_unitconversion_idx_6 < -48.400544337535294) {\r\n    rtb_Saturation = -48.400544337535294;\r\n  } else {\r\n    rtb_Saturation = rtb_unitconversion_idx_6;\r\n  }\r\n\r\n  /* End of Saturate: '<S6>/Saturation' */\r\n\r\n  /* Sum: '<S1>/Sum1' incorporates:\r\n   *  Gain: '<S6>/Gain2'\r\n   */\r\n  rtb_Mult1_idx_1 = 0.61904294884986732 * rtb_Saturation - rtb_Mult1_idx_1;\r\n\r\n  /* Sum: '<S5>/Sum1' incorporates:\r\n   *  DiscreteIntegrator: '<S5>/Discrete-Time Integrator'\r\n   *  Gain: '<S10>/Gain6'\r\n   *  Gain: '<S10>/Gain7'\r\n   *  Gain: '<S10>/Gain8'\r\n   *  Gain: '<S5>/Gain'\r\n   *  Product: '<S10>/Product2'\r\n   *  Sum: '<S10>/Add1'\r\n   *  Sum: '<S5>/Sum'\r\n   */\r\n  TrigonometricFunction_o2 = (0.058148172073290927 * rtb_Mult1_idx_0 *\r\n    0.060793999999999994 + rtb_Switch_m_idx_0 * TrigonometricFunction_o2 *\r\n    0.97049050893180255) + (15.7034858759281 * rtb_Mult1_idx_1 +\r\n    rtDW.DiscreteTimeIntegrator_DSTATE_l);\r\n\r\n  /* Saturate: '<S5>/Saturation' */\r\n  if (TrigonometricFunction_o2 > 359.2584956081995) {\r\n    rtb_Mult1_idx_0 = 359.2584956081995;\r\n  } else if (TrigonometricFunction_o2 < -359.2584956081995) {\r\n    rtb_Mult1_idx_0 = -359.2584956081995;\r\n  } else {\r\n    rtb_Mult1_idx_0 = TrigonometricFunction_o2;\r\n  }\r\n\r\n  /* End of Saturate: '<S5>/Saturation' */\r\n\r\n  /* Fcn: '<S7>/alpha' incorporates:\r\n   *  Fcn: '<S7>/beta'\r\n   */\r\n  rtb_Switch_m_idx_0 = sin(1.5707963267948966 - rtb_unitconversion_idx_9);\r\n  rtb_MultiportSwitch1_idx_2 = cos(1.5707963267948966 - rtb_unitconversion_idx_9);\r\n  rtb_MultiportSwitch1_f = rtb_MultiportSwitch1_idx_2 * rtb_Gain2_l +\r\n    rtb_Switch_m_idx_0 * rtb_Mult1_idx_0;\r\n\r\n  /* Gain: '<S11>/Gain' */\r\n  rtb_unitconversion_idx_9 = 1.7320508075688772 * rtb_MultiportSwitch1_f;\r\n\r\n  /* Fcn: '<S7>/beta' */\r\n  rtb_Gain2_l = -rtb_Switch_m_idx_0 * rtb_Gain2_l + rtb_MultiportSwitch1_idx_2 *\r\n    rtb_Mult1_idx_0;\r\n\r\n  /* Sum: '<S11>/Subtract2' incorporates:\r\n   *  Constant: '<S17>/Constant'\r\n   *  Constant: '<S18>/Constant'\r\n   *  Constant: '<S19>/Constant'\r\n   *  Gain: '<S11>/Gain2'\r\n   *  Gain: '<S11>/Gain3'\r\n   *  RelationalOperator: '<S17>/Compare'\r\n   *  RelationalOperator: '<S18>/Compare'\r\n   *  RelationalOperator: '<S19>/Compare'\r\n   *  Sum: '<S11>/Subtract'\r\n   *  Sum: '<S11>/Subtract1'\r\n   */\r\n  rtb_Subtract2_m = (uint8_T)(((uint32_T)((rtb_unitconversion_idx_9 -\r\n    rtb_Gain2_l > 0.0) << 1) + (uint32_T)(rtb_Gain2_l > 0.0)) + (uint32_T)(((0.0\r\n    - rtb_unitconversion_idx_9) - rtb_Gain2_l > 0.0) << 2));\r\n\r\n  /* Gain: '<S16>/Gain' */\r\n  rtb_Switch_m_idx_0 = 3.4641016151377545E-7 * rtb_Gain2_l;\r\n\r\n  /* Gain: '<S16>/Gain2' */\r\n  rtb_Gain2_l *= 0.5;\r\n\r\n  /* Gain: '<S16>/Gain1' */\r\n  rtb_MultiportSwitch1_f *= 0.8660254037844386;\r\n\r\n  /* MultiPortSwitch: '<S12>/Multiport Switch' incorporates:\r\n   *  Gain: '<S12>/Gain'\r\n   *  Gain: '<S12>/Gain1'\r\n   *  Gain: '<S12>/Gain2'\r\n   *  Gain: '<S16>/Gain3'\r\n   *  Gain: '<S16>/Gain4'\r\n   *  Sum: '<S16>/Subtract'\r\n   *  Sum: '<S16>/Subtract1'\r\n   */\r\n  switch (rtb_Subtract2_m) {\r\n   case 1:\r\n    rtb_unitconversion_idx_9 = (rtb_Gain2_l - rtb_MultiportSwitch1_f) *\r\n      3.4641016151377545E-7;\r\n\r\n    /* MultiPortSwitch: '<S12>/Multiport Switch1' incorporates:\r\n     *  Gain: '<S16>/Gain3'\r\n     *  Gain: '<S16>/Gain4'\r\n     *  Sum: '<S16>/Subtract'\r\n     *  Sum: '<S16>/Subtract1'\r\n     */\r\n    rtb_MultiportSwitch1_f = (rtb_Gain2_l + rtb_MultiportSwitch1_f) *\r\n      3.4641016151377545E-7;\r\n    break;\r\n\r\n   case 2:\r\n    rtb_unitconversion_idx_9 = (rtb_Gain2_l + rtb_MultiportSwitch1_f) *\r\n      3.4641016151377545E-7;\r\n\r\n    /* MultiPortSwitch: '<S12>/Multiport Switch1' incorporates:\r\n     *  Gain: '<S12>/Gain'\r\n     *  Gain: '<S16>/Gain3'\r\n     *  Sum: '<S16>/Subtract'\r\n     */\r\n    rtb_MultiportSwitch1_f = -rtb_Switch_m_idx_0;\r\n    break;\r\n\r\n   case 3:\r\n    rtb_unitconversion_idx_9 = -((rtb_Gain2_l - rtb_MultiportSwitch1_f) *\r\n      3.4641016151377545E-7);\r\n\r\n    /* MultiPortSwitch: '<S12>/Multiport Switch1' incorporates:\r\n     *  Gain: '<S12>/Gain2'\r\n     *  Gain: '<S16>/Gain4'\r\n     *  Sum: '<S16>/Subtract1'\r\n     */\r\n    rtb_MultiportSwitch1_f = rtb_Switch_m_idx_0;\r\n    break;\r\n\r\n   case 4:\r\n    rtb_unitconversion_idx_9 = -rtb_Switch_m_idx_0;\r\n\r\n    /* MultiPortSwitch: '<S12>/Multiport Switch1' incorporates:\r\n     *  Gain: '<S12>/Gain'\r\n     *  Gain: '<S16>/Gain4'\r\n     *  Sum: '<S16>/Subtract1'\r\n     */\r\n    rtb_MultiportSwitch1_f = (rtb_Gain2_l - rtb_MultiportSwitch1_f) *\r\n      3.4641016151377545E-7;\r\n    break;\r\n\r\n   case 5:\r\n    rtb_unitconversion_idx_9 = rtb_Switch_m_idx_0;\r\n\r\n    /* MultiPortSwitch: '<S12>/Multiport Switch1' incorporates:\r\n     *  Gain: '<S12>/Gain1'\r\n     *  Gain: '<S16>/Gain3'\r\n     *  Sum: '<S16>/Subtract'\r\n     */\r\n    rtb_MultiportSwitch1_f = -((rtb_Gain2_l + rtb_MultiportSwitch1_f) *\r\n      3.4641016151377545E-7);\r\n    break;\r\n\r\n   default:\r\n    rtb_unitconversion_idx_9 = -((rtb_Gain2_l + rtb_MultiportSwitch1_f) *\r\n      3.4641016151377545E-7);\r\n\r\n    /* MultiPortSwitch: '<S12>/Multiport Switch1' incorporates:\r\n     *  Gain: '<S12>/Gain1'\r\n     *  Gain: '<S12>/Gain2'\r\n     *  Gain: '<S16>/Gain3'\r\n     *  Gain: '<S16>/Gain4'\r\n     *  Sum: '<S16>/Subtract'\r\n     *  Sum: '<S16>/Subtract1'\r\n     */\r\n    rtb_MultiportSwitch1_f = -((rtb_Gain2_l - rtb_MultiportSwitch1_f) *\r\n      3.4641016151377545E-7);\r\n    break;\r\n  }\r\n\r\n  /* End of MultiPortSwitch: '<S12>/Multiport Switch' */\r\n\r\n  /* Gain: '<S14>/Gain' incorporates:\r\n   *  Constant: '<S14>/Constant'\r\n   *  Sum: '<S14>/Subtract'\r\n   */\r\n  rtb_Gain2_l = ((0.0001 - rtb_unitconversion_idx_9) - rtb_MultiportSwitch1_f) *\r\n    0.25;\r\n\r\n  /* Sum: '<S14>/Subtract1' incorporates:\r\n   *  Gain: '<S14>/Gain1'\r\n   */\r\n  rtb_Switch_m_idx_0 = 0.5 * rtb_unitconversion_idx_9 + rtb_Gain2_l;\r\n\r\n  /* Sum: '<S14>/Subtract2' incorporates:\r\n   *  Gain: '<S14>/Gain2'\r\n   */\r\n  rtb_MultiportSwitch1_f = 0.5 * rtb_MultiportSwitch1_f + rtb_Switch_m_idx_0;\r\n\r\n  /* MultiPortSwitch: '<S13>/Multiport Switch1' */\r\n  switch (rtb_Subtract2_m) {\r\n   case 1:\r\n    rtb_unitconversion_idx_9 = rtb_Gain2_l;\r\n    break;\r\n\r\n   case 2:\r\n    rtb_unitconversion_idx_9 = rtb_MultiportSwitch1_f;\r\n    break;\r\n\r\n   case 3:\r\n    rtb_unitconversion_idx_9 = rtb_Switch_m_idx_0;\r\n    break;\r\n\r\n   case 4:\r\n    rtb_unitconversion_idx_9 = rtb_Switch_m_idx_0;\r\n    break;\r\n\r\n   case 5:\r\n    rtb_unitconversion_idx_9 = rtb_Gain2_l;\r\n    break;\r\n\r\n   default:\r\n    rtb_unitconversion_idx_9 = rtb_MultiportSwitch1_f;\r\n    break;\r\n  }\r\n\r\n  /* End of MultiPortSwitch: '<S13>/Multiport Switch1' */\r\n  if (rtM->Timing.TaskCounters.TID[1] == 0) {\r\n    /* Lookup: '<S20>/Look-Up Table' incorporates:\r\n     *  DigitalClock: '<S20>/Digital Clock'\r\n     *  Fcn: '<S20>/Fcn1'\r\n     */\r\n    rtDW.LookUpTable = rt_Lookup(&rtConstP.LookUpTable_XData[0], 3, rt_remd_snf\r\n      (((rtM->Timing.clockTick1) * 1.0), 0.0001), &rtConstP.LookUpTable_YData[0]);\r\n  }\r\n\r\n  /* RelationalOperator: '<S15>/Relational Operator1' */\r\n  rtb_LogicalOperator2 = (rtDW.LookUpTable > rtb_unitconversion_idx_9);\r\n\r\n  /* DataTypeConversion: '<S15>/Cast To Double2' incorporates:\r\n   *  Concatenate: '<S15>/Vector Concatenate'\r\n   */\r\n  rtDW.VectorConcatenate[2] = rtb_LogicalOperator2;\r\n\r\n  /* DataTypeConversion: '<S15>/Cast To Double3' incorporates:\r\n   *  Concatenate: '<S15>/Vector Concatenate'\r\n   *  Logic: '<S15>/Logical Operator1'\r\n   */\r\n  rtDW.VectorConcatenate[3] = !rtb_LogicalOperator2;\r\n\r\n  /* MultiPortSwitch: '<S13>/Multiport Switch3' */\r\n  switch (rtb_Subtract2_m) {\r\n   case 1:\r\n    rtb_unitconversion_idx_9 = rtb_Switch_m_idx_0;\r\n    break;\r\n\r\n   case 2:\r\n    rtb_unitconversion_idx_9 = rtb_Gain2_l;\r\n    break;\r\n\r\n   case 3:\r\n    rtb_unitconversion_idx_9 = rtb_Gain2_l;\r\n    break;\r\n\r\n   case 4:\r\n    rtb_unitconversion_idx_9 = rtb_MultiportSwitch1_f;\r\n    break;\r\n\r\n   case 5:\r\n    rtb_unitconversion_idx_9 = rtb_MultiportSwitch1_f;\r\n    break;\r\n\r\n   default:\r\n    rtb_unitconversion_idx_9 = rtb_Switch_m_idx_0;\r\n    break;\r\n  }\r\n\r\n  /* End of MultiPortSwitch: '<S13>/Multiport Switch3' */\r\n\r\n  /* RelationalOperator: '<S15>/Relational Operator' */\r\n  rtb_LogicalOperator2 = (rtDW.LookUpTable > rtb_unitconversion_idx_9);\r\n\r\n  /* DataTypeConversion: '<S15>/Cast To Double' incorporates:\r\n   *  Concatenate: '<S15>/Vector Concatenate'\r\n   */\r\n  rtDW.VectorConcatenate[0] = rtb_LogicalOperator2;\r\n\r\n  /* DataTypeConversion: '<S15>/Cast To Double1' incorporates:\r\n   *  Concatenate: '<S15>/Vector Concatenate'\r\n   *  Logic: '<S15>/Logical Operator'\r\n   */\r\n  rtDW.VectorConcatenate[1] = !rtb_LogicalOperator2;\r\n\r\n  /* MultiPortSwitch: '<S13>/Multiport Switch2' */\r\n  switch (rtb_Subtract2_m) {\r\n   case 1:\r\n    rtb_unitconversion_idx_9 = rtb_MultiportSwitch1_f;\r\n    break;\r\n\r\n   case 2:\r\n    rtb_unitconversion_idx_9 = rtb_Switch_m_idx_0;\r\n    break;\r\n\r\n   case 3:\r\n    rtb_unitconversion_idx_9 = rtb_MultiportSwitch1_f;\r\n    break;\r\n\r\n   case 4:\r\n    rtb_unitconversion_idx_9 = rtb_Gain2_l;\r\n    break;\r\n\r\n   case 5:\r\n    rtb_unitconversion_idx_9 = rtb_Switch_m_idx_0;\r\n    break;\r\n\r\n   default:\r\n    rtb_unitconversion_idx_9 = rtb_Gain2_l;\r\n    break;\r\n  }\r\n\r\n  /* End of MultiPortSwitch: '<S13>/Multiport Switch2' */\r\n\r\n  /* RelationalOperator: '<S15>/Relational Operator2' */\r\n  rtb_LogicalOperator2 = (rtDW.LookUpTable > rtb_unitconversion_idx_9);\r\n\r\n  /* DataTypeConversion: '<S15>/Cast To Double4' incorporates:\r\n   *  Concatenate: '<S15>/Vector Concatenate'\r\n   */\r\n  rtDW.VectorConcatenate[4] = rtb_LogicalOperator2;\r\n\r\n  /* DataTypeConversion: '<S15>/Cast To Double5' incorporates:\r\n   *  Concatenate: '<S15>/Vector Concatenate'\r\n   *  Logic: '<S15>/Logical Operator2'\r\n   */\r\n  rtDW.VectorConcatenate[5] = !rtb_LogicalOperator2;\r\n\r\n  /* Gain: '<S37>/1_2H' incorporates:\r\n   *  Gain: '<S37>/F'\r\n   *  Gain: '<S42>/1-1'\r\n   *  Product: '<S42>/Mult1'\r\n   *  Sum: '<S37>/Sum'\r\n   *  Sum: '<S42>/Sum2'\r\n   *  UnitDelay: '<S45>/fluxes'\r\n   */\r\n  rtb_Gain2_l = (((rtb_Sum2[0] * rtDW.fluxes_DSTATE[1] + rtDW.fluxes_DSTATE[0] *\r\n                   -rtb_Sum2[1]) - 1.6981581911296177) - 0.0 * rtb_phimd) *\r\n    5.9506091980420592;\r\n\r\n  /* DiscreteIntegrator: '<S37>/Rotor speed(wm)' */\r\n  if (rtDW.Rotorspeedwm_SYSTEM_ENABLE != 0) {\r\n    /* DiscreteIntegrator: '<S37>/Rotor speed(wm)' */\r\n    rtb_unitconversion_idx_9 = rtDW.Rotorspeedwm_DSTATE;\r\n  } else {\r\n    /* DiscreteIntegrator: '<S37>/Rotor speed(wm)' */\r\n    rtb_unitconversion_idx_9 = 5.0E-6 * rtb_Gain2_l + rtDW.Rotorspeedwm_DSTATE;\r\n  }\r\n\r\n  /* End of DiscreteIntegrator: '<S37>/Rotor speed(wm)' */\r\n\r\n  /* Update for UnitDelay: '<S45>/fluxes' */\r\n  rtDW.fluxes_DSTATE[0] = rtb_MultiportSwitch[0];\r\n  rtDW.fluxes_DSTATE[1] = rtb_MultiportSwitch[1];\r\n  rtDW.fluxes_DSTATE[2] = rtb_MultiportSwitch[2];\r\n  rtDW.fluxes_DSTATE[3] = rtb_MultiportSwitch[3];\r\n\r\n  /* Update for DiscreteIntegrator: '<S37>/Rotor angle thetam' incorporates:\r\n   *  Gain: '<S37>/web_psb'\r\n   */\r\n  rtDW.Rotoranglethetam_DSTATE += 314.15926535897933 * rtb_phimd * 1.0E-5;\r\n\r\n  /* Update for UnitDelay: '<S60>/wm_delay' */\r\n  rtDW.wm_delay_DSTATE = rtb_unitconversion_idx_9;\r\n\r\n  /* Update for UnitDelay: '<S60>/wm_predict' */\r\n  rtDW.wm_predict_DSTATE = rtb_Phisat;\r\n\r\n  /* Update for S-Function (sfun_spssw_discc): '<S64>/State-Space' incorporates:\r\n   *  Constant: '<S61>/DC'\r\n   */\r\n  {\r\n    int_T *gState = (int_T*)rtDW.StateSpace_PWORK.G_STATE;\r\n\r\n    /* Store switch gates values for next step */\r\n    {\r\n      int_T i1;\r\n      const real_T *u1 = &rtDW.VectorConcatenate[0];\r\n      for (i1=0; i1 < 6; i1++) {\r\n        *(gState++) = (int_T) u1[i1];\r\n      }\r\n    }\r\n  }\r\n\r\n  /* Update for UnitDelay: '<S45>/voltages' incorporates:\r\n   *  MultiPortSwitch: '<S39>/Multiport Switch'\r\n   *  MultiPortSwitch: '<S39>/Multiport Switch1'\r\n   */\r\n  rtDW.voltages_DSTATE[0] = rtb_u_Vb_idx_3;\r\n  rtDW.voltages_DSTATE[2] = TrigonometricFunction_o1;\r\n  rtDW.voltages_DSTATE[1] = vds_m;\r\n  rtDW.voltages_DSTATE[3] = vdr_c;\r\n\r\n  /* Update for DiscreteIntegrator: '<S4>/Discrete-Time Integrator' incorporates:\r\n   *  Gain: '<S4>/Gain1'\r\n   */\r\n  rtDW.DiscreteTimeIntegrator_DSTATE += 2896.152729496454 * isb_g * 1.0E-5;\r\n\r\n  /* Update for DiscreteIntegrator: '<S5>/Discrete-Time Integrator' incorporates:\r\n   *  Gain: '<S5>/Gain1'\r\n   *  Gain: '<S5>/Gain2'\r\n   *  Sum: '<S5>/Sum2'\r\n   *  Sum: '<S5>/Sum3'\r\n   */\r\n  rtDW.DiscreteTimeIntegrator_DSTATE_l += (rtb_Mult1_idx_1 -\r\n    (TrigonometricFunction_o2 - rtb_Mult1_idx_0) * 0.063680128596982508) *\r\n    2896.152729496454 * 1.0E-5;\r\n\r\n  /* Update for DiscreteIntegrator: '<S6>/Discrete-Time Integrator' incorporates:\r\n   *  Gain: '<S6>/Gain1'\r\n   *  Gain: '<S6>/Gain3'\r\n   *  Sum: '<S1>/Sum'\r\n   *  Sum: '<S6>/Sum1'\r\n   *  Sum: '<S6>/Sum2'\r\n   */\r\n  rtDW.DiscreteTimeIntegrator_DSTATE_b += ((52.359877559829883 -\r\n    rtb_unitconversion_idx_11) - (rtb_unitconversion_idx_6 - rtb_Saturation) *\r\n    0.072152170507471164) * 2462.6907165410848 * 1.0E-5;\r\n\r\n  /* Update for DiscreteIntegrator: '<S37>/Rotor speed(wm)' */\r\n  rtDW.Rotorspeedwm_SYSTEM_ENABLE = 0U;\r\n  rtDW.Rotorspeedwm_DSTATE = 5.0E-6 * rtb_Gain2_l + rtb_unitconversion_idx_9;\r\n\r\n  /* Update absolute time for base rate */\r\n  /* The \"clockTick0\" counts the number of times the code of this task has\r\n   * been executed. The resolution of this integer timer is 1.0E-5, which is the step size\r\n   * of the task. Size of \"clockTick0\" ensures timer will not overflow during the\r\n   * application lifespan selected.\r\n   * Timer of this task consists of two 32 bit unsigned integers.\r\n   * The two integers represent the low bits Timing.clockTick0 and the high bits\r\n   * Timing.clockTickH0. When the low bit overflows to 0, the high bits increment.\r\n   */\r\n  rtM->Timing.clockTick0++;\r\n  if (!rtM->Timing.clockTick0) {\r\n    rtM->Timing.clockTickH0++;\r\n  }\r\n\r\n  if (rtM->Timing.TaskCounters.TID[1] == 0) {\r\n    /* Update absolute timer for sample time: [1.0s, 0.0s] */\r\n    /* The \"clockTick1\" counts the number of times the code of this task has\r\n     * been executed. The resolution of this integer timer is 1.0, which is the step size\r\n     * of the task. Size of \"clockTick1\" ensures timer will not overflow during the\r\n     * application lifespan selected.\r\n     */\r\n    rtM->Timing.clockTick1++;\r\n  }\r\n\r\n  rate_scheduler();\r\n}\r\n\r\n/* Model initialize function */\r\nvoid sumAll_initialize(void)\r\n{\r\n  /* Registration code */\r\n\r\n  /* initialize non-finites */\r\n  rt_InitInfAndNaN(sizeof(real_T));\r\n\r\n  /* Start for S-Function (sfun_spssw_discc): '<S64>/State-Space' incorporates:\r\n   *  Constant: '<S61>/DC'\r\n   */\r\n\r\n  /* S-Function block: <S64>/State-Space */\r\n  {\r\n    rtDW.StateSpace_PWORK.DS = (real_T*)calloc(8 * 9, sizeof(real_T));\r\n    rtDW.StateSpace_PWORK.DX_COL = (real_T*)calloc(8, sizeof(real_T));\r\n    rtDW.StateSpace_PWORK.TMP2 = (real_T*)calloc(9, sizeof(real_T));\r\n    rtDW.StateSpace_PWORK.SWITCH_STATUS = (int_T*)calloc(6, sizeof(int_T));\r\n    rtDW.StateSpace_PWORK.SW_CHG = (int_T*)calloc(6, sizeof(int_T));\r\n    rtDW.StateSpace_PWORK.G_STATE = (int_T*)calloc(6, sizeof(int_T));\r\n    rtDW.StateSpace_PWORK.Y_SWITCH = (real_T*)calloc(6, sizeof(real_T));\r\n    rtDW.StateSpace_PWORK.SWITCH_TYPES = (int_T*)calloc(6, sizeof(int_T));\r\n    rtDW.StateSpace_PWORK.IDX_OUT_SW = (int_T*)calloc(6, sizeof(int_T));\r\n    rtDW.StateSpace_PWORK.SWITCH_STATUS_INIT = (int_T*)calloc(6, sizeof(int_T));\r\n    rtDW.StateSpace_PWORK.USWLAST = (real_T*)calloc(6, sizeof(real_T));\r\n  }\r\n\r\n  /* InitializeConditions for S-Function (sfun_spssw_discc): '<S64>/State-Space' incorporates:\r\n   *  Constant: '<S61>/DC'\r\n   */\r\n  {\r\n    int32_T i, j;\r\n    real_T *Ds = (real_T*)rtDW.StateSpace_PWORK.DS;\r\n\r\n    /* Copy and transpose D */\r\n    for (i=0; i<8; i++) {\r\n      for (j=0; j<9; j++)\r\n        Ds[i*9 + j] = (rtConstP.StateSpace_DS_param[i + j*8]);\r\n    }\r\n\r\n    {\r\n      /* Switches work vectors */\r\n      int_T *switch_status = (int_T*) rtDW.StateSpace_PWORK.SWITCH_STATUS;\r\n      int_T *gState = (int_T*)rtDW.StateSpace_PWORK.G_STATE;\r\n      real_T *yswitch = (real_T*)rtDW.StateSpace_PWORK.Y_SWITCH;\r\n      int_T *switchTypes = (int_T*)rtDW.StateSpace_PWORK.SWITCH_TYPES;\r\n      int_T *idxOutSw = (int_T*)rtDW.StateSpace_PWORK.IDX_OUT_SW;\r\n      int_T *switch_status_init = (int_T*)\r\n        rtDW.StateSpace_PWORK.SWITCH_STATUS_INIT;\r\n\r\n      /* Initialize work vectors */\r\n      switch_status[0] = 0;\r\n      switch_status_init[0] = 0;\r\n      gState[0] = (int_T) 0.0;\r\n      yswitch[0] = 1/0.001;\r\n      switchTypes[0] = (int_T)7.0;\r\n      idxOutSw[0] = ((int_T)0.0) - 1;\r\n      switch_status[1] = 0;\r\n      switch_status_init[1] = 0;\r\n      gState[1] = (int_T) 0.0;\r\n      yswitch[1] = 1/0.001;\r\n      switchTypes[1] = (int_T)7.0;\r\n      idxOutSw[1] = ((int_T)0.0) - 1;\r\n      switch_status[2] = 0;\r\n      switch_status_init[2] = 0;\r\n      gState[2] = (int_T) 0.0;\r\n      yswitch[2] = 1/0.001;\r\n      switchTypes[2] = (int_T)7.0;\r\n      idxOutSw[2] = ((int_T)0.0) - 1;\r\n      switch_status[3] = 0;\r\n      switch_status_init[3] = 0;\r\n      gState[3] = (int_T) 0.0;\r\n      yswitch[3] = 1/0.001;\r\n      switchTypes[3] = (int_T)7.0;\r\n      idxOutSw[3] = ((int_T)0.0) - 1;\r\n      switch_status[4] = 0;\r\n      switch_status_init[4] = 0;\r\n      gState[4] = (int_T) 0.0;\r\n      yswitch[4] = 1/0.001;\r\n      switchTypes[4] = (int_T)7.0;\r\n      idxOutSw[4] = ((int_T)0.0) - 1;\r\n      switch_status[5] = 0;\r\n      switch_status_init[5] = 0;\r\n      gState[5] = (int_T) 0.0;\r\n      yswitch[5] = 1/0.001;\r\n      switchTypes[5] = (int_T)7.0;\r\n      idxOutSw[5] = ((int_T)0.0) - 1;\r\n    }\r\n  }\r\n\r\n  /* Enable for DiscreteIntegrator: '<S37>/Rotor speed(wm)' */\r\n  rtDW.Rotorspeedwm_SYSTEM_ENABLE = 1U;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"sumAll.h","type":"header","group":"model","path":"C:\\Users\\tql\\OneDrive\\文档\\中期答辩\\伺服电机\\异步电机\\拆分版\\sumAll_ert_rtw","tag":"","groupDisplay":"模型文件","code":"/*\r\n * File: sumAll.h\r\n *\r\n * Code generated for Simulink model 'sumAll'.\r\n *\r\n * Model version                  : 1.6\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Thu Oct 10 21:22:43 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Linux 64)\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_sumAll_h_\r\n#define RTW_HEADER_sumAll_h_\r\n#ifndef sumAll_COMMON_INCLUDES_\r\n#define sumAll_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* sumAll_COMMON_INCLUDES_ */\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM RT_MODEL;\r\n\r\n/* Block signals and states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  real_T ib[4];                        /* '<S40>/ib' */\r\n  real_T StateSpace_o1[8];             /* '<S64>/State-Space' */\r\n  real_T StateSpace_o2[6];             /* '<S64>/State-Space' */\r\n  real_T VectorConcatenate[6];         /* '<S15>/Vector Concatenate' */\r\n  real_T W21wr[16];                    /* '<S58>/W(2,1)=-wr' */\r\n  real_T Constant_n[2];                /* '<S58>/Constant' */\r\n  real_T fluxes_DSTATE[4];             /* '<S45>/fluxes' */\r\n  real_T fluxes_DSTATE_m[4];           /* '<S43>/fluxes' */\r\n  real_T voltages_DSTATE[4];           /* '<S45>/voltages' */\r\n  real_T inversion_DWORK4[16];         /* '<S49>/inversion' */\r\n  real_T inversion_DWORK4_c[16];       /* '<S44>/inversion' */\r\n  real_T Clock;                        /* '<S10>/Clock' */\r\n  real_T LookUpTable;                  /* '<S20>/Look-Up Table' */\r\n  real_T TrigonometricFunction_o1_a;   /* '<S58>/Trigonometric Function' */\r\n  real_T TrigonometricFunction_o2_a;   /* '<S58>/Trigonometric Function' */\r\n  real_T ira;                          /* '<S56>/ira' */\r\n  real_T irb;                          /* '<S56>/irb' */\r\n  real_T isa;                          /* '<S56>/isa' */\r\n  real_T isb;                          /* '<S56>/isb' */\r\n  real_T ira_d;                        /* '<S54>/ira' */\r\n  real_T irb_f;                        /* '<S54>/irb' */\r\n  real_T isa_p;                        /* '<S54>/isa' */\r\n  real_T isb_j;                        /* '<S54>/isb' */\r\n  real_T vdr;                          /* '<S52>/vdr' */\r\n  real_T vds;                          /* '<S52>/vds' */\r\n  real_T vqr;                          /* '<S52>/vqr' */\r\n  real_T vqs;                          /* '<S52>/vqs' */\r\n  real_T vdr_g;                        /* '<S50>/vdr' */\r\n  real_T vds_k;                        /* '<S50>/vds' */\r\n  real_T vqr_o;                        /* '<S50>/vqr' */\r\n  real_T vqs_m;                        /* '<S50>/vqs' */\r\n  real_T Rotoranglethetam_DSTATE;      /* '<S37>/Rotor angle thetam' */\r\n  real_T wm_delay_DSTATE;              /* '<S60>/wm_delay' */\r\n  real_T wm_predict_DSTATE;            /* '<S60>/wm_predict' */\r\n  real_T DiscreteTimeIntegrator_DSTATE;/* '<S4>/Discrete-Time Integrator' */\r\n  real_T DiscreteTimeIntegrator_DSTATE_l;/* '<S5>/Discrete-Time Integrator' */\r\n  real_T DiscreteTimeIntegrator_DSTATE_b;/* '<S6>/Discrete-Time Integrator' */\r\n  real_T Rotorspeedwm_DSTATE;          /* '<S37>/Rotor speed(wm)' */\r\n  struct {\r\n    void *AS;\r\n    void *BS;\r\n    void *CS;\r\n    void *DS;\r\n    void *DX_COL;\r\n    void *BD_COL;\r\n    void *TMP1;\r\n    void *TMP2;\r\n    void *XTMP;\r\n    void *SWITCH_STATUS;\r\n    void *SWITCH_STATUS_INIT;\r\n    void *SW_CHG;\r\n    void *G_STATE;\r\n    void *USWLAST;\r\n    void *XKM12;\r\n    void *XKP12;\r\n    void *XLAST;\r\n    void *ULAST;\r\n    void *IDX_SW_CHG;\r\n    void *Y_SWITCH;\r\n    void *SWITCH_TYPES;\r\n    void *IDX_OUT_SW;\r\n    void *SWITCH_TOPO_SAVED_IDX;\r\n    void *SWITCH_MAP;\r\n  } StateSpace_PWORK;                  /* '<S64>/State-Space' */\r\n\r\n  int_T StateSpace_IWORK[11];          /* '<S64>/State-Space' */\r\n  uint8_T Rotorspeedwm_SYSTEM_ENABLE;  /* '<S37>/Rotor speed(wm)' */\r\n  boolean_T sinthrcosthr_MODE;         /* '<S41>/sin(thr),cos(thr)' */\r\n  boolean_T Synchronousreferenceframe_MODE;/* '<S40>/Synchronous reference frame' */\r\n  boolean_T Rotorreferenceframe_MODE;  /* '<S40>/Rotor reference frame' */\r\n  boolean_T Synchronousreferenceframe_MOD_g;/* '<S39>/Synchronous reference frame' */\r\n  boolean_T Rotorreferenceframe_MODE_b;/* '<S39>/Rotor reference frame' */\r\n} DW;\r\n\r\n/* Constant parameters (default storage) */\r\ntypedef struct {\r\n  /* Expression: SM.Linv\r\n   * Referenced by: '<S38>/Constant2'\r\n   */\r\n  real_T Constant2_Value[16];\r\n\r\n  /* Expression: SM.RLinv\r\n   * Referenced by: '<S38>/Constant4'\r\n   */\r\n  real_T Constant4_Value[16];\r\n\r\n  /* Expression: eye(4,4)\r\n   * Referenced by: '<S49>/u5'\r\n   */\r\n  real_T u5_Value_p[16];\r\n\r\n  /* Expression: S.D\r\n   * Referenced by: '<S64>/State-Space'\r\n   */\r\n  real_T StateSpace_DS_param[72];\r\n\r\n  /* Expression: [ 1   -1/2   -1/2; 0   sqrt(3)/2   -sqrt(3)/2; 1/2  1/2  1/2 ]\r\n   * Referenced by: '<S22>/Gain3'\r\n   */\r\n  real_T Gain3_Gain[9];\r\n\r\n  /* Expression: rep_seq_t\r\n   * Referenced by: '<S20>/Look-Up Table'\r\n   */\r\n  real_T LookUpTable_XData[3];\r\n\r\n  /* Expression: rep_seq_y\r\n   * Referenced by: '<S20>/Look-Up Table'\r\n   */\r\n  real_T LookUpTable_YData[3];\r\n} ConstP;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM {\r\n  const char_T * volatile errorStatus;\r\n\r\n  /*\r\n   * Timing:\r\n   * The following substructure contains information regarding\r\n   * the timing information for the model.\r\n   */\r\n  struct {\r\n    uint32_T clockTick0;\r\n    uint32_T clockTickH0;\r\n    uint32_T clockTick1;\r\n    struct {\r\n      uint32_T TID[2];\r\n    } TaskCounters;\r\n  } Timing;\r\n};\r\n\r\n/* Block signals and states (default storage) */\r\nextern DW rtDW;\r\n\r\n/* External data declarations for dependent source files */\r\nextern const real_T sumAll_RGND;       /* real_T ground */\r\n\r\n/* Constant parameters (default storage) */\r\nextern const ConstP rtConstP;\r\n\r\n/* Model entry point functions */\r\nextern void sumAll_initialize(void);\r\nextern void sumAll_step(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL *const rtM;\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<S1>/Gain' : Unused code path elimination\r\n * Block '<S7>/0' : Unused code path elimination\r\n * Block '<S1>/Scope' : Unused code path elimination\r\n * Block '<S1>/Scope1' : Unused code path elimination\r\n * Block '<S1>/Scope2' : Unused code path elimination\r\n * Block '<S62>/0 4' : Unused code path elimination\r\n * Block '<S62>/1//Ron' : Unused code path elimination\r\n * Block '<S62>/Saturation' : Unused code path elimination\r\n * Block '<S62>/Switch' : Unused code path elimination\r\n * Block '<S62>/Unit Delay' : Unused code path elimination\r\n * Block '<S63>/Switch' : Unused code path elimination\r\n * Block '<S63>/Vf Devices & Clamping Diodes' : Unused code path elimination\r\n * Block '<S63>/Vf Diodes' : Unused code path elimination\r\n * Block '<S35>/Gain Vr_Vs' : Eliminated nontunable gain of 1\r\n * Block '<S35>/Gain Vr_Vs1' : Eliminated nontunable gain of 1\r\n * Block '<S62>/Data Type Conversion' : Eliminate redundant data type conversion\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'sumAll'\r\n * '<S1>'   : 'sumAll/ctrl'\r\n * '<S2>'   : 'sumAll/motor'\r\n * '<S3>'   : 'sumAll/powergui'\r\n * '<S4>'   : 'sumAll/ctrl/ACR_d'\r\n * '<S5>'   : 'sumAll/ctrl/ACR_q'\r\n * '<S6>'   : 'sumAll/ctrl/ASR'\r\n * '<S7>'   : 'sumAll/ctrl/Park to Clarke Angle Transform'\r\n * '<S8>'   : 'sumAll/ctrl/SVPWM'\r\n * '<S9>'   : 'sumAll/ctrl/abc to dq0'\r\n * '<S10>'  : 'sumAll/ctrl/feedforward'\r\n * '<S11>'  : 'sumAll/ctrl/SVPWM/Sector'\r\n * '<S12>'  : 'sumAll/ctrl/SVPWM/T1T2'\r\n * '<S13>'  : 'sumAll/ctrl/SVPWM/allocate'\r\n * '<S14>'  : 'sumAll/ctrl/SVPWM/fuse'\r\n * '<S15>'  : 'sumAll/ctrl/SVPWM/gating'\r\n * '<S16>'  : 'sumAll/ctrl/SVPWM/xyz'\r\n * '<S17>'  : 'sumAll/ctrl/SVPWM/Sector/准则A'\r\n * '<S18>'  : 'sumAll/ctrl/SVPWM/Sector/准则B'\r\n * '<S19>'  : 'sumAll/ctrl/SVPWM/Sector/准则C'\r\n * '<S20>'  : 'sumAll/ctrl/SVPWM/gating/triangle'\r\n * '<S21>'  : 'sumAll/ctrl/abc to dq0/Alpha-Beta-Zero to dq0'\r\n * '<S22>'  : 'sumAll/ctrl/abc to dq0/abc to Alpha-Beta-Zero'\r\n * '<S23>'  : 'sumAll/ctrl/abc to dq0/Alpha-Beta-Zero to dq0/Compare To Constant'\r\n * '<S24>'  : 'sumAll/ctrl/abc to dq0/Alpha-Beta-Zero to dq0/Compare To Constant1'\r\n * '<S25>'  : 'sumAll/ctrl/abc to dq0/Alpha-Beta-Zero to dq0/Subsystem - pi//2 delay'\r\n * '<S26>'  : 'sumAll/ctrl/abc to dq0/Alpha-Beta-Zero to dq0/Subsystem1'\r\n * '<S27>'  : 'sumAll/ctrl/feedforward/Alpha-Beta-Zero to dq0'\r\n * '<S28>'  : 'sumAll/ctrl/feedforward/Alpha-Beta-Zero to dq0/Compare To Constant'\r\n * '<S29>'  : 'sumAll/ctrl/feedforward/Alpha-Beta-Zero to dq0/Compare To Constant1'\r\n * '<S30>'  : 'sumAll/ctrl/feedforward/Alpha-Beta-Zero to dq0/Subsystem - pi//2 delay'\r\n * '<S31>'  : 'sumAll/ctrl/feedforward/Alpha-Beta-Zero to dq0/Subsystem1'\r\n * '<S32>'  : 'sumAll/motor/Asynchronous Machine SI Units'\r\n * '<S33>'  : 'sumAll/motor/DC Voltage Source2'\r\n * '<S34>'  : 'sumAll/motor/Universal Bridge1'\r\n * '<S35>'  : 'sumAll/motor/Asynchronous Machine SI Units/Electrical model'\r\n * '<S36>'  : 'sumAll/motor/Asynchronous Machine SI Units/Measurements'\r\n * '<S37>'  : 'sumAll/motor/Asynchronous Machine SI Units/Mechanical model'\r\n * '<S38>'  : 'sumAll/motor/Asynchronous Machine SI Units/Electrical model/Asynchronous Machine State-space model'\r\n * '<S39>'  : 'sumAll/motor/Asynchronous Machine SI Units/Electrical model/abc to dq  transformation'\r\n * '<S40>'  : 'sumAll/motor/Asynchronous Machine SI Units/Electrical model/dq to abc transformation'\r\n * '<S41>'  : 'sumAll/motor/Asynchronous Machine SI Units/Electrical model/sin,cos'\r\n * '<S42>'  : 'sumAll/motor/Asynchronous Machine SI Units/Electrical model/Asynchronous Machine State-space model/Electromagnetic Torque'\r\n * '<S43>'  : 'sumAll/motor/Asynchronous Machine SI Units/Electrical model/Asynchronous Machine State-space model/Flux Prediction'\r\n * '<S44>'  : 'sumAll/motor/Asynchronous Machine SI Units/Electrical model/Asynchronous Machine State-space model/Saturation'\r\n * '<S45>'  : 'sumAll/motor/Asynchronous Machine SI Units/Electrical model/Asynchronous Machine State-space model/phiqd_SR'\r\n * '<S46>'  : 'sumAll/motor/Asynchronous Machine SI Units/Electrical model/Asynchronous Machine State-space model/Saturation/Laq=Lad'\r\n * '<S47>'  : 'sumAll/motor/Asynchronous Machine SI Units/Electrical model/Asynchronous Machine State-space model/Saturation/Matrix L'\r\n * '<S48>'  : 'sumAll/motor/Asynchronous Machine SI Units/Electrical model/Asynchronous Machine State-space model/Saturation/phimqd'\r\n * '<S49>'  : 'sumAll/motor/Asynchronous Machine SI Units/Electrical model/Asynchronous Machine State-space model/phiqd_SR/Subsystem'\r\n * '<S50>'  : 'sumAll/motor/Asynchronous Machine SI Units/Electrical model/abc to dq  transformation/Rotor reference frame'\r\n * '<S51>'  : 'sumAll/motor/Asynchronous Machine SI Units/Electrical model/abc to dq  transformation/Stationary reference frame'\r\n * '<S52>'  : 'sumAll/motor/Asynchronous Machine SI Units/Electrical model/abc to dq  transformation/Synchronous reference frame'\r\n * '<S53>'  : 'sumAll/motor/Asynchronous Machine SI Units/Electrical model/abc to dq  transformation/transit'\r\n * '<S54>'  : 'sumAll/motor/Asynchronous Machine SI Units/Electrical model/dq to abc transformation/Rotor reference frame'\r\n * '<S55>'  : 'sumAll/motor/Asynchronous Machine SI Units/Electrical model/dq to abc transformation/Stationary reference frame'\r\n * '<S56>'  : 'sumAll/motor/Asynchronous Machine SI Units/Electrical model/dq to abc transformation/Synchronous reference frame'\r\n * '<S57>'  : 'sumAll/motor/Asynchronous Machine SI Units/Electrical model/sin,cos/sin(beta),cos(beta),sin(th),cos(th)'\r\n * '<S58>'  : 'sumAll/motor/Asynchronous Machine SI Units/Electrical model/sin,cos/sin(thr),cos(thr)'\r\n * '<S59>'  : 'sumAll/motor/Asynchronous Machine SI Units/Electrical model/sin,cos/sin(thr),cos(thr)1'\r\n * '<S60>'  : 'sumAll/motor/Asynchronous Machine SI Units/Mechanical model/Delay Prediction'\r\n * '<S61>'  : 'sumAll/motor/DC Voltage Source2/Model'\r\n * '<S62>'  : 'sumAll/motor/Universal Bridge1/Model'\r\n * '<S63>'  : 'sumAll/motor/Universal Bridge1/Model/Vf 1'\r\n * '<S64>'  : 'sumAll/powergui/EquivalentModel1'\r\n * '<S65>'  : 'sumAll/powergui/EquivalentModel1/Gates'\r\n * '<S66>'  : 'sumAll/powergui/EquivalentModel1/Sources'\r\n * '<S67>'  : 'sumAll/powergui/EquivalentModel1/Status'\r\n * '<S68>'  : 'sumAll/powergui/EquivalentModel1/Yout'\r\n */\r\n#endif                                 /* RTW_HEADER_sumAll_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"sumAll_data.c","type":"source","group":"data","path":"C:\\Users\\tql\\OneDrive\\文档\\中期答辩\\伺服电机\\异步电机\\拆分版\\sumAll_ert_rtw","tag":"","groupDisplay":"数据文件","code":"/*\r\n * File: sumAll_data.c\r\n *\r\n * Code generated for Simulink model 'sumAll'.\r\n *\r\n * Model version                  : 1.6\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Thu Oct 10 21:22:43 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Linux 64)\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"sumAll.h\"\r\n\r\n/* Constant parameters (default storage) */\r\nconst ConstP rtConstP = {\r\n  /* Expression: SM.Linv\r\n   * Referenced by: '<S38>/Constant2'\r\n   */\r\n  { 11.778689645591433, 0.0, -11.431106508699781, -0.0, 0.0, 11.778689645591433,\r\n    0.0, -11.431106508699781, -11.431106508699781, 0.0, 11.778689645591433, -0.0,\r\n    -0.0, -11.431106508699781, -0.0, 11.778689645591433 },\r\n\r\n  /* Expression: SM.RLinv\r\n   * Referenced by: '<S38>/Constant4'\r\n   */\r\n  { 0.26562892041659192, 0.0, -0.33119505489978723, 0.0, 0.0,\r\n    0.26562892041659192, 0.0, -0.33119505489978723, -0.25779034616210356, 0.0,\r\n    0.34126562995894349, 0.0, 0.0, -0.25779034616210356, 0.0,\r\n    0.34126562995894349 },\r\n\r\n  /* Expression: eye(4,4)\r\n   * Referenced by: '<S49>/u5'\r\n   */\r\n  { 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,\r\n    1.0 },\r\n\r\n  /* Expression: S.D\r\n   * Referenced by: '<S64>/State-Space'\r\n   */\r\n  { -50000.0, 50000.0, 0.0, 0.0, 0.0, 0.0, 50000.0, 0.0, 50000.0, -50000.0, 0.0,\r\n    0.0, 0.0, 0.0, -50000.0, 0.0, 0.0, 0.0, -50000.0, 50000.0, 0.0, 0.0,\r\n    -50000.0, 50000.0, 0.0, 0.0, 50000.0, -50000.0, 0.0, 0.0, 50000.0, -50000.0,\r\n    0.0, 0.0, 0.0, 0.0, -50000.0, 50000.0, 0.0, -50000.0, 0.0, 0.0, 0.0, 0.0,\r\n    50000.0, -50000.0, 0.0, 50000.0, 50000.0, -50000.0, 0.0, 0.0, -50000.0,\r\n    50000.0, -50000.0, -50000.0, 0.0, 0.0, 50000.0, -50000.0, -50000.0, 50000.0,\r\n    50000.0, -100000.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.0, 0.0 },\r\n\r\n  /* Expression: [ 1   -1/2   -1/2; 0   sqrt(3)/2   -sqrt(3)/2; 1/2  1/2  1/2 ]\r\n   * Referenced by: '<S22>/Gain3'\r\n   */\r\n  { 1.0, 0.0, 0.5, -0.5, 0.8660254037844386, 0.5, -0.5, -0.8660254037844386, 0.5\r\n  },\r\n\r\n  /* Expression: rep_seq_t\r\n   * Referenced by: '<S20>/Look-Up Table'\r\n   */\r\n  { 0.0, 5.0E-5, 0.0001 },\r\n\r\n  /* Expression: rep_seq_y\r\n   * Referenced by: '<S20>/Look-Up Table'\r\n   */\r\n  { 0.0, 5.0E-5, 0.0 }\r\n};\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"C:\\Users\\tql\\OneDrive\\文档\\中期答辩\\伺服电机\\异步电机\\拆分版\\sumAll_ert_rtw","tag":"","groupDisplay":"实用工具文件","code":"/*\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'sumAll'.\r\n *\r\n * Model version                  : 1.6\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Thu Oct 10 21:22:43 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Linux 64)\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: Intel->x86-64 (Linux 64)\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  64    long long:  64\r\n *                       native word size:  64\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef long int64_T;\r\ntypedef unsigned long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*===========================================================================*\r\n * Complex number type definitions                                           *\r\n *===========================================================================*/\r\n#define CREAL_T\r\n\r\ntypedef struct {\r\n  real32_T re;\r\n  real32_T im;\r\n} creal32_T;\r\n\r\ntypedef struct {\r\n  real64_T re;\r\n  real64_T im;\r\n} creal64_T;\r\n\r\ntypedef struct {\r\n  real_T re;\r\n  real_T im;\r\n} creal_T;\r\n\r\n#define CINT8_T\r\n\r\ntypedef struct {\r\n  int8_T re;\r\n  int8_T im;\r\n} cint8_T;\r\n\r\n#define CUINT8_T\r\n\r\ntypedef struct {\r\n  uint8_T re;\r\n  uint8_T im;\r\n} cuint8_T;\r\n\r\n#define CINT16_T\r\n\r\ntypedef struct {\r\n  int16_T re;\r\n  int16_T im;\r\n} cint16_T;\r\n\r\n#define CUINT16_T\r\n\r\ntypedef struct {\r\n  uint16_T re;\r\n  uint16_T im;\r\n} cuint16_T;\r\n\r\n#define CINT32_T\r\n\r\ntypedef struct {\r\n  int32_T re;\r\n  int32_T im;\r\n} cint32_T;\r\n\r\n#define CUINT32_T\r\n\r\ntypedef struct {\r\n  uint32_T re;\r\n  uint32_T im;\r\n} cuint32_T;\r\n\r\n#define CINT64_T\r\n\r\ntypedef struct {\r\n  int64_T re;\r\n  int64_T im;\r\n} cint64_T;\r\n\r\n#define CUINT64_T\r\n\r\ntypedef struct {\r\n  uint64_T re;\r\n  uint64_T im;\r\n} cuint64_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807L))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807L-1L))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFUL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true}};