var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"control","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"C:\\Users\\tql\\OneDrive\\文档\\中期答辩\\伺服电机\\异步电机\\拆分版\\control_ert_rtw","tag":"","groupDisplay":"主文件","code":"/*\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'control'.\r\n *\r\n * Model version                  : 1.2\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Thu Oct 10 17:03:55 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Linux 64)\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"control.h\"                   /* Model header file */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n  static boolean_T OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n\r\n  /* Check for overrun */\r\n  if (OverrunFlag) {\r\n    return;\r\n  }\r\n\r\n  OverrunFlag = true;\r\n\r\n  /* Save FPU context here (if necessary) */\r\n  /* Re-enable timer or interrupt here */\r\n  /* Set model inputs here */\r\n\r\n  /* Step the model */\r\n  control_step();\r\n\r\n  /* Get model outputs here */\r\n\r\n  /* Indicate task complete */\r\n  OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n  /* Restore FPU context here (if necessary) */\r\n  /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example main function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific. This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint_T main(int_T argc, const char *argv[])\r\n{\r\n  /* Unused arguments */\r\n  (void)(argc);\r\n  (void)(argv);\r\n\r\n  /* Initialize model */\r\n  control_initialize();\r\n\r\n  /* Attach rt_OneStep to a timer or interrupt service routine with\r\n   * period 1.0 seconds (base rate of the model) here.\r\n   * The call syntax for rt_OneStep is\r\n   *\r\n   *  rt_OneStep();\r\n   */\r\n  printf(\"Warning: The simulation will run forever. \"\r\n         \"Generated ERT main won't simulate model step behavior. \"\r\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\r\n  fflush((NULL));\r\n  while (1) {\r\n    /*  Perform application tasks here */\r\n  }\r\n\r\n  /* The option 'Remove error status field in real-time model data structure'\r\n   * is selected, therefore the following code does not need to execute.\r\n   */\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"control.c","type":"source","group":"model","path":"C:\\Users\\tql\\OneDrive\\文档\\中期答辩\\伺服电机\\异步电机\\拆分版\\control_ert_rtw","tag":"","groupDisplay":"模型文件","code":"/*\r\n * File: control.c\r\n *\r\n * Code generated for Simulink model 'control'.\r\n *\r\n * Model version                  : 1.2\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Thu Oct 10 17:03:55 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Linux 64)\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"control.h\"\r\n#include \"rtwtypes.h\"\r\n#include <emmintrin.h>\r\n#include <math.h>\r\n#include <float.h>\r\n#include \"rt_look.h\"\r\n#include <stddef.h>\r\n#define NumBitsPerChar                 8U\r\n\r\n/* Block signals and states (default storage) */\r\nDW rtDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY rtY;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL rtM_;\r\nRT_MODEL *const rtM = &rtM_;\r\nextern real_T rt_atan2d_snf(real_T u0, real_T u1);\r\nextern real_T rt_remd_snf(real_T u0, real_T u1);\r\nstatic real_T rtGetNaN(void);\r\nstatic real32_T rtGetNaNF(void);\r\n\r\n/*===========*\r\n * Constants *\r\n *===========*/\r\n#define RT_PI                          3.14159265358979323846\r\n#define RT_PIF                         3.1415927F\r\n#define RT_LN_10                       2.30258509299404568402\r\n#define RT_LN_10F                      2.3025851F\r\n#define RT_LOG10E                      0.43429448190325182765\r\n#define RT_LOG10EF                     0.43429449F\r\n#define RT_E                           2.7182818284590452354\r\n#define RT_EF                          2.7182817F\r\n\r\n/*\r\n * UNUSED_PARAMETER(x)\r\n *   Used to specify that a function parameter (argument) is required but not\r\n *   accessed by the function body.\r\n */\r\n#ifndef UNUSED_PARAMETER\r\n#if defined(__LCC__)\r\n#define UNUSED_PARAMETER(x)                                      /* do nothing */\r\n#else\r\n\r\n/*\r\n * This is the semi-ANSI standard way of indicating that an\r\n * unused function parameter is required.\r\n */\r\n#define UNUSED_PARAMETER(x)            (void) (x)\r\n#endif\r\n#endif\r\n\r\n#ifndef INTERP\r\n#define INTERP(x,x1,x2,y1,y2)          ( (y1)+(((y2) - (y1))/((x2) - (x1)))*((x)-(x1)) )\r\n#endif\r\n\r\n#ifndef ZEROTECHNIQUE\r\n#define ZEROTECHNIQUE\r\n\r\ntypedef enum {\r\n  NORMAL_INTERP,\r\n  AVERAGE_VALUE,\r\n  MIDDLE_VALUE\r\n} ZeroTechnique;\r\n\r\n#endif\r\n\r\nstatic int_T rt_GetLookupIndex(const real_T *x, int_T xlen, real_T u) ;\r\nstatic real_T rt_Lookup(const real_T *x, int_T xlen, real_T u, const real_T *y);\r\n\r\n#define NOT_USING_NONFINITE_LITERALS   1\r\n\r\nextern real_T rtInf;\r\nextern real_T rtMinusInf;\r\nextern real_T rtNaN;\r\nextern real32_T rtInfF;\r\nextern real32_T rtMinusInfF;\r\nextern real32_T rtNaNF;\r\nstatic void rt_InitInfAndNaN(size_t realSize);\r\nstatic boolean_T rtIsInf(real_T value);\r\nstatic boolean_T rtIsInfF(real32_T value);\r\nstatic boolean_T rtIsNaN(real_T value);\r\nstatic boolean_T rtIsNaNF(real32_T value);\r\ntypedef struct {\r\n  struct {\r\n    uint32_T wordH;\r\n    uint32_T wordL;\r\n  } words;\r\n} BigEndianIEEEDouble;\r\n\r\ntypedef struct {\r\n  struct {\r\n    uint32_T wordL;\r\n    uint32_T wordH;\r\n  } words;\r\n} LittleEndianIEEEDouble;\r\n\r\ntypedef struct {\r\n  union {\r\n    real32_T wordLreal;\r\n    uint32_T wordLuint;\r\n  } wordL;\r\n} IEEESingle;\r\n\r\nreal_T rtInf;\r\nreal_T rtMinusInf;\r\nreal_T rtNaN;\r\nreal32_T rtInfF;\r\nreal32_T rtMinusInfF;\r\nreal32_T rtNaNF;\r\nstatic real_T rtGetInf(void);\r\nstatic real32_T rtGetInfF(void);\r\nstatic real_T rtGetMinusInf(void);\r\nstatic real32_T rtGetMinusInfF(void);\r\n\r\n/*\r\n * Initialize rtNaN needed by the generated code.\r\n * NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real_T rtGetNaN(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T nan = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    nan = rtGetNaNF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0xFFF80000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    nan = tmpVal.fltVal;\r\n  }\r\n\r\n  return nan;\r\n}\r\n\r\n/*\r\n * Initialize rtNaNF needed by the generated code.\r\n * NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real32_T rtGetNaNF(void)\r\n{\r\n  IEEESingle nanF = { { 0.0F } };\r\n\r\n  nanF.wordL.wordLuint = 0xFFC00000U;\r\n  return nanF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * Routine to get the index of the input from a table using binary or\r\n * interpolation search.\r\n *\r\n * Inputs:\r\n * *x   : Pointer to table, x[0] ....x[xlen-1]\r\n * xlen : Number of values in xtable\r\n * u    : input value to look up\r\n *\r\n * Output:\r\n * idx  : the index into the table such that:\r\n * if u is negative\r\n * x[idx] <= u < x[idx+1]\r\n * else\r\n * x[idx] < u <= x[idx+1]\r\n *\r\n * Interpolation Search: If the table contains a large number of nearly\r\n * uniformly spaced entries, i.e., x[n] vs n is linear then the index\r\n * corresponding to the input can be found in one shot using the linear\r\n * interpolation formula. Therefore if you have a look-up table block with\r\n * many data points, using interpolation search might speed up the code.\r\n * Compile the generated code with the following flag:\r\n *\r\n * make_rtw OPTS=-DDOINTERPSEARCH\r\n *\r\n * to enable interpolation search.\r\n */\r\nstatic int_T rt_GetLookupIndex(const real_T *x, int_T xlen, real_T u)\r\n{\r\n  int_T idx = 0;\r\n  int_T bottom = 0;\r\n  int_T top = xlen-1;\r\n  int_T retValue = 0;\r\n  boolean_T returnStatus = 0U;\r\n\r\n#ifdef DOINTERPSEARCH\r\n\r\n  real_T offset = 0;\r\n\r\n#endif\r\n\r\n  /*\r\n   * Deal with the extreme cases first:\r\n   *   if u <= x[bottom] then return idx = bottom\r\n   *   if u >= x[top]    then return idx = top-1\r\n   */\r\n  if (u <= x[bottom]) {\r\n    retValue = bottom;\r\n    returnStatus = 1U;\r\n  } else if (u >= x[top]) {\r\n    retValue = top-1;\r\n    returnStatus = 1U;\r\n  } else {\r\n    /* else required to ensure safe programming, even *\r\n     * if it's expected that it will never be reached */\r\n  }\r\n\r\n  if (returnStatus == 0U) {\r\n    if (u < 0) {\r\n      /* For negative input find index such that: x[idx] <= u < x[idx+1] */\r\n      for (;;) {\r\n\r\n#ifdef DOINTERPSEARCH\r\n\r\n        offset = (u-x[bottom])/(x[top]-x[bottom]);\r\n        idx = bottom + (int_T)((top-bottom)*(offset-DBL_EPSILON));\r\n\r\n#else\r\n\r\n        idx = (bottom + top)/2;\r\n\r\n#endif\r\n\r\n        if (u < x[idx]) {\r\n          top = idx - 1;\r\n        } else if (u >= x[idx+1]) {\r\n          bottom = idx + 1;\r\n        } else {\r\n          /* we have x[idx] <= u < x[idx+1], return idx */\r\n          retValue = idx;\r\n          break;\r\n        }\r\n      }\r\n    } else {\r\n      /* For non-negative input find index such that: x[idx] < u <= x[idx+1] */\r\n      for (;;) {\r\n\r\n#ifdef DOINTERPSEARCH\r\n\r\n        offset = (u-x[bottom])/(x[top]-x[bottom]);\r\n        idx = bottom + (int_T)((top-bottom)*(offset-DBL_EPSILON));\r\n\r\n#else\r\n\r\n        idx = (bottom + top)/2;\r\n\r\n#endif\r\n\r\n        if (u <= x[idx]) {\r\n          top = idx - 1;\r\n        } else if (u > x[idx+1]) {\r\n          bottom = idx + 1;\r\n        } else {\r\n          /* we have x[idx] < u <= x[idx+1], return idx */\r\n          retValue = idx;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return retValue;\r\n}\r\n\r\n/* 1D lookup routine for data type of real_T. */\r\nstatic real_T rt_Lookup(const real_T *x, int_T xlen, real_T u, const real_T *y)\r\n{\r\n  int_T idx = rt_GetLookupIndex(x, xlen, u);\r\n  real_T num = y[idx+1] - y[idx];\r\n  real_T den = x[idx+1] - x[idx];\r\n\r\n  /* Due to the way the binary search is implemented\r\n     in rt_look.c (rt_GetLookupIndex), den cannot be\r\n     0.  Equivalently, m cannot be inf or nan. */\r\n  real_T m = num/den;\r\n  return (y[idx] + (m * (u - x[idx])));\r\n}\r\n\r\n/*\r\n * Initialize the rtInf, rtMinusInf, and rtNaN needed by the\r\n * generated code. NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic void rt_InitInfAndNaN(size_t realSize)\r\n{\r\n  (void) (realSize);\r\n  rtNaN = rtGetNaN();\r\n  rtNaNF = rtGetNaNF();\r\n  rtInf = rtGetInf();\r\n  rtInfF = rtGetInfF();\r\n  rtMinusInf = rtGetMinusInf();\r\n  rtMinusInfF = rtGetMinusInfF();\r\n}\r\n\r\n/* Test if value is infinite */\r\nstatic boolean_T rtIsInf(real_T value)\r\n{\r\n  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);\r\n}\r\n\r\n/* Test if single-precision value is infinite */\r\nstatic boolean_T rtIsInfF(real32_T value)\r\n{\r\n  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);\r\n}\r\n\r\n/* Test if value is not a number */\r\nstatic boolean_T rtIsNaN(real_T value)\r\n{\r\n  boolean_T result = (boolean_T) 0;\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  if (bitsPerReal == 32U) {\r\n    result = rtIsNaNF((real32_T)value);\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.fltVal = value;\r\n    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&\r\n                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||\r\n                          (tmpVal.bitVal.words.wordL != 0) ));\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/* Test if single-precision value is not a number */\r\nstatic boolean_T rtIsNaNF(real32_T value)\r\n{\r\n  IEEESingle tmp;\r\n  tmp.wordL.wordLreal = value;\r\n  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&\r\n                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );\r\n}\r\n\r\n/*\r\n * Initialize rtInf needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real_T rtGetInf(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T inf = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    inf = rtGetInfF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0x7FF00000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    inf = tmpVal.fltVal;\r\n  }\r\n\r\n  return inf;\r\n}\r\n\r\n/*\r\n * Initialize rtInfF needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real32_T rtGetInfF(void)\r\n{\r\n  IEEESingle infF;\r\n  infF.wordL.wordLuint = 0x7F800000U;\r\n  return infF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * Initialize rtMinusInf needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real_T rtGetMinusInf(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T minf = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    minf = rtGetMinusInfF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0xFFF00000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    minf = tmpVal.fltVal;\r\n  }\r\n\r\n  return minf;\r\n}\r\n\r\n/*\r\n * Initialize rtMinusInfF needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real32_T rtGetMinusInfF(void)\r\n{\r\n  IEEESingle minfF;\r\n  minfF.wordL.wordLuint = 0xFF800000U;\r\n  return minfF.wordL.wordLreal;\r\n}\r\n\r\nreal_T rt_atan2d_snf(real_T u0, real_T u1)\r\n{\r\n  real_T y;\r\n  if (rtIsNaN(u0) || rtIsNaN(u1)) {\r\n    y = (rtNaN);\r\n  } else if (rtIsInf(u0) && rtIsInf(u1)) {\r\n    int32_T tmp;\r\n    int32_T tmp_0;\r\n    if (u0 > 0.0) {\r\n      tmp = 1;\r\n    } else {\r\n      tmp = -1;\r\n    }\r\n\r\n    if (u1 > 0.0) {\r\n      tmp_0 = 1;\r\n    } else {\r\n      tmp_0 = -1;\r\n    }\r\n\r\n    y = atan2(tmp, tmp_0);\r\n  } else if (u1 == 0.0) {\r\n    if (u0 > 0.0) {\r\n      y = RT_PI / 2.0;\r\n    } else if (u0 < 0.0) {\r\n      y = -(RT_PI / 2.0);\r\n    } else {\r\n      y = 0.0;\r\n    }\r\n  } else {\r\n    y = atan2(u0, u1);\r\n  }\r\n\r\n  return y;\r\n}\r\n\r\nreal_T rt_remd_snf(real_T u0, real_T u1)\r\n{\r\n  real_T y;\r\n  if (rtIsNaN(u0) || rtIsNaN(u1) || rtIsInf(u0)) {\r\n    y = (rtNaN);\r\n  } else if (rtIsInf(u1)) {\r\n    y = u0;\r\n  } else if ((u1 != 0.0) && (u1 != trunc(u1))) {\r\n    real_T q;\r\n    q = fabs(u0 / u1);\r\n    if (!(fabs(q - floor(q + 0.5)) > DBL_EPSILON * q)) {\r\n      y = 0.0 * u0;\r\n    } else {\r\n      y = fmod(u0, u1);\r\n    }\r\n  } else {\r\n    y = fmod(u0, u1);\r\n  }\r\n\r\n  return y;\r\n}\r\n\r\n/* Model step function */\r\nvoid control_step(void)\r\n{\r\n  real_T rtb_Gain1[3];\r\n  real_T rtb_ComplextoMagnitudeAngle_o2;\r\n  real_T rtb_Gain;\r\n  real_T rtb_Gain1_ng;\r\n  real_T rtb_Gain3_j;\r\n  real_T rtb_Gain4;\r\n  real_T rtb_MultiportSwitch2;\r\n  real_T rtb_Saturation_i;\r\n  real_T rtb_Sum_i;\r\n  real_T rtb_Sum_m;\r\n  real_T rtb_Switch_idx_0;\r\n  real_T rtb_Switch_idx_0_tmp;\r\n  real_T rtb_Switch_idx_1;\r\n  real_T rtb_Switch_m_idx_0;\r\n  int32_T i;\r\n  uint8_T rtb_Subtract2_a;\r\n  boolean_T rtb_LogicalOperator2;\r\n  for (i = 0; i <= 0; i += 2) {\r\n    /* Gain: '<S20>/Gain1' incorporates:\r\n     *  Gain: '<S20>/Gain3'\r\n     *  Inport: '<Root>/ia'\r\n     *  Inport: '<Root>/ib'\r\n     *  Inport: '<Root>/ic'\r\n     */\r\n    _mm_storeu_pd(&rtb_Gain1[i], _mm_mul_pd(_mm_add_pd(_mm_add_pd(_mm_mul_pd\r\n      (_mm_loadu_pd(&rtConstP.Gain3_Gain[i + 3]), _mm_set1_pd(rtU.ib)),\r\n      _mm_mul_pd(_mm_loadu_pd(&rtConstP.Gain3_Gain[i]), _mm_set1_pd(rtU.ia))),\r\n      _mm_mul_pd(_mm_loadu_pd(&rtConstP.Gain3_Gain[i + 6]), _mm_set1_pd(rtU.ic))),\r\n      _mm_set1_pd(0.66666666666666663)));\r\n  }\r\n\r\n  for (i = 2; i < 3; i++) {\r\n    /* Gain: '<S20>/Gain1' incorporates:\r\n     *  Gain: '<S20>/Gain3'\r\n     *  Inport: '<Root>/ia'\r\n     *  Inport: '<Root>/ib'\r\n     *  Inport: '<Root>/ic'\r\n     */\r\n    rtb_Gain1[i] = ((rtConstP.Gain3_Gain[i + 3] * rtU.ib + rtConstP.Gain3_Gain[i]\r\n                     * rtU.ia) + rtConstP.Gain3_Gain[i + 6] * rtU.ic) *\r\n      0.66666666666666663;\r\n  }\r\n\r\n  /* ComplexToMagnitudeAngle: '<Root>/Complex to Magnitude-Angle' incorporates:\r\n   *  Inport: '<Root>/vd'\r\n   *  Inport: '<Root>/vq'\r\n   */\r\n  rtb_ComplextoMagnitudeAngle_o2 = rt_atan2d_snf(rtU.vq, rtU.vd);\r\n\r\n  /* Outputs for Enabled SubSystem: '<S25>/Subsystem - pi//2 delay' incorporates:\r\n   *  EnablePort: '<S28>/Enable'\r\n   */\r\n  /* Outputs for Enabled SubSystem: '<S19>/Subsystem - pi//2 delay' incorporates:\r\n   *  EnablePort: '<S23>/Enable'\r\n   */\r\n  /* Fcn: '<S23>/Fcn' incorporates:\r\n   *  Fcn: '<S23>/Fcn1'\r\n   *  Fcn: '<S28>/Fcn'\r\n   */\r\n  rtb_Switch_idx_0_tmp = cos(rtb_ComplextoMagnitudeAngle_o2);\r\n  rtb_Saturation_i = sin(rtb_ComplextoMagnitudeAngle_o2);\r\n\r\n  /* End of Outputs for SubSystem: '<S25>/Subsystem - pi//2 delay' */\r\n\r\n  /* Switch: '<S19>/Switch' incorporates:\r\n   *  Fcn: '<S23>/Fcn'\r\n   *  Fcn: '<S23>/Fcn1'\r\n   */\r\n  rtb_Switch_idx_0 = rtb_Gain1[0] * rtb_Saturation_i - rtb_Gain1[1] *\r\n    rtb_Switch_idx_0_tmp;\r\n  rtb_Switch_idx_1 = rtb_Gain1[0] * rtb_Switch_idx_0_tmp + rtb_Gain1[1] *\r\n    rtb_Saturation_i;\r\n\r\n  /* End of Outputs for SubSystem: '<S19>/Subsystem - pi//2 delay' */\r\n\r\n  /* Outputs for Enabled SubSystem: '<S25>/Subsystem - pi//2 delay' incorporates:\r\n   *  EnablePort: '<S28>/Enable'\r\n   */\r\n  /* Switch: '<S25>/Switch' incorporates:\r\n   *  Fcn: '<S28>/Fcn'\r\n   *  Inport: '<Root>/vd'\r\n   *  Inport: '<Root>/vq'\r\n   */\r\n  rtb_Switch_m_idx_0 = rtU.vd * rtb_Saturation_i - rtU.vq * rtb_Switch_idx_0_tmp;\r\n\r\n  /* End of Outputs for SubSystem: '<S25>/Subsystem - pi//2 delay' */\r\n\r\n  /* DigitalClock: '<S7>/Clock' incorporates:\r\n   *  DigitalClock: '<S18>/Digital Clock'\r\n   */\r\n  rtb_Switch_idx_0_tmp = ((rtM->Timing.clockTick0) * 1.0);\r\n\r\n  /* Switch: '<S7>/Switch' incorporates:\r\n   *  DigitalClock: '<S7>/Clock'\r\n   *  Product: '<S7>/Divide'\r\n   */\r\n  if (rtb_Switch_idx_0_tmp > 0.0001) {\r\n    rtb_Saturation_i = rtb_Switch_idx_1 / rtb_Switch_idx_0;\r\n  } else {\r\n    rtb_Saturation_i = 0.0;\r\n  }\r\n\r\n  /* End of Switch: '<S7>/Switch' */\r\n\r\n  /* Gain: '<S7>/Gain' */\r\n  rtb_Gain = 6.23416784551107 * rtb_Saturation_i;\r\n\r\n  /* Gain: '<S7>/Gain1' incorporates:\r\n   *  Inport: '<Root>/wm'\r\n   */\r\n  rtb_Saturation_i = 2.0 * rtU.wm;\r\n\r\n  /* Sum: '<S7>/Add' */\r\n  rtb_Gain += rtb_Saturation_i;\r\n\r\n  /* Sum: '<S1>/Sum1' incorporates:\r\n   *  Constant: '<Root>/Constant'\r\n   *  DiscreteIntegrator: '<S1>/Discrete-Time Integrator'\r\n   *  Gain: '<S1>/Gain'\r\n   *  Gain: '<S7>/Gain2'\r\n   *  Gain: '<S7>/Gain3'\r\n   *  Gain: '<S7>/Gain4'\r\n   *  Gain: '<S7>/Gain5'\r\n   *  Product: '<S7>/Product'\r\n   *  Sum: '<Root>/Sum2'\r\n   *  Sum: '<S1>/Sum'\r\n   *  Sum: '<S7>/Add2'\r\n   */\r\n  rtb_Sum_i = ((0.0 - rtb_Gain * rtb_Switch_idx_1 * 0.058148172073290927 *\r\n                0.060793999999999994) - 0.022361 * rtb_Switch_m_idx_0 *\r\n               270.56932718377169) + ((9.4040441629117311 - rtb_Switch_idx_0) *\r\n    15.7034858759281 + rtDW.DiscreteTimeIntegrator_DSTATE);\r\n\r\n  /* Saturate: '<S1>/Saturation' */\r\n  if (rtb_Sum_i > 359.2584956081995) {\r\n    rtb_Gain1_ng = 359.2584956081995;\r\n  } else if (rtb_Sum_i < -359.2584956081995) {\r\n    rtb_Gain1_ng = -359.2584956081995;\r\n  } else {\r\n    rtb_Gain1_ng = rtb_Sum_i;\r\n  }\r\n\r\n  /* End of Saturate: '<S1>/Saturation' */\r\n\r\n  /* Sum: '<S1>/Sum2' */\r\n  rtb_Sum_i -= rtb_Gain1_ng;\r\n\r\n  /* Product: '<S7>/Product1' */\r\n  rtb_Sum_m = rtb_Gain * rtb_Switch_idx_0;\r\n\r\n  /* Gain: '<S7>/Gain8' incorporates:\r\n   *  Product: '<S7>/Product2'\r\n   */\r\n  rtb_Switch_m_idx_0 = rtb_Switch_m_idx_0 * rtb_Saturation_i *\r\n    0.97049050893180255;\r\n\r\n  /* Sum: '<S3>/Sum' incorporates:\r\n   *  DiscreteIntegrator: '<S3>/Discrete-Time Integrator'\r\n   *  Gain: '<S3>/Gain'\r\n   *  Inport: '<Root>/wm'\r\n   *  Sum: '<Root>/Sum'\r\n   */\r\n  rtb_Gain = (52.359877559829883 - rtU.wm) * 13.859596918105916 +\r\n    rtDW.DiscreteTimeIntegrator_DSTATE_g;\r\n\r\n  /* Saturate: '<S3>/Saturation' */\r\n  if (rtb_Gain > 48.400544337535294) {\r\n    rtb_Saturation_i = 48.400544337535294;\r\n  } else if (rtb_Gain < -48.400544337535294) {\r\n    rtb_Saturation_i = -48.400544337535294;\r\n  } else {\r\n    rtb_Saturation_i = rtb_Gain;\r\n  }\r\n\r\n  /* End of Saturate: '<S3>/Saturation' */\r\n\r\n  /* Sum: '<Root>/Sum1' incorporates:\r\n   *  Gain: '<S3>/Gain2'\r\n   */\r\n  rtb_Switch_idx_1 = 0.61904294884986732 * rtb_Saturation_i - rtb_Switch_idx_1;\r\n\r\n  /* Sum: '<S2>/Sum1' incorporates:\r\n   *  DiscreteIntegrator: '<S2>/Discrete-Time Integrator'\r\n   *  Gain: '<S2>/Gain'\r\n   *  Gain: '<S7>/Gain6'\r\n   *  Gain: '<S7>/Gain7'\r\n   *  Sum: '<S2>/Sum'\r\n   *  Sum: '<S7>/Add1'\r\n   */\r\n  rtb_Sum_m = (0.058148172073290927 * rtb_Sum_m * 0.060793999999999994 +\r\n               rtb_Switch_m_idx_0) + (15.7034858759281 * rtb_Switch_idx_1 +\r\n    rtDW.DiscreteTimeIntegrator_DSTATE_p);\r\n\r\n  /* Saturate: '<S2>/Saturation' */\r\n  if (rtb_Sum_m > 359.2584956081995) {\r\n    rtb_Switch_m_idx_0 = 359.2584956081995;\r\n  } else if (rtb_Sum_m < -359.2584956081995) {\r\n    rtb_Switch_m_idx_0 = -359.2584956081995;\r\n  } else {\r\n    rtb_Switch_m_idx_0 = rtb_Sum_m;\r\n  }\r\n\r\n  /* End of Saturate: '<S2>/Saturation' */\r\n\r\n  /* Fcn: '<S4>/beta' incorporates:\r\n   *  Fcn: '<S4>/alpha'\r\n   */\r\n  rtb_MultiportSwitch2 = cos(1.5707963267948966 - rtb_ComplextoMagnitudeAngle_o2);\r\n  rtb_Gain4 = sin(1.5707963267948966 - rtb_ComplextoMagnitudeAngle_o2);\r\n  rtb_ComplextoMagnitudeAngle_o2 = -rtb_Gain4 * rtb_Gain1_ng +\r\n    rtb_MultiportSwitch2 * rtb_Switch_m_idx_0;\r\n\r\n  /* Fcn: '<S4>/alpha' */\r\n  rtb_Gain1_ng = rtb_MultiportSwitch2 * rtb_Gain1_ng + rtb_Gain4 *\r\n    rtb_Switch_m_idx_0;\r\n\r\n  /* Gain: '<S9>/Gain' */\r\n  rtb_MultiportSwitch2 = 1.7320508075688772 * rtb_Gain1_ng;\r\n\r\n  /* Sum: '<S9>/Subtract2' incorporates:\r\n   *  Constant: '<S15>/Constant'\r\n   *  Constant: '<S16>/Constant'\r\n   *  Constant: '<S17>/Constant'\r\n   *  Gain: '<S9>/Gain2'\r\n   *  Gain: '<S9>/Gain3'\r\n   *  RelationalOperator: '<S15>/Compare'\r\n   *  RelationalOperator: '<S16>/Compare'\r\n   *  RelationalOperator: '<S17>/Compare'\r\n   *  Sum: '<S9>/Subtract'\r\n   *  Sum: '<S9>/Subtract1'\r\n   */\r\n  rtb_Subtract2_a = (uint8_T)(((uint32_T)((rtb_MultiportSwitch2 -\r\n    rtb_ComplextoMagnitudeAngle_o2 > 0.0) << 1) + (uint32_T)\r\n    (rtb_ComplextoMagnitudeAngle_o2 > 0.0)) + (uint32_T)(((0.0 -\r\n    rtb_MultiportSwitch2) - rtb_ComplextoMagnitudeAngle_o2 > 0.0) << 2));\r\n\r\n  /* Gain: '<S14>/Gain2' */\r\n  rtb_MultiportSwitch2 = 0.5 * rtb_ComplextoMagnitudeAngle_o2;\r\n\r\n  /* Gain: '<S14>/Gain1' */\r\n  rtb_Gain1_ng *= 0.8660254037844386;\r\n\r\n  /* Gain: '<S14>/Gain4' incorporates:\r\n   *  Sum: '<S14>/Subtract1'\r\n   */\r\n  rtb_Gain4 = (rtb_MultiportSwitch2 - rtb_Gain1_ng) * 3.4641016151377545E-7;\r\n\r\n  /* Gain: '<S14>/Gain3' incorporates:\r\n   *  Sum: '<S14>/Subtract'\r\n   */\r\n  rtb_Gain3_j = (rtb_MultiportSwitch2 + rtb_Gain1_ng) * 3.4641016151377545E-7;\r\n\r\n  /* MultiPortSwitch: '<S10>/Multiport Switch' incorporates:\r\n   *  Gain: '<S10>/Gain'\r\n   *  Gain: '<S10>/Gain1'\r\n   *  Gain: '<S10>/Gain2'\r\n   *  Gain: '<S14>/Gain'\r\n   *  Gain: '<S14>/Gain3'\r\n   *  Gain: '<S14>/Gain4'\r\n   *  Sum: '<S14>/Subtract'\r\n   *  Sum: '<S14>/Subtract1'\r\n   */\r\n  switch (rtb_Subtract2_a) {\r\n   case 1:\r\n    rtb_MultiportSwitch2 = (rtb_MultiportSwitch2 - rtb_Gain1_ng) *\r\n      3.4641016151377545E-7;\r\n\r\n    /* MultiPortSwitch: '<S10>/Multiport Switch1' incorporates:\r\n     *  Gain: '<S14>/Gain3'\r\n     *  Gain: '<S14>/Gain4'\r\n     *  Sum: '<S14>/Subtract1'\r\n     */\r\n    rtb_ComplextoMagnitudeAngle_o2 = rtb_Gain3_j;\r\n    break;\r\n\r\n   case 2:\r\n    rtb_MultiportSwitch2 = (rtb_MultiportSwitch2 + rtb_Gain1_ng) *\r\n      3.4641016151377545E-7;\r\n\r\n    /* MultiPortSwitch: '<S10>/Multiport Switch1' incorporates:\r\n     *  Gain: '<S10>/Gain'\r\n     *  Gain: '<S14>/Gain'\r\n     *  Gain: '<S14>/Gain3'\r\n     *  Sum: '<S14>/Subtract'\r\n     */\r\n    rtb_ComplextoMagnitudeAngle_o2 = -(3.4641016151377545E-7 *\r\n      rtb_ComplextoMagnitudeAngle_o2);\r\n    break;\r\n\r\n   case 3:\r\n    rtb_MultiportSwitch2 = -((rtb_MultiportSwitch2 - rtb_Gain1_ng) *\r\n      3.4641016151377545E-7);\r\n\r\n    /* MultiPortSwitch: '<S10>/Multiport Switch1' incorporates:\r\n     *  Gain: '<S10>/Gain2'\r\n     *  Gain: '<S14>/Gain'\r\n     *  Gain: '<S14>/Gain4'\r\n     *  Sum: '<S14>/Subtract1'\r\n     */\r\n    rtb_ComplextoMagnitudeAngle_o2 *= 3.4641016151377545E-7;\r\n    break;\r\n\r\n   case 4:\r\n    rtb_MultiportSwitch2 = -(3.4641016151377545E-7 *\r\n      rtb_ComplextoMagnitudeAngle_o2);\r\n\r\n    /* MultiPortSwitch: '<S10>/Multiport Switch1' incorporates:\r\n     *  Gain: '<S10>/Gain'\r\n     *  Gain: '<S14>/Gain'\r\n     *  Gain: '<S14>/Gain4'\r\n     */\r\n    rtb_ComplextoMagnitudeAngle_o2 = rtb_Gain4;\r\n    break;\r\n\r\n   case 5:\r\n    rtb_MultiportSwitch2 = 3.4641016151377545E-7 *\r\n      rtb_ComplextoMagnitudeAngle_o2;\r\n\r\n    /* MultiPortSwitch: '<S10>/Multiport Switch1' incorporates:\r\n     *  Gain: '<S10>/Gain1'\r\n     *  Gain: '<S14>/Gain'\r\n     *  Gain: '<S14>/Gain3'\r\n     */\r\n    rtb_ComplextoMagnitudeAngle_o2 = -rtb_Gain3_j;\r\n    break;\r\n\r\n   default:\r\n    rtb_MultiportSwitch2 = -((rtb_MultiportSwitch2 + rtb_Gain1_ng) *\r\n      3.4641016151377545E-7);\r\n\r\n    /* MultiPortSwitch: '<S10>/Multiport Switch1' incorporates:\r\n     *  Gain: '<S10>/Gain1'\r\n     *  Gain: '<S10>/Gain2'\r\n     *  Gain: '<S14>/Gain3'\r\n     *  Gain: '<S14>/Gain4'\r\n     *  Sum: '<S14>/Subtract'\r\n     */\r\n    rtb_ComplextoMagnitudeAngle_o2 = -rtb_Gain4;\r\n    break;\r\n  }\r\n\r\n  /* End of MultiPortSwitch: '<S10>/Multiport Switch' */\r\n\r\n  /* Gain: '<S12>/Gain' incorporates:\r\n   *  Constant: '<S12>/Constant'\r\n   *  Sum: '<S12>/Subtract'\r\n   */\r\n  rtb_Gain1_ng = ((0.0001 - rtb_MultiportSwitch2) -\r\n                  rtb_ComplextoMagnitudeAngle_o2) * 0.25;\r\n\r\n  /* Sum: '<S12>/Subtract1' incorporates:\r\n   *  Gain: '<S12>/Gain1'\r\n   */\r\n  rtb_Gain4 = 0.5 * rtb_MultiportSwitch2 + rtb_Gain1_ng;\r\n\r\n  /* Sum: '<S12>/Subtract2' incorporates:\r\n   *  Gain: '<S12>/Gain2'\r\n   */\r\n  rtb_Gain3_j = 0.5 * rtb_ComplextoMagnitudeAngle_o2 + rtb_Gain4;\r\n\r\n  /* MultiPortSwitch: '<S11>/Multiport Switch3' */\r\n  switch (rtb_Subtract2_a) {\r\n   case 1:\r\n    rtb_MultiportSwitch2 = rtb_Gain4;\r\n    break;\r\n\r\n   case 2:\r\n    rtb_MultiportSwitch2 = rtb_Gain1_ng;\r\n    break;\r\n\r\n   case 3:\r\n    rtb_MultiportSwitch2 = rtb_Gain1_ng;\r\n    break;\r\n\r\n   case 4:\r\n    rtb_MultiportSwitch2 = rtb_Gain3_j;\r\n    break;\r\n\r\n   case 5:\r\n    rtb_MultiportSwitch2 = rtb_Gain3_j;\r\n    break;\r\n\r\n   default:\r\n    rtb_MultiportSwitch2 = rtb_Gain4;\r\n    break;\r\n  }\r\n\r\n  /* End of MultiPortSwitch: '<S11>/Multiport Switch3' */\r\n\r\n  /* Lookup: '<S18>/Look-Up Table' incorporates:\r\n   *  Fcn: '<S18>/Fcn1'\r\n   */\r\n  rtb_ComplextoMagnitudeAngle_o2 = rt_Lookup(&rtConstP.LookUpTable_XData[0], 3,\r\n    rt_remd_snf(rtb_Switch_idx_0_tmp, 0.0001), &rtConstP.LookUpTable_YData[0]);\r\n\r\n  /* RelationalOperator: '<S13>/Relational Operator' */\r\n  rtb_LogicalOperator2 = (rtb_ComplextoMagnitudeAngle_o2 > rtb_MultiportSwitch2);\r\n\r\n  /* DataTypeConversion: '<S13>/Cast To Double' incorporates:\r\n   *  Outport: '<Root>/gate'\r\n   */\r\n  rtY.gate[0] = rtb_LogicalOperator2;\r\n\r\n  /* DataTypeConversion: '<S13>/Cast To Double1' incorporates:\r\n   *  Logic: '<S13>/Logical Operator'\r\n   *  Outport: '<Root>/gate'\r\n   */\r\n  rtY.gate[1] = !rtb_LogicalOperator2;\r\n\r\n  /* MultiPortSwitch: '<S11>/Multiport Switch1' */\r\n  switch (rtb_Subtract2_a) {\r\n   case 1:\r\n    rtb_MultiportSwitch2 = rtb_Gain1_ng;\r\n    break;\r\n\r\n   case 2:\r\n    rtb_MultiportSwitch2 = rtb_Gain3_j;\r\n    break;\r\n\r\n   case 3:\r\n    rtb_MultiportSwitch2 = rtb_Gain4;\r\n    break;\r\n\r\n   case 4:\r\n    rtb_MultiportSwitch2 = rtb_Gain4;\r\n    break;\r\n\r\n   case 5:\r\n    rtb_MultiportSwitch2 = rtb_Gain1_ng;\r\n    break;\r\n\r\n   default:\r\n    rtb_MultiportSwitch2 = rtb_Gain3_j;\r\n    break;\r\n  }\r\n\r\n  /* End of MultiPortSwitch: '<S11>/Multiport Switch1' */\r\n\r\n  /* RelationalOperator: '<S13>/Relational Operator1' */\r\n  rtb_LogicalOperator2 = (rtb_ComplextoMagnitudeAngle_o2 > rtb_MultiportSwitch2);\r\n\r\n  /* DataTypeConversion: '<S13>/Cast To Double2' incorporates:\r\n   *  Outport: '<Root>/gate'\r\n   */\r\n  rtY.gate[2] = rtb_LogicalOperator2;\r\n\r\n  /* DataTypeConversion: '<S13>/Cast To Double3' incorporates:\r\n   *  Logic: '<S13>/Logical Operator1'\r\n   *  Outport: '<Root>/gate'\r\n   */\r\n  rtY.gate[3] = !rtb_LogicalOperator2;\r\n\r\n  /* MultiPortSwitch: '<S11>/Multiport Switch2' */\r\n  switch (rtb_Subtract2_a) {\r\n   case 1:\r\n    rtb_MultiportSwitch2 = rtb_Gain3_j;\r\n    break;\r\n\r\n   case 2:\r\n    rtb_MultiportSwitch2 = rtb_Gain4;\r\n    break;\r\n\r\n   case 3:\r\n    rtb_MultiportSwitch2 = rtb_Gain3_j;\r\n    break;\r\n\r\n   case 4:\r\n    rtb_MultiportSwitch2 = rtb_Gain1_ng;\r\n    break;\r\n\r\n   case 5:\r\n    rtb_MultiportSwitch2 = rtb_Gain4;\r\n    break;\r\n\r\n   default:\r\n    rtb_MultiportSwitch2 = rtb_Gain1_ng;\r\n    break;\r\n  }\r\n\r\n  /* End of MultiPortSwitch: '<S11>/Multiport Switch2' */\r\n\r\n  /* RelationalOperator: '<S13>/Relational Operator2' */\r\n  rtb_LogicalOperator2 = (rtb_ComplextoMagnitudeAngle_o2 > rtb_MultiportSwitch2);\r\n\r\n  /* DataTypeConversion: '<S13>/Cast To Double4' incorporates:\r\n   *  Outport: '<Root>/gate'\r\n   */\r\n  rtY.gate[4] = rtb_LogicalOperator2;\r\n\r\n  /* DataTypeConversion: '<S13>/Cast To Double5' incorporates:\r\n   *  Logic: '<S13>/Logical Operator2'\r\n   *  Outport: '<Root>/gate'\r\n   */\r\n  rtY.gate[5] = !rtb_LogicalOperator2;\r\n\r\n  /* Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator' incorporates:\r\n   *  Constant: '<Root>/Constant'\r\n   *  Gain: '<S1>/Gain1'\r\n   *  Gain: '<S1>/Gain2'\r\n   *  Sum: '<Root>/Sum2'\r\n   *  Sum: '<S1>/Sum3'\r\n   */\r\n  rtDW.DiscreteTimeIntegrator_DSTATE += ((9.4040441629117311 - rtb_Switch_idx_0)\r\n    - 0.063680128596982508 * rtb_Sum_i) * 2896.152729496454;\r\n\r\n  /* Update for DiscreteIntegrator: '<S3>/Discrete-Time Integrator' incorporates:\r\n   *  Gain: '<S3>/Gain1'\r\n   *  Gain: '<S3>/Gain3'\r\n   *  Inport: '<Root>/wm'\r\n   *  Sum: '<Root>/Sum'\r\n   *  Sum: '<S3>/Sum1'\r\n   *  Sum: '<S3>/Sum2'\r\n   */\r\n  rtDW.DiscreteTimeIntegrator_DSTATE_g += ((52.359877559829883 - rtU.wm) -\r\n    (rtb_Gain - rtb_Saturation_i) * 0.072152170507471164) * 2462.6907165410848;\r\n\r\n  /* Update for DiscreteIntegrator: '<S2>/Discrete-Time Integrator' incorporates:\r\n   *  Gain: '<S2>/Gain1'\r\n   *  Gain: '<S2>/Gain2'\r\n   *  Sum: '<S2>/Sum2'\r\n   *  Sum: '<S2>/Sum3'\r\n   */\r\n  rtDW.DiscreteTimeIntegrator_DSTATE_p += (rtb_Switch_idx_1 - (rtb_Sum_m -\r\n    rtb_Switch_m_idx_0) * 0.063680128596982508) * 2896.152729496454;\r\n\r\n  /* Update absolute time for base rate */\r\n  /* The \"clockTick0\" counts the number of times the code of this task has\r\n   * been executed. The resolution of this integer timer is 1.0, which is the step size\r\n   * of the task. Size of \"clockTick0\" ensures timer will not overflow during the\r\n   * application lifespan selected.\r\n   */\r\n  rtM->Timing.clockTick0++;\r\n}\r\n\r\n/* Model initialize function */\r\nvoid control_initialize(void)\r\n{\r\n  /* Registration code */\r\n\r\n  /* initialize non-finites */\r\n  rt_InitInfAndNaN(sizeof(real_T));\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"control.h","type":"header","group":"model","path":"C:\\Users\\tql\\OneDrive\\文档\\中期答辩\\伺服电机\\异步电机\\拆分版\\control_ert_rtw","tag":"","groupDisplay":"模型文件","code":"/*\r\n * File: control.h\r\n *\r\n * Code generated for Simulink model 'control'.\r\n *\r\n * Model version                  : 1.2\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Thu Oct 10 17:03:55 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Linux 64)\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_control_h_\r\n#define RTW_HEADER_control_h_\r\n#ifndef control_COMMON_INCLUDES_\r\n#define control_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* control_COMMON_INCLUDES_ */\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM RT_MODEL;\r\n\r\n/* Block signals and states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  real_T DiscreteTimeIntegrator_DSTATE;/* '<S1>/Discrete-Time Integrator' */\r\n  real_T DiscreteTimeIntegrator_DSTATE_g;/* '<S3>/Discrete-Time Integrator' */\r\n  real_T DiscreteTimeIntegrator_DSTATE_p;/* '<S2>/Discrete-Time Integrator' */\r\n} DW;\r\n\r\n/* Constant parameters (default storage) */\r\ntypedef struct {\r\n  /* Expression: [ 1   -1/2   -1/2; 0   sqrt(3)/2   -sqrt(3)/2; 1/2  1/2  1/2 ]\r\n   * Referenced by: '<S20>/Gain3'\r\n   */\r\n  real_T Gain3_Gain[9];\r\n\r\n  /* Expression: rep_seq_t\r\n   * Referenced by: '<S18>/Look-Up Table'\r\n   */\r\n  real_T LookUpTable_XData[3];\r\n\r\n  /* Expression: rep_seq_y\r\n   * Referenced by: '<S18>/Look-Up Table'\r\n   */\r\n  real_T LookUpTable_YData[3];\r\n} ConstP;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\ntypedef struct {\r\n  real_T ia;                           /* '<Root>/ia' */\r\n  real_T ib;                           /* '<Root>/ib' */\r\n  real_T ic;                           /* '<Root>/ic' */\r\n  real_T vd;                           /* '<Root>/vd' */\r\n  real_T vq;                           /* '<Root>/vq' */\r\n  real_T wm;                           /* '<Root>/wm' */\r\n} ExtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  real_T gate[6];                      /* '<Root>/gate' */\r\n} ExtY;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM {\r\n  /*\r\n   * Timing:\r\n   * The following substructure contains information regarding\r\n   * the timing information for the model.\r\n   */\r\n  struct {\r\n    uint32_T clockTick0;\r\n  } Timing;\r\n};\r\n\r\n/* Block signals and states (default storage) */\r\nextern DW rtDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nextern ExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY rtY;\r\n\r\n/* Constant parameters (default storage) */\r\nextern const ConstP rtConstP;\r\n\r\n/* Model entry point functions */\r\nextern void control_initialize(void);\r\nextern void control_step(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL *const rtM;\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<S4>/0' : Unused code path elimination\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'control'\r\n * '<S1>'   : 'control/ACR_d'\r\n * '<S2>'   : 'control/ACR_q'\r\n * '<S3>'   : 'control/ASR'\r\n * '<S4>'   : 'control/Park to Clarke Angle Transform'\r\n * '<S5>'   : 'control/SVPWM'\r\n * '<S6>'   : 'control/abc to dq0'\r\n * '<S7>'   : 'control/feedforward'\r\n * '<S8>'   : 'control/powergui'\r\n * '<S9>'   : 'control/SVPWM/Sector'\r\n * '<S10>'  : 'control/SVPWM/T1T2'\r\n * '<S11>'  : 'control/SVPWM/allocate'\r\n * '<S12>'  : 'control/SVPWM/fuse'\r\n * '<S13>'  : 'control/SVPWM/gating'\r\n * '<S14>'  : 'control/SVPWM/xyz'\r\n * '<S15>'  : 'control/SVPWM/Sector/准则A'\r\n * '<S16>'  : 'control/SVPWM/Sector/准则B'\r\n * '<S17>'  : 'control/SVPWM/Sector/准则C'\r\n * '<S18>'  : 'control/SVPWM/gating/triangle'\r\n * '<S19>'  : 'control/abc to dq0/Alpha-Beta-Zero to dq0'\r\n * '<S20>'  : 'control/abc to dq0/abc to Alpha-Beta-Zero'\r\n * '<S21>'  : 'control/abc to dq0/Alpha-Beta-Zero to dq0/Compare To Constant'\r\n * '<S22>'  : 'control/abc to dq0/Alpha-Beta-Zero to dq0/Compare To Constant1'\r\n * '<S23>'  : 'control/abc to dq0/Alpha-Beta-Zero to dq0/Subsystem - pi//2 delay'\r\n * '<S24>'  : 'control/abc to dq0/Alpha-Beta-Zero to dq0/Subsystem1'\r\n * '<S25>'  : 'control/feedforward/Alpha-Beta-Zero to dq0'\r\n * '<S26>'  : 'control/feedforward/Alpha-Beta-Zero to dq0/Compare To Constant'\r\n * '<S27>'  : 'control/feedforward/Alpha-Beta-Zero to dq0/Compare To Constant1'\r\n * '<S28>'  : 'control/feedforward/Alpha-Beta-Zero to dq0/Subsystem - pi//2 delay'\r\n * '<S29>'  : 'control/feedforward/Alpha-Beta-Zero to dq0/Subsystem1'\r\n */\r\n#endif                                 /* RTW_HEADER_control_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"control_data.c","type":"source","group":"data","path":"C:\\Users\\tql\\OneDrive\\文档\\中期答辩\\伺服电机\\异步电机\\拆分版\\control_ert_rtw","tag":"","groupDisplay":"数据文件","code":"/*\r\n * File: control_data.c\r\n *\r\n * Code generated for Simulink model 'control'.\r\n *\r\n * Model version                  : 1.2\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Thu Oct 10 17:03:55 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Linux 64)\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"control.h\"\r\n\r\n/* Constant parameters (default storage) */\r\nconst ConstP rtConstP = {\r\n  /* Expression: [ 1   -1/2   -1/2; 0   sqrt(3)/2   -sqrt(3)/2; 1/2  1/2  1/2 ]\r\n   * Referenced by: '<S20>/Gain3'\r\n   */\r\n  { 1.0, 0.0, 0.5, -0.5, 0.8660254037844386, 0.5, -0.5, -0.8660254037844386, 0.5\r\n  },\r\n\r\n  /* Expression: rep_seq_t\r\n   * Referenced by: '<S18>/Look-Up Table'\r\n   */\r\n  { 0.0, 5.0E-5, 0.0001 },\r\n\r\n  /* Expression: rep_seq_y\r\n   * Referenced by: '<S18>/Look-Up Table'\r\n   */\r\n  { 0.0, 5.0E-5, 0.0 }\r\n};\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"C:\\Users\\tql\\OneDrive\\文档\\中期答辩\\伺服电机\\异步电机\\拆分版\\control_ert_rtw","tag":"","groupDisplay":"实用工具文件","code":"/*\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'control'.\r\n *\r\n * Model version                  : 1.2\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Thu Oct 10 17:03:55 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Linux 64)\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: Intel->x86-64 (Linux 64)\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  64    long long:  64\r\n *                       native word size:  64\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef long int64_T;\r\ntypedef unsigned long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*===========================================================================*\r\n * Complex number type definitions                                           *\r\n *===========================================================================*/\r\n#define CREAL_T\r\n\r\ntypedef struct {\r\n  real32_T re;\r\n  real32_T im;\r\n} creal32_T;\r\n\r\ntypedef struct {\r\n  real64_T re;\r\n  real64_T im;\r\n} creal64_T;\r\n\r\ntypedef struct {\r\n  real_T re;\r\n  real_T im;\r\n} creal_T;\r\n\r\n#define CINT8_T\r\n\r\ntypedef struct {\r\n  int8_T re;\r\n  int8_T im;\r\n} cint8_T;\r\n\r\n#define CUINT8_T\r\n\r\ntypedef struct {\r\n  uint8_T re;\r\n  uint8_T im;\r\n} cuint8_T;\r\n\r\n#define CINT16_T\r\n\r\ntypedef struct {\r\n  int16_T re;\r\n  int16_T im;\r\n} cint16_T;\r\n\r\n#define CUINT16_T\r\n\r\ntypedef struct {\r\n  uint16_T re;\r\n  uint16_T im;\r\n} cuint16_T;\r\n\r\n#define CINT32_T\r\n\r\ntypedef struct {\r\n  int32_T re;\r\n  int32_T im;\r\n} cint32_T;\r\n\r\n#define CUINT32_T\r\n\r\ntypedef struct {\r\n  uint32_T re;\r\n  uint32_T im;\r\n} cuint32_T;\r\n\r\n#define CINT64_T\r\n\r\ntypedef struct {\r\n  int64_T re;\r\n  int64_T im;\r\n} cint64_T;\r\n\r\n#define CUINT64_T\r\n\r\ntypedef struct {\r\n  uint64_T re;\r\n  uint64_T im;\r\n} cuint64_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807L))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807L-1L))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFUL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true}};